{"version":3,"file":"static/js/9059.30198d61.chunk.js","mappings":"iNAgCA,UApBuB,WACrB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,oB,mFCpBdA,EAAW,EAmBf,IAAMC,GAAkBC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAK,MAQd,SAASC,EAAMC,GAC5B,QAAwBC,IAApBJ,EAA+B,CACjC,IAAMK,EAAUL,IAChB,OAAqB,MAAdG,EAAqBA,EAAaE,EAI3C,OAhCF,SAAqBF,GACnB,MAAkCF,EAAAA,SAAeE,GAAjD,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAKL,GAAcG,EAWzB,OAVAL,EAAAA,WAAgB,WACG,MAAbK,GAMFC,EAAa,OAAD,OADZR,GAAY,MAGb,CAACO,IACGE,EAmBAC,CAAYN","sources":["Containers/ChatFlowDashboard/Layout.tsx","../node_modules/@mui/utils/esm/useId.js"],"sourcesContent":["import { Outlet } from \"react-router-dom\";\r\nimport { ReactFlowProvider } from \"react-flow-renderer\";\r\n\r\nimport {\r\n  FlowDrawerProvider,\r\n  FlowDataProvider,\r\n  FlowDialogProvider,\r\n  FlowServicesProvider,\r\n  FlowNodeServicesProvider,\r\n  FlowHistoryProvider,\r\n} from \"Contexts/ChatFlowDashboard\";\r\n\r\nconst ChatFlowLayout = () => {\r\n  return (\r\n    <FlowHistoryProvider>\r\n      <FlowDialogProvider>\r\n        <FlowDrawerProvider>\r\n          <FlowDataProvider>\r\n            <FlowNodeServicesProvider>\r\n              <FlowServicesProvider>\r\n                <ReactFlowProvider>\r\n                  <Outlet />\r\n                </ReactFlowProvider>\r\n              </FlowServicesProvider>\r\n            </FlowNodeServicesProvider>\r\n          </FlowDataProvider>\r\n        </FlowDrawerProvider>\r\n      </FlowDialogProvider>\r\n    </FlowHistoryProvider>\r\n  );\r\n};\r\n\r\nexport default ChatFlowLayout;\r\n","import * as React from 'react';\nlet globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}"],"names":["globalId","maybeReactUseId","React","useId","idOverride","undefined","reactId","defaultId","setDefaultId","id","useGlobalId"],"sourceRoot":""}