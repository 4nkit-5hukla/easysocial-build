{"version":3,"sources":["Components/Header/header.module.css","assets/icons/facebook.jpg","assets/icons/instagram.jpg","api/SocialMediaSetup/index.js","assets/icons/thickArrow.svg","assets/Logo/easySocial.svg","Components/Header/header.js"],"names":["module","exports","BE_URL","API","saveFBUserData","fbData","a","business_id","localStorage","getItem","fetch","API_V2","method","headers","AuthenticatedHeaders","body","JSON","stringify","res","json","message","fetchBusinessFBPages","fbUserId","Accept","Authorization","getFbConnectedPageId","saveFBPageData","pageInfo","Promise","resolve","reject","axios","url","data","saveFBPageRes","error","success","fetchIGAccountData","saveIGAccountData","igReqData","fetchAccRes","setupTwitterBusiness","twitterInfo","TwitterSetupRes","twSetupData","fetchLiUserPages","liToken","setupLinkedinBusiness","linkedinInfo","fetchSelectedFBPage","fetchSetupInfo","setupRes","unlinkSocialMediaAccount","fetchPlatformPermissions","platform","permissionRes","permissionData","permissions","fetchTWAction","twActionRes","twActionData","twCredAction","twInfoAction","fetchLIAction","liActionRes","liActionData","liCredAction","liInfoAction","fetchBusinessSMAccountInfo","fetchBusinessLogo","logoRes","logoURL","getFacebookPermissions","Header","payment","className","classes","headerOuterWrapperSpecial","headerOuterWrapper","headerWrapper","src","Logo","alt"],"mappings":"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","file":"static/js/17.5f9cab5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__3W8wo\",\"logoTitle\":\"header_logoTitle__3lUPv\",\"headerOuterWrapperSpecial\":\"header_headerOuterWrapperSpecial__1DH-Y\",\"headerOuterWrapper\":\"header_headerOuterWrapper__26ub5\"};","export default __webpack_public_path__ + \"static/media/facebook.158b20b1.jpg\";","export default __webpack_public_path__ + \"static/media/instagram.8baf5260.jpg\";","// imports\r\nimport axios from \"axios\";\r\nimport { AuthenticatedHeaders } from \"utils/ApiHeaders\";\r\n\r\nimport { API, API_V2 } from \"../../Backend\";\r\n\r\n// const NODE_ENV = \"dev\";\r\nlet BE_URL = API;\r\n\r\n//${API_V2}/fb/pages/${business_id}\r\n// requests defs\r\nconst saveFBUserData = async (fbData) => {\r\n  try {\r\n    const business_id = localStorage.getItem(\"businessId\");\r\n    const res = await fetch(`${API_V2}/fb/pages/${business_id}`, {\r\n      method: \"POST\",\r\n      headers: AuthenticatedHeaders(),\r\n      body: JSON.stringify(fbData),\r\n    });\r\n    return await res.json();\r\n  } catch (error) {\r\n    return { message: error.message };\r\n  }\r\n};\r\n\r\nconst fetchFBUserPages = (fbUserID, access_token) =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      // FB request URL\r\n      const pageURL = `https://graph.facebook.com/${fbUserID}/accounts?access_token=${access_token}`;\r\n\r\n      const FetchPagesListRes = await axios({ url: pageURL });\r\n\r\n      const { data: pageData } = FetchPagesListRes;\r\n\r\n      if (pageData.error) {\r\n        return reject({ error: pageData.error });\r\n      }\r\n\r\n      return resolve({ pageData });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchBusinessFBPages = async (fbUserId) => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/fb/facebook-pages/${fbUserId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n      },\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return { message: err.message };\r\n  }\r\n};\r\n\r\nconst getFbConnectedPageId = async () => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/test-widget/fb/connected-pageid`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n      },\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return { message: err.message };\r\n  }\r\n};\r\n\r\nconst saveFBPageData = (pageInfo) =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const saveFBPageRes = await axios({\r\n        url: `${API_V2}/fb/account`,\r\n        method: \"POST\",\r\n        data: pageInfo,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      const { data } = saveFBPageRes;\r\n\r\n      if (data.error) {\r\n        return reject({ error: data.error });\r\n      }\r\n\r\n      const { success } = data;\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchProfileImg = (pageID, accessToken) =>\r\n  new Promise(async (resolve, reject) => {\r\n    const fbURL = `https://graph.facebook.com/v11.0/${pageID}/picture`;\r\n\r\n    try {\r\n      const FetchImgRes = await axios({ url: fbURL });\r\n\r\n      const { data: imgData } = FetchImgRes;\r\n\r\n      if (imgData.error) {\r\n        return reject({ error: imgData.error });\r\n      }\r\n\r\n      const { url } = imgData;\r\n\r\n      return resolve({ url });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchIGAccountData = async () => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/ig/fetchData`, {\r\n      method: \"GET\",\r\n      headers: AuthenticatedHeaders(),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return { message: err.message };\r\n  }\r\n};\r\n\r\n/* const fetchIGAccountData = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const fetchAccRes = await axios({\r\n        url: `${API_V2}/ig/fetchData`,\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      const { data } = fetchAccRes;\r\n\r\n      if (data.noIGAccConnError) {\r\n        return reject({\r\n          error: data.error,\r\n          noIGAccConnError: true,\r\n          igConnectURL: data.igConnectURL,\r\n        });\r\n      }\r\n      return resolve(data);\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  }); */\r\n\r\nconst saveIGAccountData = (igReqData) =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const fetchAccRes = await axios({\r\n        url: `${API_V2}/ig/account`,\r\n        method: \"POST\",\r\n        data: igReqData,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      const { data } = fetchAccRes;\r\n\r\n      if (data.error) {\r\n        return reject({ error: data.error });\r\n      }\r\n\r\n      const { success } = data;\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst setupTwitterBusiness = (twitterInfo) =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const TwitterSetupRes = await axios({\r\n        url: `${BE_URL}/twitter/setup`,\r\n        method: \"POST\",\r\n        data: twitterInfo,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: twSetupData } = TwitterSetupRes;\r\n\r\n      const { error, success } = twSetupData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchLiUserPages = async (liToken) => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/setup/linkedin/pages`, {\r\n      method: \"POST\",\r\n      headers: AuthenticatedHeaders(),\r\n      body: JSON.stringify({ liToken }),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return {\r\n      message: err.message,\r\n    };\r\n  }\r\n};\r\n\r\nconst setupLinkedinBusiness = async (linkedinInfo) => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/setup/linkedin/setup-page`, {\r\n      method: \"POST\",\r\n      headers: AuthenticatedHeaders(),\r\n      body: JSON.stringify(linkedinInfo),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return {\r\n      message: err.message,\r\n    };\r\n  }\r\n};\r\n\r\n/*\r\nconst setupLinkedinBusiness = linkedinInfo =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const pagesRes = await axios({\r\n        url: `${API_V2}/setup/linkedin/setup-page`,\r\n        method: \"POST\",\r\n        data: linkedinInfo,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      const { data: liSetupData } = pagesRes;\r\n\r\n      const { error, success } = liSetupData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  }); */\r\n\r\nconst fetchSelectedFBPage = async () => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/fb/selected-page`, {\r\n      method: \"GET\",\r\n      headers: AuthenticatedHeaders(),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return { message: err.message };\r\n  }\r\n};\r\n\r\nconst fetchSetupInfo = async () => {\r\n  try {\r\n    const setupRes = await fetch(`${API_V2}/platforms/sm-connected-platform`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    });\r\n    return await setupRes.json();\r\n  } catch (error) {\r\n    return { message: error.message };\r\n  }\r\n};\r\n\r\nconst unlinkSocialMediaAccount = async (data) => {\r\n  try {\r\n    const setupRes = await fetch(`${API_V2}/platforms/unlinkAccount`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await setupRes.json();\r\n  } catch (error) {\r\n    return { message: error.message };\r\n  }\r\n};\r\n\r\nconst fetchPlatformPermissions = (platform) =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const permissionRes = await axios({\r\n        url: `${BE_URL}/smSetup/permissions`,\r\n        method: \"POST\",\r\n        data: {\r\n          platform,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: permissionData } = permissionRes;\r\n\r\n      const { error, permissions } = permissionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ permissions });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst updateTWAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const twActionRes = await axios({\r\n        url: `${BE_URL}/twitter/action`,\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: twActionData } = twActionRes;\r\n\r\n      const { error, success } = twActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst resetTWAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const twActionRes = await axios({\r\n        url: `${BE_URL}/twitter/action`,\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: twActionData } = twActionRes;\r\n\r\n      const { error, success } = twActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst updateLIAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const liActionRes = await axios({\r\n        url: `${BE_URL}/linkedin/action`,\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: liActionData } = liActionRes;\r\n\r\n      // const { error, liCredAction, liInfoAction } = liActionData;\r\n      const { error, success } = liActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst resetLIAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const liActionRes = await axios({\r\n        url: `${BE_URL}/linkedin/action`,\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: liActionData } = liActionRes;\r\n\r\n      const { error, success } = liActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ success });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchTWAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const twActionRes = await axios({\r\n        url: `${BE_URL}/twitter/action`,\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: twActionData } = twActionRes;\r\n\r\n      const { error, twCredAction, twInfoAction } = twActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ twCredAction, twInfoAction });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchLIAction = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const liActionRes = await axios({\r\n        url: `${BE_URL}/linkedin/action`,\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const { data: liActionData } = liActionRes;\r\n\r\n      // const { error, success } = liActionData;\r\n\r\n      const { error, liCredAction, liInfoAction } = liActionData;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      // return resolve({ success });\r\n      return resolve({ liCredAction, liInfoAction });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchCredentials = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const credentialsRes = await axios({\r\n        url: `${BE_URL}/smSetup/credentials`,\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const {\r\n        data: { error, credentials },\r\n      } = credentialsRes;\r\n\r\n      if (error) {\r\n        return reject({ error });\r\n      }\r\n\r\n      return resolve({ credentials });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\nconst fetchBusinessSMAccountInfo = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/platforms/detail`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    });\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    return { message: error.message };\r\n  }\r\n};\r\n\r\nconst fetchBusinessLogo = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const logoRes = await axios({\r\n        url: `${BE_URL}/smSetup/logo`,\r\n        headers: {\r\n          \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n          \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n\r\n      const {\r\n        data: { logoURL },\r\n      } = logoRes;\r\n\r\n      return resolve({ logoURL });\r\n    } catch (error) {\r\n      return reject({ message: error.message });\r\n    }\r\n  });\r\n\r\n\r\nconst getFacebookPermissions = async () => {\r\n  try {\r\n    const res = await fetch(`${API_V2}/fb/permissions`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        \"X-BusinessId\": localStorage.getItem(\"businessId\"),\r\n      },\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return { message: err.message };\r\n  }\r\n};\r\n\r\n// exports\r\nexport {\r\n  saveFBUserData,\r\n  fetchFBUserPages,\r\n  fetchBusinessFBPages,\r\n  saveFBPageData,\r\n  fetchProfileImg,\r\n  fetchIGAccountData,\r\n  saveIGAccountData,\r\n  setupTwitterBusiness,\r\n  fetchLiUserPages,\r\n  setupLinkedinBusiness,\r\n  fetchSelectedFBPage,\r\n  fetchSetupInfo,\r\n  unlinkSocialMediaAccount,\r\n  fetchPlatformPermissions,\r\n  updateTWAction,\r\n  updateLIAction,\r\n  fetchTWAction,\r\n  fetchLIAction,\r\n  resetTWAction,\r\n  resetLIAction,\r\n  fetchCredentials,\r\n  fetchBusinessSMAccountInfo,\r\n  fetchBusinessLogo,\r\n  getFbConnectedPageId,\r\n  getFacebookPermissions\r\n\r\n};\r\n","export default __webpack_public_path__ + \"static/media/thickArrow.99196990.svg\";","export default __webpack_public_path__ + \"static/media/easySocial.017ec3b9.svg\";","import React from \"react\";\r\n\r\n//import classes from './header.module.scss';\r\n\r\nimport classes from \"./header.module.css\";\r\n\r\n//import Logo from '../../Assets/icons/easySocial.svg'\r\nimport Logo from \"../../assets/Logo/easySocial.svg\";\r\nexport default function Header({ payment = false }) {\r\n  return (\r\n    <div\r\n      className={\r\n        payment ? classes.headerOuterWrapperSpecial : classes.headerOuterWrapper\r\n      }\r\n    >\r\n      <div className={classes.headerWrapper}>\r\n        <img src={Logo} alt=\"logo\" />\r\n        {/* <div className={classes.logoTitle}>Social Marketing Simplified</div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}