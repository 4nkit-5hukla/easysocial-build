{"version":3,"sources":["Container/Elements/ImageElement.js","Container/Elements/TextElement.js","Components/Canvas/Header/Header.module.css","Components/Canvas/TransformerComponent/TransformerComponent.js","Components/Canvas/Button/Button.js","Components/Canvas/Button/Button.module.css","Container/Elements/RectElement.js","Container/Elements/PathElement.js","Container/Elements/CircleElement.js","assets/icons/up-arrow.svg","Components/Canvas/Header/Header.js","Container/CreateTemplate/Components/FontPanel/FontPanel.module.css","Container/CreateTemplate/Components/FontPanel/EditText/EditText.module.css","Container/CreateTemplate/Components/FontPanel/AddFont/AddFont.module.css","Container/CreateTemplate/Container/Canvas/Canvas.module.css","Container/CreateTemplate/Components/GeneralPanel/GeneralPanel.module.css","Container/CreateTemplate/Components/FontPanel/EditText/EditText.js","Container/CreateTemplate/Components/FontPanel/AddFont/AddFont.js","Container/CreateTemplate/Components/FontPanel/FontPanel.js","assets/icons/horizontal-symmetry.svg","Container/CreateTemplate/Components/GeneralPanel/GeneralPanel.js","Container/CreateTemplate/Container/Canvas/Canvas.edit.js"],"names":["ImageElement","props","useState","photo","setPhoto","useEffect","img","image","window","Image","src","crossOrigin","addEventListener","loadImage","Fragment","id","name","x","y","width","height","onDragMove","e","updateProperty","onTransformEnd","draggable","scaleX","scaleY","TextElement","lineHeight","parseInt","text","textDecoration","underline","fontFamily","font","fontSize","fill","color","fontStyle","bold","italic","align","textAlignment","onTransform","node","target","gp","setAttrs","active","map","transformer","getActiveAnchor","checkActiveAnchor","getFontSize","rotation","letterSpacing","Number","module","exports","TransformerComponent","this","checkNode","stage","getStage","selectedShapeName","selectedNode","findOne","nodes","className","enabledAnchors","anchorName","detach","getLayer","batchDraw","ref","React","Component","Button","classes","Button_Container","undo","Undo_Button","onClick","handleCropStart","viewBox","xmlns","d","redo","Redo_Button","copy","Copy_Button","handleCopyElement","Delete_Button","handleDeleteElement","RectElement","stroke","strokeWidth","PathElement","data","CircleElement","radius","Header","deselect","LeftArrow","goBack","strokeLinecap","strokeLinejoin","Header_Text","Title","Sub","IndexBtn","IndexUp","moveUp","upArrow","alt","IndexDown","moveDown","Next","href","saveToDataBase","EditText","textareaRef","useRef","show","setShow","BackDrop","style","marginBottom","TextPopup","defaultValue","displayValue","Textarea","cols","rows","Btn","ApplyBtn","handleText","current","value","CancelBtn","AddFont","fontNameRef","fontURLRef","handleShow","onSubmit","preventDefault","addFont","path","then","getFontData","catch","err","required","placeholder","connect","state","fonts","Fonts","showFonts","FontSize","showFontSize","FontStyle","showFontStyle","fontDetail","setfontDetail","selectedFont","index","push","filter","showFont","setFont","showAddFont","url","FontPanel","Font_Family","DropDown_Content","Font","getFont","fontWeight","backgroundColor","DropDown","length","slice","Font_Size","size","Size","type","Dropdown","onChange","Font_Style","isBold","handleBold","isItalic","handleItalic","isUnderline","handleUnderline","Saperator","fontVariant","handleNormalize","handleCapitalize","handleUppercase","handleSmallcase","Font_Align","handleAlignment","line1","line2","alignment","margin","marginLeft","line3","Line_Height","handleLineHeight","Font_Color","Color","fontColor","onInput","getFontColor","handleLetterSpacing","GeneralPanel","Container","Spacing","handleFlip","Parent","flip","canvas","imageHandler","dispatch","fetchData","params","actions","fetchFonts","getPhotos","photos","addPhoto","deletePhoto","withRouter","stageRef","canvasWidth","canvasHeight","canvasScaleX","canvasScaleY","setCanvas","reload","setReload","element","setElement","setText","count","setCount","selected","selectShape","selectedIndex","selectShapeIndex","shapeId","selectedShapeId","handleStageMouseDown","getParent","textFont","textData","setSelectedTextData","getSelectedTextData","i","items","item","getSelectedTextPosition","getSelectedRectData","getSelectedImgData","getSelectedPathData","getSelectedCircleData","transformerObject","getObject","match","templateId","head","document","getElementsByTagName","forEach","createElement","rel","append","texts","property","elements","containerRef","scale","offsetWidth","previewPhoto","setPreviewPhoto","previewPhotoVisible","setPreviewPhotoVisible","thumbnail","png","previewImg","cache","array_move","arr","old_index","new_index","k","splice","canvas_container","Helmet","history","saveTemplate","location","console","log","layer","findIndex","onTap","onMouseDown","onTouchStart","zIndex","cx","cy","r","opacity","filters","Konva","Filters","Grayscale","listening","visible","Toggle_Preview","el","result","WebFont","load","google","families","find","toUpperCase","toLowerCase","replace"],"mappings":"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","file":"static/js/67.5ed5cc32.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Image } from \"react-konva\";\r\n\r\nconst ImageElement = (props) => {\r\n  const [photo, setPhoto] = useState(null);\r\n\r\n  // const [cropDetail] = useState({\r\n  //   cropScaleX: null,\r\n  //   cropScaleY: null,\r\n  //   cropX: null,\r\n  //   cropY: null,\r\n  //   cropStart: false,\r\n  // });\r\n\r\n  // const { cropScaleX, cropScaleY, cropX, cropY, cropStart } = cropDetail;\r\n\r\n  const loadImage = () => {\r\n    let image = new window.Image();\r\n    image.src = props.img;\r\n    image.crossOrigin = \"anonymous\";\r\n\r\n    image.addEventListener(\"load\", () => {\r\n      setPhoto(image);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.img && !photo) {\r\n      loadImage();\r\n    }\r\n  }, [props.img, photo]);\r\n\r\n  // const getPosRect = (pos, ele) => {\r\n  //   let cliPos = ele.getClientRect();\r\n  //   let posRect = {\r\n  //     left: pos.x,\r\n  //     top: pos.y,\r\n  //     right: pos.x + props.width,\r\n  //     bottom: pos.y + props.height,\r\n  //     width: props.width,\r\n  //     height: props.height,\r\n  //   };\r\n  //   return posRect;\r\n  // };\r\n  // set the bounds rect to the size of the given element\r\n  // const setBoundRect = (ele) => {\r\n  //   let x = ele.position();\r\n  //   let posRect = getPosRect(ele.position(), ele);\r\n  //   const stageRef = props.stageRef;\r\n  //   const darkImg = stageRef.findOne(\r\n  //     (node) => node.id() === `darkImg${props.id}`\r\n  //   );\r\n\r\n  //   darkImg.position({ x: posRect.left, y: posRect.top });\r\n  //   darkImg.size({ width: posRect.width, height: posRect.height });\r\n  // };\r\n\r\n  // const darkImg = props.stageRef.findOne(\r\n  //   (node) => node.id() === `darkImg${props.id}`\r\n  // );\r\n\r\n  // const imgRect = props.stageRef.findOne(\r\n  //   (node) => node.id() === `imgRect${props.id}`\r\n  // );\r\n\r\n  // const imgGroup = props.stageRef.findOne(\r\n  //   (node) => node.id() === `imgGroup${props.id}`\r\n  // );\r\n\r\n  // const cropRect = props.stageRef.findOne(\r\n  //   (node) => node.id() === `cropRect${props.id}`\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   const mainImg = props.stageRef.findOne((node) => node.id() === props.id);\r\n\r\n  //   if (photo) {\r\n  //     // you many need to reapply cache on some props changes like shadow, stroke, etc.\r\n  //     mainImg.cache();\r\n  //     // since this update is not handled by \"react-konva\" and we are using Konva methods directly\r\n  //     // we have to redraw layer manually\r\n\r\n  //     mainImg.getLayer().batchDraw();\r\n  //   }\r\n  // }, [photo]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Image\r\n        id={`darkImg${props.id}`}\r\n        image={photo}\r\n        visible={props.cropStart}\r\n        opacity={0.5}\r\n        fill=\"black\"\r\n        strokeWidth={1}\r\n        dash={[3, 3]}\r\n        listening={false}\r\n        width={props.width}\r\n        height={props.height}\r\n        x={props.x}\r\n        y={props.y}\r\n      /> */}\r\n\r\n      {/* <Rect\r\n        visible={!props.cropStart}\r\n        id={`imgRect${props.id}`}\r\n        height={100}\r\n        width={props.width}\r\n        x={props.x}\r\n        y={props.y}\r\n        onTransform={() => {\r\n          imgGroup.setAttrs({\r\n            scaleX: imgRect.scaleX(),\r\n            scaleY: imgRect.scaleY(),\r\n            x: imgRect.x() - imgGroup.clipX() * imgGroup.scaleX(),\r\n            y: imgRect.y() - imgGroup.clipY() * imgGroup.scaleY(),\r\n          });\r\n\r\n          darkImg.setAttrs({\r\n            x: imgGroup.x() + props.x,\r\n            y: imgGroup.y() + props.y,\r\n          });\r\n\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n        }}\r\n        onTransformEnd={() => {\r\n          console.log(imgGroup);\r\n          cropRect.setAttrs({\r\n            x: imgRect.x(),\r\n            y: imgRect.y(),\r\n            width: imgRect.width() * imgRect.scaleX(),\r\n            height: (imgRect.height() * imgRect.scaleY()) / 2,\r\n          });\r\n\r\n          const mainImg = props.stageRef.findOne(\r\n            (node) => node.id() === `${props.id}`\r\n          );\r\n\r\n          \r\n        }}\r\n        onDragMove={() => {\r\n          cropRect.setAttrs({\r\n            x: imgRect.x(),\r\n            y: imgRect.y(),\r\n          });\r\n\r\n          // setCropDetail({ ...cropDetail, cropWidth: cropRect.width() });\r\n          imgGroup.setAttrs({\r\n            x: imgRect.x() - imgGroup.clipX(),\r\n            y: imgRect.y() - imgGroup.clipY(),\r\n          });\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n        }}\r\n        draggable\r\n      /> */}\r\n\r\n      {/* <Group\r\n        id={`imgGroup${props.id}`}\r\n        clip={{\r\n          x: props.x,\r\n          y: props.y,\r\n          width: imgRect ? imgRect.width() : props.width,\r\n          height: imgRect ? imgRect.height() : props.height,\r\n        }}\r\n        // x={imgRect ? imgRect.x() - imgGroup.clipX() * imgGroup.scaleX() : 100}\r\n        // y={imgRect ? imgRect.y() - imgGroup.clipY() * imgGroup.scaleY() : 100}\r\n      > */}\r\n      <Image\r\n        id={props.id}\r\n        name={props.name}\r\n        image={photo}\r\n        x={props.x}\r\n        y={props.y}\r\n        width={props.width}\r\n        height={props.height}\r\n        // onDragMove={(e) => {\r\n        //   const node = e.target;\r\n        //   const stageRef = props.stageRef;\r\n        //   const stage = stageRef.findOne(\r\n        //     (node) => node.id() === `darkImg${props.id}`\r\n        //   );\r\n        //   setBoundRect(node);\r\n        //   // console.log(node.size)\r\n        // }}\r\n        // listening={false}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n        draggable\r\n        scaleX={props.scaleX}\r\n        scaleY={props.scaleY}\r\n      />\r\n      {/* </Group> */}\r\n      {/* <Rect\r\n        visible={props.cropStart}\r\n        fill=\"transparent\"\r\n        id={`cropRect${props.id}`}\r\n        width={props.width}\r\n        height={100}\r\n        x={props.x}\r\n        y={props.y}\r\n        onDragMove={(e) => {\r\n          const node = e.target;\r\n          const imgRect = props.stageRef.findOne(\r\n            (node) => node.id() === `imgRect${props.id}`\r\n          );\r\n          imgRect.setAttrs({\r\n            x: node.x(),\r\n            y: node.y(),\r\n          });\r\n        }}\r\n        onTransform={(e) => {\r\n          const node = e.target;\r\n          const imgRect = props.stageRef.findOne(\r\n            (node) => node.id() === `imgRect${props.id}`\r\n          );\r\n\r\n          node.setAttrs({\r\n            width: node.width() * node.scaleX(),\r\n            height: node.height() * node.scaleY(),\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n          });\r\n\r\n          imgRect.setAttrs({\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: node.scaleX() * node.width(),\r\n            height: node.scaleY() * node.height(),\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n          });\r\n\r\n          imgGroup.setAttrs({\r\n            scaleX: imgRect.scaleX(),\r\n            scaleY: imgRect.scaleY(),\r\n            x: imgRect.x() - imgGroup.clipX() * imgGroup.scaleX(),\r\n            y: imgRect.y() - imgGroup.clipY() * imgGroup.scaleY(),\r\n          });\r\n\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n\r\n          setCropDetail({ ...cropDetail, cropWidth: node.width() });\r\n        }}\r\n        draggable */}\r\n      {/* /> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ImageElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Text } from \"react-konva\";\r\n\r\nconst TextElement = (props) => {\r\n  const checkActiveAnchor = () => {\r\n    const anchors = [\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\"];\r\n\r\n    let active = null;\r\n    anchors.map((e) => {\r\n      if (props.transformer.getActiveAnchor() === e) {\r\n        return (active = e);\r\n      }\r\n\r\n      return;\r\n    });\r\n    return active;\r\n  };\r\n\r\n  return (\r\n    <Text\r\n      width={props.width}\r\n      height={props.height}\r\n      lineHeight={props.lineHeight}\r\n      scaleX={parseInt(props.scaleX)}\r\n      id={props.id}\r\n      x={parseInt(props.x)}\r\n      y={parseInt(props.y)}\r\n      text={props.text}\r\n      textDecoration={props.underline ? \"underline\" : \"\"}\r\n      fontFamily={props.font}\r\n      fontSize={parseInt(props.fontSize)}\r\n      fill={props.color}\r\n      fontStyle={\r\n        props.bold && props.italic\r\n          ? \"bold italic\"\r\n          : props.italic\r\n          ? \"italic\"\r\n          : props.bold\r\n          ? \"bold\"\r\n          : \"normal\"\r\n      }\r\n      name={props.name}\r\n      align={props.textAlignment}\r\n      draggable\r\n      onTransform={(e) => {\r\n        const node = e.target;\r\n\r\n        let scaleX = node.scaleX();\r\n        let scaleY = node.scaleY();\r\n\r\n        let width = node.width();\r\n\r\n        let w = scaleY - 1;\r\n\r\n        let gp = ((w / 1) * 100) / 2;\r\n\r\n        node.setAttrs({\r\n          width: width * scaleX,\r\n          scaleX: 1,\r\n        });\r\n\r\n        if (checkActiveAnchor()) {\r\n          node.setAttrs({\r\n            fontSize: props.fontSize + gp,\r\n          });\r\n        }\r\n\r\n        return props.getFontSize(node.fontSize());\r\n      }}\r\n      onTransformEnd={(e) => props.updateProperty(e)}\r\n      onDragMove={(e) => props.updateProperty(e)}\r\n      rotation={parseInt(props.rotation)}\r\n      letterSpacing={Number(props.letterSpacing)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextElement;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3uB-d\",\"Header_Text\":\"Header_Header_Text__2N2EW\",\"Title\":\"Header_Title__rICwm\",\"Sub\":\"Header_Sub__3t57o\",\"Next\":\"Header_Next__2dwcE\",\"LeftArrow\":\"Header_LeftArrow__2zENS\",\"IndexBtn\":\"Header_IndexBtn__2YUep\",\"IndexDown\":\"Header_IndexDown__2vbL0\"};","/** @format */\r\nimport React from \"react\";\r\nimport { Transformer } from \"react-konva\";\r\n\r\nexport default class TransformerComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.checkNode();\r\n  }\r\n  componentDidUpdate() {\r\n    this.checkNode();\r\n  }\r\n  checkNode() {\r\n    // here we need to manually attach or detach Transformer node\r\n    const stage = this.transformer.getStage();\r\n    const { selectedShapeName } = this.props;\r\n\r\n    const selectedNode = stage.findOne(\r\n      (node) => node.id() === selectedShapeName\r\n    );\r\n    // do nothing if selected node is already attached\r\n    if (selectedNode === this.transformer.node()) {\r\n      return;\r\n    }\r\n\r\n    if (selectedNode) {\r\n      // attach to another node\r\n      this.transformer.nodes([selectedNode]);\r\n      if (selectedNode.className === \"Text\") {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-right\",\r\n          \"middle-right\",\r\n          \"middle-left\",\r\n          \"bottom-left\",\r\n          \"bottom-right\",\r\n        ]);\r\n\r\n        this.props.anchorName(this.transformer);\r\n      } else if (selectedNode.className === \"Image\") {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-center\",\r\n          \"top-right\",\r\n          \"bottom-left\",\r\n          \"bottom-center\",\r\n          \"bottom-right\",\r\n        ]);\r\n      } else {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-center\",\r\n          \"top-right\",\r\n          \"middle-right\",\r\n          \"middle-left\",\r\n          \"bottom-left\",\r\n          \"bottom-center\",\r\n          \"bottom-right\",\r\n        ]);\r\n      }\r\n    } else {\r\n      // remove transformer\r\n      this.transformer.detach();\r\n    }\r\n    this.transformer.getLayer().batchDraw();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Transformer\r\n        ref={(node) => {\r\n          this.transformer = node;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div className={classes.Button_Container}>\r\n      {props.undo && (\r\n        <div\r\n          className={classes.Undo_Button}\r\n          onClick={() => props.handleCropStart()}\r\n        >\r\n          <button>\r\n            <svg\r\n              width=\"437\"\r\n              height=\"437\"\r\n              viewBox=\"0 0 437 437\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <g clip-path=\"url(#clip0)\">\r\n                <path\r\n                  d=\"M224 143.573C167.573 143.573 116.16 164.586 76.8 199.04L0 122.24V314.24H192L114.88 237.12C144.427 212.267 182.293 196.907 224 196.907C299.627 196.907 363.627 246.08 386.027 314.24L436.48 297.6C407.147 208.213 323.2 143.573 224 143.573Z\"\r\n                  fill=\"black\"\r\n                />\r\n              </g>\r\n              <defs>\r\n                <clipPath id=\"clip0\">\r\n                  <rect width=\"436.48\" height=\"436.48\" fill=\"white\" />\r\n                </clipPath>\r\n              </defs>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {props.redo && (\r\n        <div className={classes.Redo_Button}>\r\n          <button>\r\n            <svg\r\n              width=\"437\"\r\n              height=\"437\"\r\n              viewBox=\"0 0 437 437\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <g clip-path=\"url(#clip0)\">\r\n                <path\r\n                  d=\"M359.573 199.04C320.32 164.587 268.906 143.573 212.48 143.573C113.28 143.573 29.333 208.213 0 297.6L50.453 314.24C72.853 246.08 136.853 196.907 212.48 196.907C254.187 196.907 292.053 212.267 321.6 237.12L244.48 314.24H436.48V122.24L359.573 199.04Z\"\r\n                  fill=\"black\"\r\n                />\r\n              </g>\r\n              <defs>\r\n                <clipPath id=\"clip0\">\r\n                  <rect width=\"436.48\" height=\"436.48\" fill=\"white\" />\r\n                </clipPath>\r\n              </defs>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {props.copy && (\r\n        <div\r\n          className={classes.Copy_Button}\r\n          onClick={() => props.handleCopyElement()}\r\n        >\r\n          <button>\r\n            <svg\r\n              width=\"512\"\r\n              height=\"512\"\r\n              viewBox=\"0 0 512 512\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M311 512H120C75.8867 512 40 476.113 40 432V161C40 116.887 75.8867 81 120 81H311C355.113 81 391 116.887 391 161V432C391 476.113 355.113 512 311 512ZM120 121C97.9453 121 80 138.945 80 161V432C80 454.055 97.9453 472 120 472H311C333.055 472 351 454.055 351 432V161C351 138.945 333.055 121 311 121H120ZM471 382V80C471 35.8867 435.113 0 391 0H169C157.953 0 149 8.95312 149 20C149 31.0469 157.953 40 169 40H391C413.055 40 431 57.9453 431 80V382C431 393.047 439.953 402 451 402C462.047 402 471 393.047 471 382Z\"\r\n                fill=\"black\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        className={classes.Delete_Button}\r\n        onClick={() => props.handleDeleteElement()}\r\n      >\r\n        <button>\r\n          <svg\r\n            width=\"300\"\r\n            height=\"384\"\r\n            viewBox=\"0 0 300 384\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M22 341.333C22 364.907 41.093 384 64.667 384H235.334C258.907 384 278 364.907 278 341.333V85.333H22V341.333Z\"\r\n              fill=\"black\"\r\n            />\r\n            <path\r\n              d=\"M224.667 21.333L203.333 0H96.667L75.333 21.333H0.666992V64H299.333V21.333H224.667Z\"\r\n              fill=\"black\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button_Container\":\"Button_Button_Container__2l7go\"};","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Rect } from \"react-konva\";\r\n\r\nconst RectElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        id={props.id}\r\n        fill={props.fill}\r\n        stroke={props.stroke}\r\n        strokeWidth={props.strokeWidth}\r\n        x={Number(props.x) ? Number(props.x) : 0}\r\n        y={Number(props.y) ? Number(props.y) : 0}\r\n        width={Number(props.width)}\r\n        height={Number(props.height)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n        draggable\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RectElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Path } from \"react-konva\";\r\n\r\nconst PathElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Path\r\n        id={props.id}\r\n        fill={props.fill}\r\n        x={Number(props.x)}\r\n        y={Number(props.y)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        draggable\r\n        data={props.d}\r\n        name={props.name}\r\n        onDragMove={(e) => {\r\n          // e.target.moveu\r\n          props.updateProperty(e);\r\n        }}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PathElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Circle } from \"react-konva\";\r\n\r\nconst CircleElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Circle\r\n        id={props.id}\r\n        fill={props.fill ? props.fill : null}\r\n        x={Number(props.x)}\r\n        y={Number(props.y)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        draggable\r\n        strokeWidth={props.strokeWidth}\r\n        stroke={props.stroke || \"black\"}\r\n        radius={Number(props.radius)}\r\n        name={props.name}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CircleElement;\r\n","export default __webpack_public_path__ + \"static/media/up-arrow.212a7457.svg\";","import React from \"react\";\r\nimport classes from \"./Header.module.css\";\r\nimport upArrow from \"../../../assets/icons/up-arrow.svg\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={classes.Header} onClick={props.deselect}>\r\n      <div className={classes.LeftArrow}>\r\n        <svg\r\n          onClick={() => props.goBack()}\r\n          width=\"9\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 9 14\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M8 1L1.8858 6.24074C1.42019 6.63984 1.42019 7.36016 1.8858 7.75926L8 13\"\r\n            stroke=\"white\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"bevel\"\r\n          />\r\n        </svg>\r\n      </div>\r\n\r\n      <div className={classes.Header_Text}>\r\n        <div className={classes.Title}>\r\n          <h1>Edit Post</h1>\r\n        </div>\r\n        <div className={classes.Sub}>\r\n          <p>Edit Post</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.IndexBtn}>\r\n        <div className={classes.IndexUp} onClick={props.moveUp}>\r\n          <img src={upArrow} alt=\"moveUp\" />\r\n        </div>\r\n        <div className={classes.IndexDown} onClick={props.moveDown}>\r\n          <img src={upArrow} alt=\"moveDown\" />\r\n        </div>\r\n      </div>\r\n      {/* <div className={classes.Brighten}>\r\n        <a href=\"#filter\">\r\n          <img src={sun} alt=\"filters\" />\r\n        </a>\r\n      </div> */}\r\n\r\n      <div className={classes.Next}>\r\n        <a href=\"#next\" onClick={props.saveToDataBase}>\r\n          Next\r\n          <svg\r\n            width=\"9\"\r\n            height=\"11\"\r\n            viewBox=\"0 0 9 14\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M8 1L1.8858 6.24074C1.42019 6.63984 1.42019 7.36016 1.8858 7.75926L8 13\"\r\n              stroke=\"white\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"bevel\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FontPanel\":\"FontPanel_FontPanel__2HDQW\",\"Font_Family\":\"FontPanel_Font_Family__3Rjmd\",\"DropDown\":\"FontPanel_DropDown__10RyD\",\"DropDown_Content\":\"FontPanel_DropDown_Content__3oWOq\",\"Font\":\"FontPanel_Font__SoHpE\",\"Font_Size\":\"FontPanel_Font_Size__2LYa0\",\"Size\":\"FontPanel_Size__2OiuS\",\"Font_Style\":\"FontPanel_Font_Style__297n9\",\"Saperator\":\"FontPanel_Saperator__1DKHW\",\"Font_Align\":\"FontPanel_Font_Align__uj6W-\",\"line1\":\"FontPanel_line1__2Kb0d\",\"line2\":\"FontPanel_line2__1fljF\",\"Font_Color\":\"FontPanel_Font_Color__26wqK\",\"Color\":\"FontPanel_Color__3C0Eq\",\"Line_Height\":\"FontPanel_Line_Height__T_5Pl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"EditText_BackDrop__hGSkQ\",\"EditText\":\"EditText_EditText__1guoD\",\"TextPopup\":\"EditText_TextPopup__2lNB0\",\"Btn\":\"EditText_Btn__IZqrr\",\"ApplyBtn\":\"EditText_ApplyBtn__ViYD-\",\"CancelBtn\":\"EditText_CancelBtn__3SAH6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"AddFont_BackDrop__3G4Ov\",\"AddFont\":\"AddFont_AddFont__Ppaov\",\"TextPopup\":\"AddFont_TextPopup__3GrZ2\",\"Btn\":\"AddFont_Btn__19xuZ\",\"ApplyBtn\":\"AddFont_ApplyBtn__2TpZ9\",\"CancelBtn\":\"AddFont_CancelBtn__d4I3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas_container\":\"Canvas_canvas_container__2JAMS\",\"Toggle_Preview\":\"Canvas_Toggle_Preview__21mXC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"GeneralPanel_Container__1Cqup\",\"GeneralPanel\":\"GeneralPanel_GeneralPanel__3yNXG\",\"Color\":\"GeneralPanel_Color__2Zfkp\",\"Fill\":\"GeneralPanel_Fill__2FB2a\",\"Stroke\":\"GeneralPanel_Stroke__2XYoN\",\"Spacing\":\"GeneralPanel_Spacing__3NsTz\",\"Parent\":\"GeneralPanel_Parent__3KTeb\",\"Line\":\"GeneralPanel_Line__3LTmt\",\"Rect\":\"GeneralPanel_Rect__7_9vJ\",\"StrokeWidth\":\"GeneralPanel_StrokeWidth__1NReQ\",\"DropDown_Content\":\"GeneralPanel_DropDown_Content__XJ_T1\"};","/** @format */\r\n\r\nimport React from \"react\";\r\nimport classes from \"./EditText.module.css\";\r\n\r\nconst EditText = (props) => {\r\n  const textareaRef = React.useRef();\r\n\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {show && <div className={classes.BackDrop}></div>}\r\n      <div\r\n        className={classes.EditText}\r\n        style={{ marginBottom: props.fontStyle ? \"60px\" : \"20px\" }}\r\n        onClick={() => setShow(!show)}\r\n      >\r\n        <h1>Edit</h1>\r\n      </div>\r\n\r\n      {/* Inout popup */}\r\n      {show && (\r\n        <div className={classes.TextPopup}>\r\n          <textarea\r\n            defaultValue={props.displayValue}\r\n            ref={textareaRef}\r\n            className={classes.Textarea}\r\n            name=\"Edit\"\r\n            cols=\"30\"\r\n            rows=\"30\"\r\n          />\r\n          <div className={classes.Btn}>\r\n            <button\r\n              className={classes.ApplyBtn}\r\n              onClick={() => {\r\n                props.handleText(textareaRef.current.value);\r\n                setShow(!show);\r\n              }}\r\n            >\r\n              <p>Save</p>\r\n            </button>\r\n            <button\r\n              className={classes.CancelBtn}\r\n              onClick={() => {\r\n                props.handleText(textareaRef.current.value);\r\n                setShow(!show);\r\n              }}\r\n            >\r\n              <p>Cancel</p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditText;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { addFont } from \"../../../../../api/Font\";\r\nimport classes from \"./AddFont.module.css\";\r\n\r\nconst AddFont = (props) => {\r\n  const fontNameRef = React.useRef();\r\n  const fontURLRef = React.useRef();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.show && (\r\n        <div className={classes.BackDrop} onClick={props.handleShow}></div>\r\n      )}\r\n\r\n      {/* Input popup */}\r\n      {props.show && (\r\n        <div className={classes.TextPopup}>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n\r\n              addFont({\r\n                name: fontNameRef.current.value,\r\n                path: fontURLRef.current.value,\r\n              })\r\n                .then((data) => {\r\n                  props.handleShow();\r\n                  props.getFontData(\r\n                    fontNameRef.current.value,\r\n                    fontURLRef.current.value\r\n                  );\r\n                })\r\n                .catch((err) => {\r\n                  props.handleShow();\r\n                });\r\n            }}\r\n          >\r\n            <h1>Add Font</h1>\r\n            <input\r\n              required\r\n              defaultValue={props.displayValue}\r\n              placeholder=\"Font Name Here....\"\r\n              ref={fontNameRef}\r\n              className={classes.Textarea}\r\n              name=\"name\"\r\n            />\r\n            <br />\r\n            <input\r\n              required\r\n              defaultValue={props.displayValue}\r\n              placeholder=\"Font URL Here....\"\r\n              ref={fontURLRef}\r\n              className={classes.Textarea}\r\n              name=\"path\"\r\n            />\r\n            <div className={classes.Btn}>\r\n              <button className={classes.ApplyBtn}>Save</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddFont;\r\n","/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport classes from \"./FontPanel.module.css\";\r\nimport EditText from \"./EditText/EditText\";\r\nimport { connect } from \"react-redux\";\r\nimport AddFont from \"./AddFont/AddFont\";\r\n\r\nconst FontPanel = (props) => {\r\n  const [Fonts, showFonts] = React.useState(false);\r\n  const [FontSize, showFontSize] = React.useState(false);\r\n  const [FontStyle, showFontStyle] = React.useState(false);\r\n\r\n  const [fontDetail, setfontDetail] = useState([]);\r\n\r\n  let fontSize = [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96];\r\n  let selectedFont = props.fontFamily;\r\n\r\n  useEffect(() => {\r\n    let fonts = [];\r\n    if (props.fonts) {\r\n      props.fonts.map((e, index) => {\r\n        fonts.push({ name: e.name, color: null, src: e.path });\r\n      });\r\n      setfontDetail(fonts);\r\n    }\r\n  }, [props.fonts]);\r\n\r\n  // eslint-disable-next-line array-callback-return\r\n  fontDetail.filter((e) => {\r\n    if (e.name === props.fontFamily) {\r\n      e.color = \"#12B0EE\";\r\n      selectedFont = e.name;\r\n    } else {\r\n      e.color = null;\r\n    }\r\n  });\r\n\r\n  const [showFont, setFont] = useState(false);\r\n  const showAddFont = () => {\r\n    return setFont(!showFont);\r\n  };\r\n\r\n  const getFontData = (font, url) => {\r\n    return setfontDetail([\r\n      ...fontDetail,\r\n      { fontFamily: font, color: null, src: url },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AddFont\r\n        handleShow={showAddFont}\r\n        show={showFont}\r\n        getFontData={getFontData}\r\n      />\r\n      <EditText\r\n        displayValue={props.displayValue}\r\n        handleText={props.handleText}\r\n        fontStyle={FontStyle}\r\n      />\r\n      <div className={classes.FontPanel}>\r\n        {/* Set Fonts */}\r\n        <div className={classes.Font_Family}>\r\n          {Fonts && (\r\n            <div className={classes.DropDown_Content}>\r\n              {props.fonts &&\r\n                fontDetail.map((font, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className={classes.Font}\r\n                      onClick={() => props.getFont(font.name, font.src)}\r\n                    >\r\n                      <h1 style={{ fontFamily: font.name, color: font.color }}>\r\n                        {font.name}\r\n                      </h1>\r\n                    </div>\r\n                  );\r\n                })}\r\n\r\n              <div className={classes.Font}>\r\n                <h1\r\n                  onClick={() => showAddFont()}\r\n                  style={{ color: \"red\", fontWeight: \"bold\" }}\r\n                >\r\n                  + Add Font\r\n                </h1>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div\r\n            onClick={() => {\r\n              showFonts(!Fonts);\r\n              showFontSize(false);\r\n              showFontStyle(false);\r\n            }}\r\n            style={{ backgroundColor: Fonts ? \"#e7ebf2\" : \"white\" }}\r\n            className={classes.DropDown}\r\n          >\r\n            <h3>\r\n              {selectedFont && selectedFont.length > 7\r\n                ? selectedFont.slice(0, 7) + \"...\"\r\n                : selectedFont}\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Set Font Size */}\r\n        <div className={classes.Font_Size}>\r\n          {FontSize && (\r\n            <div className={classes.DropDown_Content}>\r\n              {fontSize.map((size) => (\r\n                <p\r\n                  key={size}\r\n                  style={{\r\n                    color: props.fontSize === size ? \"#12B0EE\" : \"black\",\r\n                  }}\r\n                  onClick={() => props.getFontSize(size)}\r\n                  className={classes.Size}\r\n                >\r\n                  {size}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <input\r\n            style={{ backgroundColor: FontSize ? \"#e7ebf2\" : \"white\" }}\r\n            defaultValue={props.fontSize}\r\n            type=\"number\"\r\n            className={classes.Dropdown}\r\n            onClick={() => {\r\n              showFonts(false);\r\n              showFontSize(!FontSize);\r\n              showFontStyle(false);\r\n            }}\r\n            onChange={(e) => props.getFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/* Set line height */}\r\n\r\n        {/* Font Style and case arrengeent */}\r\n        <div className={classes.Font_Style}>\r\n          {FontStyle && (\r\n            <div className={classes.DropDown_Content}>\r\n              <h1\r\n                style={{ backgroundColor: props.isBold ? \"#12B0EE\" : null }}\r\n                onClick={() => {\r\n                  props.handleBold(!props.isBold);\r\n                }}\r\n              >\r\n                <b>B</b>\r\n              </h1>\r\n\r\n              <h1\r\n                style={{ backgroundColor: props.isItalic ? \"#12B0EE\" : null }}\r\n                onClick={() => {\r\n                  props.handleItalic(!props.isItalic);\r\n                }}\r\n              >\r\n                <i>i</i>\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor: props.isUnderline ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={() => props.handleUnderline(!props.isUnderline)}\r\n              >\r\n                <u>U</u>\r\n              </h1>\r\n              <div className={classes.Saperator}></div>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"normal\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleNormalize}\r\n              >\r\n                -\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"capitalize\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleCapitalize}\r\n              >\r\n                Aa\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"uppercase\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleUppercase}\r\n              >\r\n                AA\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"smallcase\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleSmallcase}\r\n              >\r\n                aa\r\n              </h1>\r\n            </div>\r\n          )}\r\n          <div\r\n            style={{ backgroundColor: FontStyle ? \"#e7ebf2\" : \"white\" }}\r\n            className={classes.DropDown}\r\n          >\r\n            <h3\r\n              onClick={() => {\r\n                showFonts(false);\r\n                showFontSize(false);\r\n                showFontStyle(!FontStyle);\r\n              }}\r\n            >\r\n              A<span>A</span>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Text alignment */}\r\n        <div className={classes.Font_Align} onClick={props.handleAlignment}>\r\n          <div className={classes.line1}></div>\r\n          <div\r\n            className={classes.line2}\r\n            style={\r\n              props.alignment === \"center\"\r\n                ? { margin: \"auto\" }\r\n                : props.alignment === \"right\"\r\n                ? { marginLeft: \"auto\" }\r\n                : null\r\n            }\r\n          ></div>\r\n          <div\r\n            className={classes.line3}\r\n            style={\r\n              props.alignment === \"center\"\r\n                ? { width: \"16px\" }\r\n                : { width: \"10px !important\" }\r\n            }\r\n          ></div>\r\n        </div>\r\n\r\n        {/* Line_Height */}\r\n        <div className={classes.Line_Height}>\r\n          <input\r\n            style={{ backgroundColor: FontSize ? \"#e7ebf2\" : \"white\" }}\r\n            defaultValue={props.lineHeight}\r\n            type=\"number\"\r\n            className={classes.Dropdown}\r\n            onClick={() => {\r\n              showFonts(false);\r\n              showFontSize(false);\r\n              showFontStyle(false);\r\n            }}\r\n            onChange={(e) => props.handleLineHeight(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/* Text Color */}\r\n        <div className={classes.Font_Color}>\r\n          <div\r\n            className={classes.Color}\r\n            style={{ backgroundColor: props.fontColor }}\r\n          >\r\n            <input\r\n              type=\"color\"\r\n              onInput={(e) => props.getFontColor(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Letter Spacing */}\r\n        <div className={classes.Line_Height}>\r\n          <input\r\n            style={{ backgroundColor: FontSize ? \"#e7ebf2\" : \"white\" }}\r\n            defaultValue={props.letterSpacing}\r\n            type=\"number\"\r\n            className={classes.Dropdown}\r\n            onClick={() => {\r\n              showFonts(false);\r\n              showFontSize(false);\r\n              showFontStyle(false);\r\n            }}\r\n            onChange={(e) => props.handleLetterSpacing(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    fonts: state.font.fonts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(FontPanel);\r\n","export default __webpack_public_path__ + \"static/media/horizontal-symmetry.83e1bdb9.svg\";","import classes from \"./GeneralPanel.module.css\";\r\nimport flip from \"../../../../assets/icons/horizontal-symmetry.svg\";\r\n\r\nconst GeneralPanel = (props) => {\r\n  return (\r\n    <div className={classes.Container}>\r\n      <div className={classes.GeneralPanel}>\r\n        <div className={classes.Spacing} onClick={props.handleFlip}>\r\n          <div className={classes.Parent}>\r\n            <img src={flip} alt=\"Flip\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralPanel;\r\n","import Konva from \"konva\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Stage, Layer, Image } from \"react-konva\";\r\nimport * as actions from \"../../../../Store/actions/index\";\r\nimport ImageElement from \"../../../Elements/ImageElement\";\r\nimport TextElement from \"../../../Elements/TextElement\";\r\nimport Header from \"../../../../Components/Canvas/Header/Header\";\r\nimport FontPanel from \"../../Components/FontPanel/FontPanel\";\r\nimport TransformerComponent from \"../../../../Components/Canvas/TransformerComponent/TransformerComponent\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RectElement from \"../../../Elements/RectElement\";\r\nimport PathElement from \"../../../Elements/PathElement\";\r\nimport CircleElement from \"../../../Elements/CircleElement\";\r\nimport classes from \"./Canvas.module.css\";\r\nimport { saveTemplate } from \"../../../../api/Template/index\";\r\nimport GeneralPanel from \"../../Components/GeneralPanel/GeneralPanel\";\r\nimport Button from \"../../../../Components/Canvas/Button/Button\";\r\n\r\nconst Canvas = (props) => {\r\n  // Refs\r\n  const stageRef = useRef();\r\n\r\n  const [canvas, setCanvas] = useState({\r\n    canvasWidth: null,\r\n    canvasHeight: null,\r\n    canvasScaleX: null,\r\n    canvasScaleY: null,\r\n  });\r\n\r\n  const [reload, setReload] = useState(false);\r\n\r\n  const { canvasWidth, canvasHeight } = canvas;\r\n  const [element, setElement] = useState(null);\r\n  const [text, setText] = useState(null);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [selected, selectShape] = useState(null);\r\n\r\n  const [selectedIndex, selectShapeIndex] = useState(null);\r\n\r\n  const [shapeId, selectedShapeId] = useState(null);\r\n\r\n  const handleStageMouseDown = (e) => {\r\n    // clicked on stage - cler selection\r\n    if (e.target === e.target.getStage()) {\r\n      selectedShapeId(\" \");\r\n      return;\r\n    }\r\n    // clicked on transformer - do nothing\r\n    const clickedOnTransformer =\r\n      e.target.getParent().className === \"Transformer\";\r\n    if (clickedOnTransformer) {\r\n      return;\r\n    }\r\n\r\n    // find clicked rect by its name\r\n    const id = e.target.id();\r\n    // const rect = this.state.rectangles.find(r => r.name === name);\r\n    if (id) {\r\n      selectedShapeId(id);\r\n    } else {\r\n      selectedShapeId(\" \");\r\n    }\r\n  };\r\n\r\n  const [textData, setSelectedTextData] = useState({\r\n    displayValue: null,\r\n    textFont: \"Arial\",\r\n    fontSize: 30,\r\n    fontColor: \"white\",\r\n    fontVariant: \"normal\",\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    alignment: \"left\",\r\n    rotation: 0,\r\n    x: 0,\r\n    y: 0,\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    letterSpacing: 0,\r\n    lineHeight: 1.3,\r\n  });\r\n\r\n  const {\r\n    fontColor,\r\n    displayValue,\r\n    fontVariant,\r\n    bold,\r\n    italic,\r\n    underline,\r\n    alignment,\r\n  } = textData;\r\n\r\n  // const [rectData, setSelectedRectData] = useState({\r\n  //   fill: null,\r\n  //   stroke: null,\r\n  //   strokeWidth: null,\r\n  // });\r\n\r\n  const getSelectedTextData = (e) => {\r\n    if (e.target.className === \"Text\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          setSelectedTextData({\r\n            ...textData,\r\n            displayValue: e.target.text(),\r\n            font: e.target.fontFamily(),\r\n            fontSize: e.target.fontSize(),\r\n            value: e.target.text(),\r\n            color: e.target.fill(),\r\n            bold: data.bold,\r\n            italic: data.italic,\r\n            underline: data.underline,\r\n            fontVariant: data.fontVariant,\r\n            alignment: data.alignment,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n            scaleX: e.target.scaleX(),\r\n            scaleY: e.target.scaleY(),\r\n            rotation: e.target.rotation(),\r\n            id: e.target.id(),\r\n            name: e.target.name(),\r\n            type: \"Text\",\r\n            width: data.width * e.target.scaleX(),\r\n            letterSpacing: e.target.letterSpacing(),\r\n            lineHeight: e.target.lineHeight(),\r\n          });\r\n        }\r\n        return selectShapeIndex(i);\r\n      });\r\n\r\n      let items = [...element];\r\n      // 2. Make a shallow copy of the item you want to mutate\r\n      let item = { ...items[selectedIndex] };\r\n      // 3. Replace the property you're intested in\r\n      item = textData;\r\n      // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n      items[selectedIndex] = item;\r\n      // 5. Set the state to our new copy\r\n      setElement(items);\r\n    }\r\n  };\r\n\r\n  const getSelectedTextPosition = (e) => {\r\n    if (e.target.className === \"Text\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          let items = [...element];\r\n          // 2. Make a shallow copy of the item you want to mutate\r\n          let item = { ...items[i] };\r\n          // 3. Replace the property you're intested in\r\n          item.x = e.target.x();\r\n          item.y = e.target.y();\r\n          item.width = item.width * e.target.scaleX();\r\n          item.rotation = e.target.rotation();\r\n          item.scaleY = e.target.scaleY();\r\n          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n          items[i] = item;\r\n          // 5. Set the state to our new copy\r\n          setElement(items);\r\n        }\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSelectedRectData = (e) => {\r\n    if (e.target.className === \"Rect\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          let items = [...element];\r\n          // 2. Make a shallow copy of the item you want to mutate\r\n          let item = { ...items[i] };\r\n          // 3. Replace the property you're intested in\r\n          item.x = e.target.x();\r\n          item.y = e.target.y();\r\n          item.scaleX = e.target.scaleX();\r\n          item.scaleY = e.target.scaleY();\r\n          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n          items[i] = item;\r\n          // 5. Set the state to our new copy\r\n          setElement(items);\r\n        }\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSelectedImgData = (e) => {\r\n    if (e.target.className === \"Image\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          let items = [...element];\r\n          // 2. Make a shallow copy of the item you want to mutate\r\n          let item = { ...items[i] };\r\n          // 3. Replace the property you're intested in\r\n          item.x = e.target.x();\r\n          item.y = e.target.y();\r\n          item.scaleX = e.target.scaleX();\r\n          item.rotation = e.target.rotation();\r\n          item.scaleY = e.target.scaleY();\r\n          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n          items[i] = item;\r\n          // 5. Set the state to our new copy\r\n          setElement(items);\r\n        }\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSelectedPathData = (e) => {\r\n    if (e.target.className === \"Path\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          let items = [...element];\r\n          // 2. Make a shallow copy of the item you want to mutate\r\n          let item = { ...items[i] };\r\n          // 3. Replace the property you're intested in\r\n          item.x = e.target.x();\r\n          item.y = e.target.y();\r\n          item.scaleX = e.target.scaleX();\r\n          item.scaleY = e.target.scaleY();\r\n          item.rotation = e.target.rotation();\r\n          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n          items[i] = item;\r\n          // 5. Set the state to our new copy\r\n          setElement(items);\r\n        }\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSelectedCircleData = (e) => {\r\n    if (e.target.className === \"Circle\") {\r\n      element.filter((data, i) => {\r\n        if (data.id === e.target.id()) {\r\n          let items = [...element];\r\n          // 2. Make a shallow copy of the item you want to mutate\r\n          let item = { ...items[i] };\r\n          // 3. Replace the property you're intested in\r\n          item.x = e.target.x();\r\n          item.y = e.target.y();\r\n          item.scaleX = e.target.scaleX();\r\n          item.scaleY = e.target.scaleY();\r\n          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n          items[i] = item;\r\n          // 5. Set the state to our new copy\r\n          setElement(items);\r\n        }\r\n\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getFont = (value, url) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.font = value;\r\n\r\n        window.WebFont.load({\r\n          google: {\r\n            families: [value],\r\n          },\r\n        });\r\n\r\n        setReload(!reload);\r\n\r\n        // setSelectedTextData({ ...textData, textFont: e.font });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const getFontSize = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.fontSize = value;\r\n      }\r\n      setReload(!reload);\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const getFontColor = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.color = value;\r\n      }\r\n      setReload(!reload);\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleUppercase = () => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.toUpperCase();\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"uppercase\",\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleSmallcase = () => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.toLowerCase();\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"smallcase\",\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleCapitalize = () => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.replace(\r\n          /(?:^|\\s|[\"'([{])+\\S/g,\r\n          (match) => match.toUpperCase()\r\n        );\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"capitalize\",\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleNormalize = () => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.value;\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"normal\",\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleBold = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.bold = value;\r\n        return setSelectedTextData({ ...textData, bold: e.bold });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleUnderline = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.underline = value;\r\n        return setSelectedTextData({ ...textData, underline: e.underline });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleItalic = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.italic = value;\r\n        return setSelectedTextData({ ...textData, italic: e.italic });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleLineHeight = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.lineHeight = Number(value) || 1;\r\n        return setSelectedTextData({ ...textData, lineHeight: value });\r\n      }\r\n      setReload(!reload);\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleLetterSpacing = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.letterSpacing = Number(value) || 1;\r\n        return setSelectedTextData({ ...textData, letterSpacing: value });\r\n      }\r\n      setReload(!reload);\r\n      return e;\r\n    });\r\n  };\r\n\r\n  let textAlignment = [\"left\", \"center\", \"right\"];\r\n\r\n  const handleAlignment = () => {\r\n    return setCount(count + 1);\r\n  };\r\n\r\n  const handleText = (value) => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = value;\r\n        e.value = value;\r\n        return setSelectedTextData({ ...textData, displayValue: value });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  // Handling Flip\r\n  const handleFlip = () => {\r\n    element.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.scaleX = -e.scaleX;\r\n      }\r\n      setReload(!reload);\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const [transformerObject, getObject] = useState(null);\r\n\r\n  const getActiveAnchor = (value) => {\r\n    return getObject(value);\r\n  };\r\n\r\n  const handleDeleteElement = () => {\r\n    const el = element.filter((result) => result.id !== shapeId);\r\n    setElement(el);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (count === 3) {\r\n      return setCount(0);\r\n    }\r\n    if (text) {\r\n      element.filter((e) => {\r\n        if (e.id === shapeId) {\r\n          e.alignment = textAlignment[count];\r\n          setSelectedTextData({ ...textData, alignment: e.alignment });\r\n        }\r\n      });\r\n    }\r\n  }, [count]);\r\n\r\n  useEffect(() => {\r\n    props.fetchData(props.match.params.templateId);\r\n    props.fetchFonts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.fonts) {\r\n      var head = document.getElementsByTagName(\"head\")[0];\r\n\r\n      props.fonts.forEach((font) => {\r\n        let style = document.createElement(\"link\");\r\n        style.href = font.path;\r\n        style.type = \"text/css\";\r\n        style.rel = \"stylesheet\";\r\n        head.append(style);\r\n      });\r\n    }\r\n  }, [props.fonts]);\r\n\r\n  useEffect(() => {\r\n    let texts = [];\r\n\r\n    if (props.canvas) {\r\n      setCanvas({\r\n        ...canvas,\r\n        canvasWidth: props.canvas.property.canvasWidth,\r\n        canvasHeight: props.canvas.property.canvasHeight,\r\n      });\r\n\r\n      setElement(props.canvas.elements);\r\n\r\n      props.canvas.elements.filter((e, i) => {\r\n        if (e.type === \"Text\") {\r\n          texts.push(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    setText(texts);\r\n    // props.getPhotos(photos);\r\n  }, [props.canvas]);\r\n\r\n  const containerRef = useRef();\r\n\r\n  let containerWidth = null;\r\n\r\n  let scale = null;\r\n\r\n  if (containerRef.current) {\r\n    containerWidth = containerRef.current.offsetWidth;\r\n    scale = containerWidth / canvasWidth;\r\n  }\r\n\r\n  const saveToDatabase = () => {\r\n    let merged = [...element];\r\n\r\n    const data = { elements: merged, property: props.canvas.property };\r\n\r\n    saveTemplate(props.match.params.templateId, data)\r\n      .then((data) => {\r\n        window.location.href = `/template/success/${data.id}`;\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const [previewPhoto, setPreviewPhoto] = useState(null);\r\n\r\n  const [previewPhotoVisible, setPreviewPhotoVisible] = useState(false);\r\n\r\n  const loadImage = () => {\r\n    let image = new window.Image();\r\n    image.src = props.canvas.property.thumbnail.png;\r\n    image.crossOrigin = \"anonymous\";\r\n\r\n    image.addEventListener(\"load\", () => {\r\n      setPreviewPhoto(image);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.canvas && !previewPhoto) {\r\n      loadImage();\r\n    }\r\n  }, [props.canvas, previewPhoto]);\r\n\r\n  useEffect(() => {\r\n    const previewImg = stageRef.current.findOne(\r\n      (node) => node.id() === `previewImg`\r\n    );\r\n\r\n    if (previewPhoto) {\r\n      previewImg.cache();\r\n      // since this update is not handled by \"react-konva\" and we are using Konva methods directly\r\n      // we have to redraw layer manually\r\n\r\n      previewImg.getLayer().batchDraw();\r\n    }\r\n  }, [previewPhoto]);\r\n\r\n  useEffect(() => {\r\n    let layer = stageRef.current.findOne((node) => node.id() === \"layer\");\r\n\r\n    layer.batchDraw();\r\n  }, [reload]);\r\n\r\n  const array_move = (arr, old_index, new_index) => {\r\n    if (new_index >= arr.length) {\r\n      let k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        return element;\r\n      }\r\n    }\r\n    if (new_index < 0) {\r\n      return element;\r\n    }\r\n\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    setElement(arr);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.canvas_container}>\r\n      <Helmet>\r\n        <title>Edit Post</title>\r\n      </Helmet>\r\n      <Header\r\n        goBack={() => props.history.goBack()}\r\n        saveToDataBase={saveToDatabase}\r\n        moveUp={() => {\r\n          let layer = stageRef.current.findOne((node) => node.id() === \"layer\");\r\n\r\n          const old_index = element.findIndex((e) => e.id === shapeId);\r\n\r\n          array_move(element, old_index, old_index + 1);\r\n          setReload(!reload);\r\n          layer.batchDraw();\r\n        }}\r\n        moveDown={() => {\r\n          let layer = stageRef.current.findOne((node) => node.id() === \"layer\");\r\n\r\n          const old_index = element.findIndex((e) => e.id === shapeId);\r\n\r\n          array_move(element, old_index, old_index - 1);\r\n          setReload(!reload);\r\n\r\n          layer.batchDraw();\r\n        }}\r\n      />\r\n      <div ref={containerRef}>\r\n        <Stage\r\n          ref={stageRef}\r\n          width={Number(canvasWidth * scale)}\r\n          height={Number(canvasHeight * scale)}\r\n          style={{ backgroundColor: \"white\" }}\r\n          scaleX={Number(scale)}\r\n          scaleY={Number(scale)}\r\n          onTap={(e) => {\r\n            selectShape(e.target.className);\r\n            console.log(e.target);\r\n            getSelectedTextData(e);\r\n            getSelectedTextPosition(e);\r\n            // getSelectedRectData(e);\r\n          }}\r\n          onClick={(e) => {\r\n            selectShape(e.target.className);\r\n            selectedShapeId(e.target.id);\r\n            getSelectedTextData(e);\r\n          }}\r\n          onMouseDown={(e) => handleStageMouseDown(e)}\r\n          onTouchStart={(e) => handleStageMouseDown(e)}\r\n        >\r\n          <Layer id=\"layer\">\r\n            {element &&\r\n              element.map((e, i) => {\r\n                if (e.type === \"Text\") {\r\n                  return (\r\n                    <TextElement\r\n                      key={e.id}\r\n                      x={e.x}\r\n                      y={e.y}\r\n                      width={e.width}\r\n                      height={e.height}\r\n                      scaleX={e.scaleX}\r\n                      text={e.displayValue}\r\n                      id={e.id}\r\n                      font={e.font}\r\n                      fontSize={e.fontSize}\r\n                      color={e.color}\r\n                      alignment={e.alignment}\r\n                      bold={e.bold}\r\n                      italic={e.italic}\r\n                      underline={e.underline}\r\n                      rotation={e.rotation}\r\n                      name={e.name}\r\n                      textAlignment={e.alignment}\r\n                      getFontSize={getFontSize}\r\n                      transformer={transformerObject}\r\n                      updateProperty={getSelectedTextPosition}\r\n                      letterSpacing={e.letterSpacing || 0}\r\n                      lineHeight={e.lineHeight}\r\n                    />\r\n                  );\r\n                }\r\n                if (e.type === \"Path\") {\r\n                  return (\r\n                    <PathElement\r\n                      key={e.id}\r\n                      x={e.x}\r\n                      y={e.y}\r\n                      fill={e.fill}\r\n                      scaleX={e.scaleX}\r\n                      scaleY={e.scaleY}\r\n                      d={e.d}\r\n                      id={e.id}\r\n                      name={e.name}\r\n                      rotation={e.rotation}\r\n                      transformer={transformerObject}\r\n                      updateProperty={getSelectedPathData}\r\n                    />\r\n                  );\r\n                }\r\n                if (e.type === \"Image\") {\r\n                  return (\r\n                    <ImageElement\r\n                      key={e.id}\r\n                      x={e.x}\r\n                      y={e.y}\r\n                      width={e.width}\r\n                      height={e.height}\r\n                      img={e.src}\r\n                      id={e.id}\r\n                      name={e.name}\r\n                      scaleX={e.scaleX}\r\n                      scaleY={e.scaleY}\r\n                      zIndex={e.zIndex}\r\n                      rotation={e.rotation}\r\n                      updateProperty={getSelectedImgData}\r\n                    />\r\n                  );\r\n                }\r\n                if (e.type === \"Rect\") {\r\n                  return (\r\n                    <RectElement\r\n                      key={e.id}\r\n                      id={e.id}\r\n                      x={e.x}\r\n                      y={e.y}\r\n                      width={e.width}\r\n                      height={e.height}\r\n                      fill={e.fill !== \"none\" ? e.fill : \"transparent\"}\r\n                      stroke={e.stroke}\r\n                      strokeWidth={e.strokeWidth}\r\n                      scaleX={e.scaleX}\r\n                      rotation={e.rotation}\r\n                      scaleY={e.scaleY}\r\n                      updateProperty={getSelectedRectData}\r\n                      zIndex={e.zIndex}\r\n                    />\r\n                  );\r\n                }\r\n                if (e.type === \"Circle\") {\r\n                  return (\r\n                    <CircleElement\r\n                      key={e.id}\r\n                      x={e.cx}\r\n                      y={e.cy}\r\n                      radius={e.r}\r\n                      scaleX={e.scaleX}\r\n                      scaleY={e.scaleY}\r\n                      id={e.id}\r\n                      name={e.name}\r\n                      rotation={e.rotation}\r\n                      strokeWidth={e[\"stroke-width\"] || 0}\r\n                      stroke={e.stroke}\r\n                      transformer={transformerObject}\r\n                      fill={e.fill !== \"none\" && e.fill}\r\n                      updateProperty={getSelectedCircleData}\r\n                    />\r\n                  );\r\n                }\r\n                return e;\r\n              })}\r\n\r\n            <Image\r\n              id={\"previewImg\"}\r\n              image={previewPhoto}\r\n              x={props.canvas && 0 - props.canvas.property.x}\r\n              y={props.canvas && 0 - props.canvas.property.y}\r\n              width={props.canvas && props.canvas.property.width}\r\n              height={props.canvas && props.canvas.property.height}\r\n              opacity={0.5}\r\n              filters={[Konva.Filters.Grayscale]}\r\n              listening={false}\r\n              visible={previewPhotoVisible}\r\n            />\r\n\r\n            <TransformerComponent\r\n              selectedShapeName={shapeId}\r\n              anchorName={getActiveAnchor}\r\n            />\r\n          </Layer>\r\n        </Stage>\r\n\r\n        <div\r\n          className={classes.Toggle_Preview}\r\n          onClick={() => setPreviewPhotoVisible(!previewPhotoVisible)}\r\n        >\r\n          <p>Show Design Preview</p>\r\n        </div>\r\n\r\n        {shapeId && (\r\n          <Button\r\n            undo={false}\r\n            redo={false}\r\n            copy={false}\r\n            handleDeleteElement={handleDeleteElement}\r\n          />\r\n        )}\r\n\r\n        {selected === \"Text\" && (\r\n          <FontPanel\r\n            getFont={getFont}\r\n            fontFamily={\r\n              element.find((e) => e.id === shapeId) &&\r\n              (element.find((e) => e.id === shapeId).font || \"Arial\")\r\n            }\r\n            getFontSize={getFontSize}\r\n            fontSize={\r\n              element.find((e) => e.id === shapeId) &&\r\n              (element.find((e) => e.id === shapeId).fontSize || 16)\r\n            }\r\n            getFontColor={getFontColor}\r\n            fontColor={fontColor}\r\n            handleUppercase={handleUppercase}\r\n            handleSmallcase={handleSmallcase}\r\n            handleCapitalize={handleCapitalize}\r\n            handleNormalize={handleNormalize}\r\n            fontVariant={fontVariant}\r\n            handleItalic={handleItalic}\r\n            handleBold={handleBold}\r\n            handleUnderline={handleUnderline}\r\n            isBold={bold}\r\n            isItalic={italic}\r\n            isUnderline={underline}\r\n            handleAlignment={handleAlignment}\r\n            alignment={alignment}\r\n            handleText={handleText}\r\n            displayValue={displayValue}\r\n            lineHeight={\r\n              element.find((e) => e.id === shapeId) &&\r\n              (element.find((e) => e.id === shapeId).lineHeight || 0)\r\n            }\r\n            handleLineHeight={handleLineHeight}\r\n            letterSpacing={\r\n              element.find((e) => e.id === shapeId) &&\r\n              (element.find((e) => e.id === shapeId).letterSpacing || 1)\r\n            }\r\n            handleLetterSpacing={handleLetterSpacing}\r\n          />\r\n        )}\r\n\r\n        {selected !== null && selected !== \"Text\" && (\r\n          <GeneralPanel handleFlip={handleFlip} />\r\n        )}\r\n\r\n        {/* {selected === \"Image\" && <Tools isSelected={selected} />} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    canvas: state.canvas.data,\r\n    fonts: state.font.fonts,\r\n    photo: state.imageHandler.photo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchData: (params) => dispatch(actions.loadTemplate(params)),\r\n    fetchFonts: () => dispatch(actions.fetchFonts()),\r\n    getPhotos: (photos) => dispatch(actions.getPhotos(photos)),\r\n    addPhoto: (data) => dispatch(actions.addPhoto(data)),\r\n    deletePhoto: (id) => dispatch(actions.deletePhoto(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Canvas));\r\n"],"sourceRoot":""}