{"version":3,"file":"static/js/1377.bb2c0d91.chunk.js","mappings":"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","sources":["Contexts/Business/BusinessProvider.tsx","Contexts/Business/SettingsProvider.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { createContext, ReactNode, useContext, useMemo, useState } from \"react\";\n\nimport {\n  BusinessApiType,\n  BusinessDataType,\n  BusinessItemInterface,\n  BusinessProfileInterface,\n} from \"Shared/Interfaces/Business/BusinessProfile\";\nimport BusinessApi from \"Apis/BusinessApi\";\n\nconst BusinessData = createContext<BusinessDataType | undefined>(undefined);\nconst BusinessAPI = createContext<BusinessApiType | undefined>(undefined);\n\nexport const BusinessProvider = ({ children }: { children: ReactNode }) => {\n  const [allBusiness, setAllBusiness] = useState<BusinessItemInterface[]>([]);\n  const [selectedBusiness, setSelectedBusiness] = useState<\n    BusinessProfileInterface | undefined\n  >(undefined);\n\n  const api = useMemo<BusinessApiType>(\n    () => ({\n      getAllUserBusiness: async () => {\n        const res = await BusinessApi.getAllBusiness();\n        if (!res.success && res.message) {\n          return console.log(res.message);\n        }\n        return setAllBusiness(res.payload);\n      },\n      fetchDefaultBusiness: async () => {\n        const res = await BusinessApi.getDefaultBusiness();\n        if (!res.success && res.message) {\n          return console.log(res.message);\n        }\n        return setSelectedBusiness(res.payload);\n      },\n      setAllBusiness,\n      setSelectedBusiness,\n    }),\n    []\n  );\n\n  return (\n    <BusinessData.Provider value={{ allBusiness, selectedBusiness }}>\n      <BusinessAPI.Provider value={api}>{children}</BusinessAPI.Provider>\n    </BusinessData.Provider>\n  );\n};\n\nexport const useBusinessData = () => {\n  const context = useContext(BusinessData);\n\n  // If context is undefined, we know we used RadioGroupItem\n  // outside of our provider so we can throw a more helpful\n  // error!\n  if (context === undefined) {\n    throw Error(\n      \"Item must be used inside of BusinessProvider, otherwise it will not function correctly.\"\n    );\n  }\n\n  // Because of TypeScript's type narrowing, if we make it past\n  // the error the compiler knows that context is always defined\n  // at this point, so we don't need to do any conditional\n  // checking on its values when we use this hook!\n  return context;\n};\n\nexport const useBusinessApi = () => {\n  const context = useContext(BusinessAPI);\n\n  // If context is undefined, we know we used RadioGroupItem\n  // outside of our provider so we can throw a more helpful\n  // error!\n  if (context === undefined) {\n    throw Error(\n      \"Item must be used inside of BusinessProvider, otherwise it will not function correctly.\"\n    );\n  }\n\n  // Because of TypeScript's type narrowing, if we make it past\n  // the error the compiler knows that context is always defined\n  // at this point, so we don't need to do any conditional\n  // checking on its values when we use this hook!\n  return context;\n};\n","import { createContext, ReactNode, useContext, useMemo, useState } from \"react\";\n\nimport {\n  BusinessSettingsApiInterface as BSAType,\n  BusinessSettingsDataInterface as BSDType,\n  LeadDistributionRulesInterface as LDRType,\n  InvitedMemberInterface,\n  LeadDataFieldInterface,\n  TeamMemberInterface,\n  WATemplateDataInterface,\n  WATemplateCategory,\n  WATemplateLanguage,\n  WATemplateType,\n  WATemplateHeaderType,\n  WATemplateButtonType,\n  WATemplateButtonCtaType,\n  IAccounts,\n  ITWUser,\n  ILIUser,\n  ISmPermission,\n} from \"Shared/Interfaces/Business/BusinessSettings\";\nimport { BusinessTimeZoneInterface } from \"Shared/Interfaces/Business/BusinessProfile\";\nimport allowedVerticalsData from \"Constants/Data/allowed-verticals.json\";\nimport countriesData from \"Constants/Data/countries.json\";\nimport timeZonesData from \"Constants/Data/time-zones.json\";\nimport industriesData from \"Constants/Data/industries.json\";\nimport waTemplateCategoryData from \"Constants/Data/wa-template-categories.json\";\nimport waTemplateLanguagesData from \"Constants/Data/languages.json\";\n\nconst SettingsData = createContext<BSDType | undefined>(undefined);\nconst SettingsApi = createContext<BSAType | undefined>(undefined);\n\nexport const SettingsProvider = ({ children }: { children: ReactNode }) => {\n  const countriesList: any[] = countriesData;\n  const [provinces, setProvinces] = useState<any[]>([]);\n  const [showInviteForm, setShowInviteForm] = useState<boolean>(false);\n  const [invitedMembers, setInvitedMembers] = useState<\n    InvitedMemberInterface[]\n  >([]);\n  const [teamMembers, setTeamMembers] = useState<TeamMemberInterface[]>([]);\n  const [teamMembersTotal, setTeamMembersTotal] = useState<\n    number | undefined\n  >();\n  const [invitedMemberFilter, setInvitedMemberFilter] = useState<string>(\"\");\n  const [leadDataFields, setLeadDataFields] = useState<\n    LeadDataFieldInterface[]\n  >([]);\n  const [leadDistributionRules, setLeadDistributionRules] = useState<LDRType[]>(\n    []\n  );\n  const [showLdfForm, setShowLdfForm] = useState<boolean>(false);\n  const [showLdrForm, setShowLdrForm] = useState<boolean>(false);\n  const [editLdfId, setEditLdfId] = useState<number | undefined>();\n  const [totalLdRules, setTotalLdRules] = useState<number>(0);\n  const [ldfFilter, setLdfFilter] = useState<string>(\"\");\n  const [watFilter, setWatFilter] = useState<string>(\"\");\n  const [totalWaTemplates, setTotalWaTemplates] = useState<number>(0);\n  const waTemplateCategories: WATemplateCategory[] = waTemplateCategoryData;\n  const waTemplateLanguages: WATemplateLanguage[] = waTemplateLanguagesData;\n  const waTemplateTypes: WATemplateType[] = [\n    {\n      value: \"text\",\n      label: \"Text only\",\n    },\n    {\n      value: \"media\",\n      label: \"Media & Interactive\",\n    },\n  ];\n  const waTemplateHeaderTypes: WATemplateHeaderType[] = [\n    {\n      name: \"Text\",\n      value: \"TEXT\",\n    },\n    {\n      name: \"Image\",\n      value: \"IMAGE\",\n    },\n    {\n      name: \"Video\",\n      value: \"VIDEO\",\n    },\n    {\n      name: \"Documents\",\n      value: \"DOCUMENT\",\n    },\n  ];\n  const waTemplateButtonTypes: WATemplateButtonType[] = [\n    {\n      name: \"CALL_TO_ACTION\",\n      label: \"Call to Action\",\n    },\n    {\n      name: \"QUICK_REPLY\",\n      label: \"Quick Reply\",\n    },\n  ];\n  const waTemplateButtonCtaTypes: WATemplateButtonCtaType[] = [\n    {\n      name: \"URL\",\n      value: \"URL\",\n    },\n    {\n      name: \"Phone Number\",\n      value: \"PHONE_NUMBER\",\n    },\n  ];\n  const [waTemplatesData, setWaTemplatesData] = useState<\n    WATemplateDataInterface[]\n  >([]);\n  const [editWaTemplateId, setEditWaTemplateId] = useState<\n    number | undefined\n  >();\n  const [previewWaTemplateId, setPreviewWaTemplateId] = useState<\n    number | undefined\n  >();\n  const [showWaTemplateForm, setShowWaTemplateForm] = useState<boolean>(false);\n  const [previewWaTemplateData, setPreviewWaTemplateData] = useState<\n    any | null\n  >(null);\n  const [showWaPreviewForm, setShowWaPreviewForm] = useState<boolean>(false);\n  const [showWaTemplatePreview, setShowWaTemplatePreview] =\n    useState<boolean>(false);\n  const [connectedAccounts, setConnectedAccounts] = useState<IAccounts[]>([]);\n  const [unconnectedAccounts, setUnconnectedAccounts] = useState<string[]>([]);\n  const [TWUser, setTWUser] = useState<ITWUser | null>(null);\n  const [LIUser, setLIUser] = useState<ILIUser | null>(null);\n  const [platform, setPlatform] = useState<string | null>(null);\n  const [permissions, setPermissions] = useState<ISmPermission>({\n    show: false,\n    provider: \"\",\n  });\n  const industryList: string[] = industriesData;\n  const allowedVerticals: { label: string; value: string }[] =\n    allowedVerticalsData;\n  const timeZoneList: BusinessTimeZoneInterface[] = timeZonesData;\n  const api = useMemo<BSAType>(\n    () => ({\n      setProvinces,\n      setInvitedMembers,\n      setTeamMembers,\n      setTeamMembersTotal,\n      setShowInviteForm,\n      setInvitedMemberFilter,\n      setLeadDataFields,\n      setLdfFilter,\n      setShowLdfForm,\n      setEditLdfId,\n      setLeadDistributionRules,\n      setShowLdrForm,\n      setTotalLdRules,\n      setWatFilter,\n      setTotalWaTemplates,\n      setWaTemplatesData,\n      setEditWaTemplateId,\n      setPreviewWaTemplateId,\n      setShowWaTemplateForm,\n      setPreviewWaTemplateData,\n      setShowWaPreviewForm,\n      setShowWaTemplatePreview,\n      setConnectedAccounts,\n      setUnconnectedAccounts,\n      setTWUser,\n      setLIUser,\n      setPlatform,\n      setPermissions,\n    }),\n    []\n  );\n\n  return (\n    <SettingsApi.Provider value={api}>\n      <SettingsData.Provider\n        value={{\n          allowedVerticals,\n          timeZoneList,\n          industryList,\n          countriesList,\n          provinces,\n          invitedMembers,\n          teamMembers,\n          teamMembersTotal,\n          invitedMemberFilter,\n          showInviteForm,\n          leadDataFields,\n          ldfFilter,\n          showLdfForm,\n          editLdfId,\n          leadDistributionRules,\n          showLdrForm,\n          totalLdRules,\n          watFilter,\n          totalWaTemplates,\n          waTemplateCategories,\n          waTemplateLanguages,\n          waTemplateTypes,\n          waTemplateHeaderTypes,\n          waTemplateButtonTypes,\n          waTemplatesData,\n          editWaTemplateId,\n          previewWaTemplateId,\n          showWaTemplateForm,\n          previewWaTemplateData,\n          showWaPreviewForm,\n          showWaTemplatePreview,\n          waTemplateButtonCtaTypes,\n          connectedAccounts,\n          unconnectedAccounts,\n          TWUser,\n          LIUser,\n          platform,\n          permissions,\n        }}\n      >\n        {children}\n      </SettingsData.Provider>\n    </SettingsApi.Provider>\n  );\n};\n\nexport const useSettingsData = () => {\n  const context = useContext(SettingsData);\n  if (context === undefined) {\n    throw Error(\n      \"Item must be used inside of SettingsProvider, otherwise it will not function correctly.\"\n    );\n  }\n  return context;\n};\n\nexport const useSettingsApi = () => {\n  const context = useContext(SettingsApi);\n  if (context === undefined) {\n    throw Error(\n      \"Item must be used inside of SettingsProvider, otherwise it will not function correctly.\"\n    );\n  }\n  return context;\n};\n"],"names":["BusinessData","createContext","undefined","BusinessAPI","BusinessProvider","children","useState","allBusiness","setAllBusiness","selectedBusiness","setSelectedBusiness","api","useMemo","getAllUserBusiness","BusinessApi","res","success","message","console","log","payload","fetchDefaultBusiness","Provider","value","useBusinessData","context","useContext","Error","useBusinessApi","SettingsData","SettingsApi","SettingsProvider","countriesList","countriesData","provinces","setProvinces","showInviteForm","setShowInviteForm","invitedMembers","setInvitedMembers","teamMembers","setTeamMembers","teamMembersTotal","setTeamMembersTotal","invitedMemberFilter","setInvitedMemberFilter","leadDataFields","setLeadDataFields","leadDistributionRules","setLeadDistributionRules","showLdfForm","setShowLdfForm","showLdrForm","setShowLdrForm","editLdfId","setEditLdfId","totalLdRules","setTotalLdRules","ldfFilter","setLdfFilter","watFilter","setWatFilter","totalWaTemplates","setTotalWaTemplates","waTemplateCategories","waTemplateCategoryData","waTemplateLanguages","waTemplateLanguagesData","waTemplatesData","setWaTemplatesData","editWaTemplateId","setEditWaTemplateId","previewWaTemplateId","setPreviewWaTemplateId","showWaTemplateForm","setShowWaTemplateForm","previewWaTemplateData","setPreviewWaTemplateData","showWaPreviewForm","setShowWaPreviewForm","showWaTemplatePreview","setShowWaTemplatePreview","connectedAccounts","setConnectedAccounts","unconnectedAccounts","setUnconnectedAccounts","TWUser","setTWUser","LIUser","setLIUser","platform","setPlatform","show","provider","permissions","setPermissions","industryList","industriesData","allowedVerticals","allowedVerticalsData","timeZoneList","timeZonesData","waTemplateTypes","label","waTemplateHeaderTypes","name","waTemplateButtonTypes","waTemplateButtonCtaTypes","useSettingsData","useSettingsApi"],"sourceRoot":""}