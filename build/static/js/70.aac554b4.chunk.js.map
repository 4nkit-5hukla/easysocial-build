{"version":3,"sources":["Container/Elements/ImageElement.js","Container/Elements/TextElement.js","Components/Canvas/Header/Header.module.css","Components/Canvas/TransformerComponent/TransformerComponent.js","Components/Canvas/Button/Button.js","Components/Canvas/Button/Button.module.css","Container/Elements/RectElement.js","Container/Elements/PathElement.js","Container/Elements/CircleElement.js","assets/icons/up-arrow.svg","Components/Canvas/Header/Header.js","Components/FontPanel/FontPanel.module.css","Components/FontPanel/EditText/EditText.module.css","Components/Canvas/RectPanel/RectPanel.module.css","Components/FontPanel/EditText/EditText.js","Components/FontPanel/FontPanel.js","Components/Canvas/RectPanel/RectPanel.js","Container/Canvas/Canvas.js"],"names":["ImageElement","props","useState","photo","setPhoto","useEffect","img","image","window","Image","src","crossOrigin","addEventListener","loadImage","Fragment","id","name","x","y","width","height","onDragMove","e","updateProperty","onTransformEnd","draggable","scaleX","scaleY","TextElement","lineHeight","parseInt","text","textDecoration","underline","fontFamily","font","fontSize","fill","color","fontStyle","bold","italic","align","textAlignment","onTransform","node","target","gp","setAttrs","active","map","transformer","getActiveAnchor","checkActiveAnchor","getFontSize","rotation","letterSpacing","Number","module","exports","TransformerComponent","this","checkNode","stage","getStage","selectedShapeName","selectedNode","findOne","nodes","className","enabledAnchors","anchorName","detach","getLayer","batchDraw","ref","React","Component","Button","classes","Button_Container","undo","Undo_Button","onClick","handleCropStart","viewBox","xmlns","d","redo","Redo_Button","copy","Copy_Button","handleCopyElement","Delete_Button","handleDeleteElement","RectElement","stroke","strokeWidth","PathElement","data","CircleElement","radius","Header","deselect","LeftArrow","goBack","strokeLinecap","strokeLinejoin","Header_Text","Title","Sub","IndexBtn","IndexUp","moveUp","upArrow","alt","IndexDown","moveDown","Next","href","saveToDataBase","EditText","textareaRef","useRef","show","setShow","BackDrop","style","marginBottom","TextPopup","defaultValue","displayValue","Textarea","cols","rows","Btn","ApplyBtn","handleText","current","value","CancelBtn","connect","state","fonts","Fonts","showFonts","FontSize","showFontSize","FontStyle","showFontStyle","fontDetail","setfontDetail","selectedFont","index","Object","values","push","filter","FontPanel","Font_Family","DropDown_Content","Font","getFont","backgroundColor","DropDown","length","slice","Font_Size","size","Size","type","Dropdown","onChange","Font_Style","isBold","handleBold","isItalic","handleItalic","isUnderline","handleUnderline","Saperator","fontVariant","handleNormalize","handleCapitalize","handleUppercase","handleSmallcase","Font_Align","handleAlignment","line1","line2","alignment","margin","marginLeft","line3","Font_Spacing","Parent","Line","Rect","Font_Color","Color","fontColor","onInput","getFontColor","RectPanel","borderSize","i","stroke_Dropdown","showStroke_Dropdown","Container","Fill","handleFill","StrokeWidth","handleStrokeWidth","Line1","Line2","Line3","Stroke","handleStroke","canvas","imageHandler","dispatch","fetchData","params","actions","fetchFonts","getPhotos","photos","addPhoto","deletePhoto","withRouter","stageRef","canvasWidth","canvasHeight","canvasScaleX","canvasScaleY","setCanvas","setText","rect","setRect","path","setPath","circle","setCircle","count","setCount","selected","selectShape","shapeId","selectedShapeId","handleStageMouseDown","getParent","textFont","textData","setSelectedTextData","rectData","setSelectedRectData","cropScaleX","cropScaleY","cropX","cropY","cropStart","cropDetail","setCropDetail","transformerObject","getObject","match","templateId","texts","rects","property","elements","containerRef","scale","offsetWidth","Helmet","onTap","console","log","getSelectedTextData","getSelectedRectData","onMouseDown","onTouchStart","cx","cy","r","prevState","Date","now","attrs","result","toUpperCase","toLowerCase","replace"],"mappings":"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","file":"static/js/70.aac554b4.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Image } from \"react-konva\";\r\n\r\nconst ImageElement = (props) => {\r\n  const [photo, setPhoto] = useState(null);\r\n\r\n  // const [cropDetail] = useState({\r\n  //   cropScaleX: null,\r\n  //   cropScaleY: null,\r\n  //   cropX: null,\r\n  //   cropY: null,\r\n  //   cropStart: false,\r\n  // });\r\n\r\n  // const { cropScaleX, cropScaleY, cropX, cropY, cropStart } = cropDetail;\r\n\r\n  const loadImage = () => {\r\n    let image = new window.Image();\r\n    image.src = props.img;\r\n    image.crossOrigin = \"anonymous\";\r\n\r\n    image.addEventListener(\"load\", () => {\r\n      setPhoto(image);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.img && !photo) {\r\n      loadImage();\r\n    }\r\n  }, [props.img, photo]);\r\n\r\n  // const getPosRect = (pos, ele) => {\r\n  //   let cliPos = ele.getClientRect();\r\n  //   let posRect = {\r\n  //     left: pos.x,\r\n  //     top: pos.y,\r\n  //     right: pos.x + props.width,\r\n  //     bottom: pos.y + props.height,\r\n  //     width: props.width,\r\n  //     height: props.height,\r\n  //   };\r\n  //   return posRect;\r\n  // };\r\n  // set the bounds rect to the size of the given element\r\n  // const setBoundRect = (ele) => {\r\n  //   let x = ele.position();\r\n  //   let posRect = getPosRect(ele.position(), ele);\r\n  //   const stageRef = props.stageRef;\r\n  //   const darkImg = stageRef.findOne(\r\n  //     (node) => node.id() === `darkImg${props.id}`\r\n  //   );\r\n\r\n  //   darkImg.position({ x: posRect.left, y: posRect.top });\r\n  //   darkImg.size({ width: posRect.width, height: posRect.height });\r\n  // };\r\n\r\n  // const darkImg = props.stageRef.findOne(\r\n  //   (node) => node.id() === `darkImg${props.id}`\r\n  // );\r\n\r\n  // const imgRect = props.stageRef.findOne(\r\n  //   (node) => node.id() === `imgRect${props.id}`\r\n  // );\r\n\r\n  // const imgGroup = props.stageRef.findOne(\r\n  //   (node) => node.id() === `imgGroup${props.id}`\r\n  // );\r\n\r\n  // const cropRect = props.stageRef.findOne(\r\n  //   (node) => node.id() === `cropRect${props.id}`\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   const mainImg = props.stageRef.findOne((node) => node.id() === props.id);\r\n\r\n  //   if (photo) {\r\n  //     // you many need to reapply cache on some props changes like shadow, stroke, etc.\r\n  //     mainImg.cache();\r\n  //     // since this update is not handled by \"react-konva\" and we are using Konva methods directly\r\n  //     // we have to redraw layer manually\r\n\r\n  //     mainImg.getLayer().batchDraw();\r\n  //   }\r\n  // }, [photo]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Image\r\n        id={`darkImg${props.id}`}\r\n        image={photo}\r\n        visible={props.cropStart}\r\n        opacity={0.5}\r\n        fill=\"black\"\r\n        strokeWidth={1}\r\n        dash={[3, 3]}\r\n        listening={false}\r\n        width={props.width}\r\n        height={props.height}\r\n        x={props.x}\r\n        y={props.y}\r\n      /> */}\r\n\r\n      {/* <Rect\r\n        visible={!props.cropStart}\r\n        id={`imgRect${props.id}`}\r\n        height={100}\r\n        width={props.width}\r\n        x={props.x}\r\n        y={props.y}\r\n        onTransform={() => {\r\n          imgGroup.setAttrs({\r\n            scaleX: imgRect.scaleX(),\r\n            scaleY: imgRect.scaleY(),\r\n            x: imgRect.x() - imgGroup.clipX() * imgGroup.scaleX(),\r\n            y: imgRect.y() - imgGroup.clipY() * imgGroup.scaleY(),\r\n          });\r\n\r\n          darkImg.setAttrs({\r\n            x: imgGroup.x() + props.x,\r\n            y: imgGroup.y() + props.y,\r\n          });\r\n\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n        }}\r\n        onTransformEnd={() => {\r\n          console.log(imgGroup);\r\n          cropRect.setAttrs({\r\n            x: imgRect.x(),\r\n            y: imgRect.y(),\r\n            width: imgRect.width() * imgRect.scaleX(),\r\n            height: (imgRect.height() * imgRect.scaleY()) / 2,\r\n          });\r\n\r\n          const mainImg = props.stageRef.findOne(\r\n            (node) => node.id() === `${props.id}`\r\n          );\r\n\r\n          \r\n        }}\r\n        onDragMove={() => {\r\n          cropRect.setAttrs({\r\n            x: imgRect.x(),\r\n            y: imgRect.y(),\r\n          });\r\n\r\n          // setCropDetail({ ...cropDetail, cropWidth: cropRect.width() });\r\n          imgGroup.setAttrs({\r\n            x: imgRect.x() - imgGroup.clipX(),\r\n            y: imgRect.y() - imgGroup.clipY(),\r\n          });\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n        }}\r\n        draggable\r\n      /> */}\r\n\r\n      {/* <Group\r\n        id={`imgGroup${props.id}`}\r\n        clip={{\r\n          x: props.x,\r\n          y: props.y,\r\n          width: imgRect ? imgRect.width() : props.width,\r\n          height: imgRect ? imgRect.height() : props.height,\r\n        }}\r\n        // x={imgRect ? imgRect.x() - imgGroup.clipX() * imgGroup.scaleX() : 100}\r\n        // y={imgRect ? imgRect.y() - imgGroup.clipY() * imgGroup.scaleY() : 100}\r\n      > */}\r\n      <Image\r\n        id={props.id}\r\n        name={props.name}\r\n        image={photo}\r\n        x={props.x}\r\n        y={props.y}\r\n        width={props.width}\r\n        height={props.height}\r\n        // onDragMove={(e) => {\r\n        //   const node = e.target;\r\n        //   const stageRef = props.stageRef;\r\n        //   const stage = stageRef.findOne(\r\n        //     (node) => node.id() === `darkImg${props.id}`\r\n        //   );\r\n        //   setBoundRect(node);\r\n        //   // console.log(node.size)\r\n        // }}\r\n        // listening={false}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n        draggable\r\n        scaleX={props.scaleX}\r\n        scaleY={props.scaleY}\r\n      />\r\n      {/* </Group> */}\r\n      {/* <Rect\r\n        visible={props.cropStart}\r\n        fill=\"transparent\"\r\n        id={`cropRect${props.id}`}\r\n        width={props.width}\r\n        height={100}\r\n        x={props.x}\r\n        y={props.y}\r\n        onDragMove={(e) => {\r\n          const node = e.target;\r\n          const imgRect = props.stageRef.findOne(\r\n            (node) => node.id() === `imgRect${props.id}`\r\n          );\r\n          imgRect.setAttrs({\r\n            x: node.x(),\r\n            y: node.y(),\r\n          });\r\n        }}\r\n        onTransform={(e) => {\r\n          const node = e.target;\r\n          const imgRect = props.stageRef.findOne(\r\n            (node) => node.id() === `imgRect${props.id}`\r\n          );\r\n\r\n          node.setAttrs({\r\n            width: node.width() * node.scaleX(),\r\n            height: node.height() * node.scaleY(),\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n          });\r\n\r\n          imgRect.setAttrs({\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: node.scaleX() * node.width(),\r\n            height: node.scaleY() * node.height(),\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n          });\r\n\r\n          imgGroup.setAttrs({\r\n            scaleX: imgRect.scaleX(),\r\n            scaleY: imgRect.scaleY(),\r\n            x: imgRect.x() - imgGroup.clipX() * imgGroup.scaleX(),\r\n            y: imgRect.y() - imgGroup.clipY() * imgGroup.scaleY(),\r\n          });\r\n\r\n          console.log(\"imgRect\", imgRect);\r\n          console.log(\"imgGroup\", imgGroup);\r\n          console.log(\"cropRect\", cropRect);\r\n\r\n          setCropDetail({ ...cropDetail, cropWidth: node.width() });\r\n        }}\r\n        draggable */}\r\n      {/* /> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ImageElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Text } from \"react-konva\";\r\n\r\nconst TextElement = (props) => {\r\n  const checkActiveAnchor = () => {\r\n    const anchors = [\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\"];\r\n\r\n    let active = null;\r\n    anchors.map((e) => {\r\n      if (props.transformer.getActiveAnchor() === e) {\r\n        return (active = e);\r\n      }\r\n\r\n      return;\r\n    });\r\n    return active;\r\n  };\r\n\r\n  return (\r\n    <Text\r\n      width={props.width}\r\n      height={props.height}\r\n      lineHeight={props.lineHeight}\r\n      scaleX={parseInt(props.scaleX)}\r\n      id={props.id}\r\n      x={parseInt(props.x)}\r\n      y={parseInt(props.y)}\r\n      text={props.text}\r\n      textDecoration={props.underline ? \"underline\" : \"\"}\r\n      fontFamily={props.font}\r\n      fontSize={parseInt(props.fontSize)}\r\n      fill={props.color}\r\n      fontStyle={\r\n        props.bold && props.italic\r\n          ? \"bold italic\"\r\n          : props.italic\r\n          ? \"italic\"\r\n          : props.bold\r\n          ? \"bold\"\r\n          : \"normal\"\r\n      }\r\n      name={props.name}\r\n      align={props.textAlignment}\r\n      draggable\r\n      onTransform={(e) => {\r\n        const node = e.target;\r\n\r\n        let scaleX = node.scaleX();\r\n        let scaleY = node.scaleY();\r\n\r\n        let width = node.width();\r\n\r\n        let w = scaleY - 1;\r\n\r\n        let gp = ((w / 1) * 100) / 2;\r\n\r\n        node.setAttrs({\r\n          width: width * scaleX,\r\n          scaleX: 1,\r\n        });\r\n\r\n        if (checkActiveAnchor()) {\r\n          node.setAttrs({\r\n            fontSize: props.fontSize + gp,\r\n          });\r\n        }\r\n\r\n        return props.getFontSize(node.fontSize());\r\n      }}\r\n      onTransformEnd={(e) => props.updateProperty(e)}\r\n      onDragMove={(e) => props.updateProperty(e)}\r\n      rotation={parseInt(props.rotation)}\r\n      letterSpacing={Number(props.letterSpacing)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextElement;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3uB-d\",\"Header_Text\":\"Header_Header_Text__2N2EW\",\"Title\":\"Header_Title__rICwm\",\"Sub\":\"Header_Sub__3t57o\",\"Next\":\"Header_Next__2dwcE\",\"LeftArrow\":\"Header_LeftArrow__2zENS\",\"IndexBtn\":\"Header_IndexBtn__2YUep\",\"IndexDown\":\"Header_IndexDown__2vbL0\"};","/** @format */\r\nimport React from \"react\";\r\nimport { Transformer } from \"react-konva\";\r\n\r\nexport default class TransformerComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.checkNode();\r\n  }\r\n  componentDidUpdate() {\r\n    this.checkNode();\r\n  }\r\n  checkNode() {\r\n    // here we need to manually attach or detach Transformer node\r\n    const stage = this.transformer.getStage();\r\n    const { selectedShapeName } = this.props;\r\n\r\n    const selectedNode = stage.findOne(\r\n      (node) => node.id() === selectedShapeName\r\n    );\r\n    // do nothing if selected node is already attached\r\n    if (selectedNode === this.transformer.node()) {\r\n      return;\r\n    }\r\n\r\n    if (selectedNode) {\r\n      // attach to another node\r\n      this.transformer.nodes([selectedNode]);\r\n      if (selectedNode.className === \"Text\") {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-right\",\r\n          \"middle-right\",\r\n          \"middle-left\",\r\n          \"bottom-left\",\r\n          \"bottom-right\",\r\n        ]);\r\n\r\n        this.props.anchorName(this.transformer);\r\n      } else if (selectedNode.className === \"Image\") {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-center\",\r\n          \"top-right\",\r\n          \"bottom-left\",\r\n          \"bottom-center\",\r\n          \"bottom-right\",\r\n        ]);\r\n      } else {\r\n        this.transformer.enabledAnchors([\r\n          \"top-left\",\r\n          \"top-center\",\r\n          \"top-right\",\r\n          \"middle-right\",\r\n          \"middle-left\",\r\n          \"bottom-left\",\r\n          \"bottom-center\",\r\n          \"bottom-right\",\r\n        ]);\r\n      }\r\n    } else {\r\n      // remove transformer\r\n      this.transformer.detach();\r\n    }\r\n    this.transformer.getLayer().batchDraw();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Transformer\r\n        ref={(node) => {\r\n          this.transformer = node;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div className={classes.Button_Container}>\r\n      {props.undo && (\r\n        <div\r\n          className={classes.Undo_Button}\r\n          onClick={() => props.handleCropStart()}\r\n        >\r\n          <button>\r\n            <svg\r\n              width=\"437\"\r\n              height=\"437\"\r\n              viewBox=\"0 0 437 437\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <g clip-path=\"url(#clip0)\">\r\n                <path\r\n                  d=\"M224 143.573C167.573 143.573 116.16 164.586 76.8 199.04L0 122.24V314.24H192L114.88 237.12C144.427 212.267 182.293 196.907 224 196.907C299.627 196.907 363.627 246.08 386.027 314.24L436.48 297.6C407.147 208.213 323.2 143.573 224 143.573Z\"\r\n                  fill=\"black\"\r\n                />\r\n              </g>\r\n              <defs>\r\n                <clipPath id=\"clip0\">\r\n                  <rect width=\"436.48\" height=\"436.48\" fill=\"white\" />\r\n                </clipPath>\r\n              </defs>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {props.redo && (\r\n        <div className={classes.Redo_Button}>\r\n          <button>\r\n            <svg\r\n              width=\"437\"\r\n              height=\"437\"\r\n              viewBox=\"0 0 437 437\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <g clip-path=\"url(#clip0)\">\r\n                <path\r\n                  d=\"M359.573 199.04C320.32 164.587 268.906 143.573 212.48 143.573C113.28 143.573 29.333 208.213 0 297.6L50.453 314.24C72.853 246.08 136.853 196.907 212.48 196.907C254.187 196.907 292.053 212.267 321.6 237.12L244.48 314.24H436.48V122.24L359.573 199.04Z\"\r\n                  fill=\"black\"\r\n                />\r\n              </g>\r\n              <defs>\r\n                <clipPath id=\"clip0\">\r\n                  <rect width=\"436.48\" height=\"436.48\" fill=\"white\" />\r\n                </clipPath>\r\n              </defs>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {props.copy && (\r\n        <div\r\n          className={classes.Copy_Button}\r\n          onClick={() => props.handleCopyElement()}\r\n        >\r\n          <button>\r\n            <svg\r\n              width=\"512\"\r\n              height=\"512\"\r\n              viewBox=\"0 0 512 512\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M311 512H120C75.8867 512 40 476.113 40 432V161C40 116.887 75.8867 81 120 81H311C355.113 81 391 116.887 391 161V432C391 476.113 355.113 512 311 512ZM120 121C97.9453 121 80 138.945 80 161V432C80 454.055 97.9453 472 120 472H311C333.055 472 351 454.055 351 432V161C351 138.945 333.055 121 311 121H120ZM471 382V80C471 35.8867 435.113 0 391 0H169C157.953 0 149 8.95312 149 20C149 31.0469 157.953 40 169 40H391C413.055 40 431 57.9453 431 80V382C431 393.047 439.953 402 451 402C462.047 402 471 393.047 471 382Z\"\r\n                fill=\"black\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        className={classes.Delete_Button}\r\n        onClick={() => props.handleDeleteElement()}\r\n      >\r\n        <button>\r\n          <svg\r\n            width=\"300\"\r\n            height=\"384\"\r\n            viewBox=\"0 0 300 384\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M22 341.333C22 364.907 41.093 384 64.667 384H235.334C258.907 384 278 364.907 278 341.333V85.333H22V341.333Z\"\r\n              fill=\"black\"\r\n            />\r\n            <path\r\n              d=\"M224.667 21.333L203.333 0H96.667L75.333 21.333H0.666992V64H299.333V21.333H224.667Z\"\r\n              fill=\"black\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button_Container\":\"Button_Button_Container__2l7go\"};","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Rect } from \"react-konva\";\r\n\r\nconst RectElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        id={props.id}\r\n        fill={props.fill}\r\n        stroke={props.stroke}\r\n        strokeWidth={props.strokeWidth}\r\n        x={Number(props.x) ? Number(props.x) : 0}\r\n        y={Number(props.y) ? Number(props.y) : 0}\r\n        width={Number(props.width)}\r\n        height={Number(props.height)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n        draggable\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RectElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Path } from \"react-konva\";\r\n\r\nconst PathElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Path\r\n        id={props.id}\r\n        fill={props.fill}\r\n        x={Number(props.x)}\r\n        y={Number(props.y)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        draggable\r\n        data={props.d}\r\n        name={props.name}\r\n        onDragMove={(e) => {\r\n          // e.target.moveu\r\n          props.updateProperty(e);\r\n        }}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PathElement;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport { Circle } from \"react-konva\";\r\n\r\nconst CircleElement = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Circle\r\n        id={props.id}\r\n        fill={props.fill ? props.fill : null}\r\n        x={Number(props.x)}\r\n        y={Number(props.y)}\r\n        scaleX={Number(props.scaleX)}\r\n        scaleY={Number(props.scaleY)}\r\n        rotation={Number(props.rotation)}\r\n        draggable\r\n        strokeWidth={props.strokeWidth}\r\n        stroke={props.stroke || \"black\"}\r\n        radius={Number(props.radius)}\r\n        name={props.name}\r\n        onDragMove={(e) => props.updateProperty(e)}\r\n        onTransformEnd={(e) => props.updateProperty(e)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CircleElement;\r\n","export default __webpack_public_path__ + \"static/media/up-arrow.212a7457.svg\";","import React from \"react\";\r\nimport classes from \"./Header.module.css\";\r\nimport upArrow from \"../../../assets/icons/up-arrow.svg\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={classes.Header} onClick={props.deselect}>\r\n      <div className={classes.LeftArrow}>\r\n        <svg\r\n          onClick={() => props.goBack()}\r\n          width=\"9\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 9 14\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M8 1L1.8858 6.24074C1.42019 6.63984 1.42019 7.36016 1.8858 7.75926L8 13\"\r\n            stroke=\"white\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"bevel\"\r\n          />\r\n        </svg>\r\n      </div>\r\n\r\n      <div className={classes.Header_Text}>\r\n        <div className={classes.Title}>\r\n          <h1>Edit Post</h1>\r\n        </div>\r\n        <div className={classes.Sub}>\r\n          <p>Edit Post</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.IndexBtn}>\r\n        <div className={classes.IndexUp} onClick={props.moveUp}>\r\n          <img src={upArrow} alt=\"moveUp\" />\r\n        </div>\r\n        <div className={classes.IndexDown} onClick={props.moveDown}>\r\n          <img src={upArrow} alt=\"moveDown\" />\r\n        </div>\r\n      </div>\r\n      {/* <div className={classes.Brighten}>\r\n        <a href=\"#filter\">\r\n          <img src={sun} alt=\"filters\" />\r\n        </a>\r\n      </div> */}\r\n\r\n      <div className={classes.Next}>\r\n        <a href=\"#next\" onClick={props.saveToDataBase}>\r\n          Next\r\n          <svg\r\n            width=\"9\"\r\n            height=\"11\"\r\n            viewBox=\"0 0 9 14\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M8 1L1.8858 6.24074C1.42019 6.63984 1.42019 7.36016 1.8858 7.75926L8 13\"\r\n              stroke=\"white\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"bevel\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FontPanel\":\"FontPanel_FontPanel__2N5tf\",\"Font_Family\":\"FontPanel_Font_Family__sUEhT\",\"DropDown\":\"FontPanel_DropDown__2hS9A\",\"DropDown_Content\":\"FontPanel_DropDown_Content__1km51\",\"Font\":\"FontPanel_Font__1Q69v\",\"Font_Size\":\"FontPanel_Font_Size__7ng_z\",\"Size\":\"FontPanel_Size__2Ww2j\",\"Font_Style\":\"FontPanel_Font_Style__3w6aU\",\"Saperator\":\"FontPanel_Saperator__3t2vV\",\"Font_Align\":\"FontPanel_Font_Align__2K2IJ\",\"line1\":\"FontPanel_line1__30cM0\",\"line2\":\"FontPanel_line2__2rLli\",\"Font_Color\":\"FontPanel_Font_Color__Ek9-2\",\"Color\":\"FontPanel_Color__17TVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"EditText_BackDrop__2QZK6\",\"EditText\":\"EditText_EditText__N2l6F\",\"TextPopup\":\"EditText_TextPopup__2iYo6\",\"Btn\":\"EditText_Btn__1PNjC\",\"ApplyBtn\":\"EditText_ApplyBtn__1amS4\",\"CancelBtn\":\"EditText_CancelBtn__2Y2LL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RectPanel_Container__oIqb6\",\"RectPanel\":\"RectPanel_RectPanel__jK9fL\",\"Color\":\"RectPanel_Color__1o1IM\",\"Fill\":\"RectPanel_Fill__I3bJv\",\"Stroke\":\"RectPanel_Stroke__2uSx3\",\"Spacing\":\"RectPanel_Spacing__1uDiu\",\"Parent\":\"RectPanel_Parent__2rIQ9\",\"Line\":\"RectPanel_Line__2yezL\",\"Rect\":\"RectPanel_Rect__xaBZB\",\"StrokeWidth\":\"RectPanel_StrokeWidth__18Mzo\",\"DropDown_Content\":\"RectPanel_DropDown_Content__sCMh9\"};","import React from \"react\";\r\nimport classes from \"./EditText.module.css\";\r\n\r\nconst EditText = (props) => {\r\n  const textareaRef = React.useRef();\r\n\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {show && <div className={classes.BackDrop}></div>}\r\n      <div\r\n        className={classes.EditText}\r\n        style={{ marginBottom: props.fontStyle ? \"60px\" : \"20px\" }}\r\n        onClick={() => setShow(!show)}\r\n      >\r\n        <h1>Edit</h1>\r\n      </div>\r\n\r\n      {/* Inout popup */}\r\n      {show && (\r\n        <div className={classes.TextPopup}>\r\n          <textarea\r\n            defaultValue={props.displayValue}\r\n            ref={textareaRef}\r\n            className={classes.Textarea}\r\n            name=\"Edit\"\r\n            cols=\"30\"\r\n            rows=\"30\"\r\n          />\r\n          <div className={classes.Btn}>\r\n            <button\r\n              className={classes.ApplyBtn}\r\n              onClick={() => {\r\n                props.handleText(textareaRef.current.value);\r\n                setShow(!show);\r\n              }}\r\n            >\r\n              <p>Save</p>\r\n            </button>\r\n            <button\r\n              className={classes.CancelBtn}\r\n              onClick={() => {\r\n                props.handleText(textareaRef.current.value);\r\n                setShow(!show);\r\n              }}\r\n            >\r\n              <p>Cancel</p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditText;\r\n","/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport classes from \"./FontPanel.module.css\";\r\nimport EditText from \"./EditText/EditText\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst FontPanel = (props) => {\r\n  const [Fonts, showFonts] = React.useState(false);\r\n  const [FontSize, showFontSize] = React.useState(false);\r\n  const [FontStyle, showFontStyle] = React.useState(false);\r\n\r\n  const [fontDetail, setfontDetail] = useState([]);\r\n\r\n  let fontSize = [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96];\r\n  let selectedFont = props.fontFamily;\r\n\r\n  useEffect(() => {\r\n    let fonts = [];\r\n    if (props.fonts) {\r\n      props.fonts.map((font, index) => {\r\n        Object.values(font).map((e) => {\r\n          fonts.push({ name: e.name, color: null });\r\n        });\r\n      });\r\n      setfontDetail(fonts);\r\n    }\r\n  }, [props.fonts]);\r\n\r\n  // eslint-disable-next-line array-callback-return\r\n  fontDetail.filter((e) => {\r\n    if (e.name === props.fontFamily) {\r\n      e.color = \"#12B0EE\";\r\n      selectedFont = e.name;\r\n    } else {\r\n      e.color = null;\r\n    }\r\n  });\r\n\r\n  // const Div2 = styled.div`\r\n  //   width: 16px;\r\n  //   margin: auto;\r\n  //   ${(props) =>\r\n  //     props.alignment !== \"center\" &&\r\n  //     css`\r\n  //       width: 10px;\r\n  //     `}\r\n  // `;\r\n  return (\r\n    <React.Fragment>\r\n      <EditText\r\n        displayValue={props.displayValue}\r\n        handleText={props.handleText}\r\n        fontStyle={FontStyle}\r\n      />\r\n      <div className={classes.FontPanel}>\r\n        {/* Set Fonts */}\r\n        <div className={classes.Font_Family}>\r\n          {Fonts && (\r\n            <div className={classes.DropDown_Content}>\r\n              {props.fonts &&\r\n                fontDetail.map((font, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className={classes.Font}\r\n                      onClick={() => props.getFont(font.name)}\r\n                    >\r\n                      <h1 style={{ fontFamily: font.name, color: font.color }}>\r\n                        {font.name}\r\n                      </h1>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          )}\r\n          <div\r\n            onClick={() => {\r\n              showFonts(!Fonts);\r\n              showFontSize(false);\r\n              showFontStyle(false);\r\n            }}\r\n            style={{ backgroundColor: Fonts ? \"#e7ebf2\" : \"white\" }}\r\n            className={classes.DropDown}\r\n          >\r\n            <h3>\r\n              {selectedFont.length > 7\r\n                ? selectedFont.slice(0, 7) + \"...\"\r\n                : selectedFont}\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Set Font Size */}\r\n        <div className={classes.Font_Size}>\r\n          {FontSize && (\r\n            <div className={classes.DropDown_Content}>\r\n              {fontSize.map((size) => (\r\n                <p\r\n                  key={size}\r\n                  style={{\r\n                    color: props.fontSize === size ? \"#12B0EE\" : \"black\",\r\n                  }}\r\n                  onClick={() => props.getFontSize(size)}\r\n                  className={classes.Size}\r\n                >\r\n                  {size}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <input\r\n            style={{ backgroundColor: FontSize ? \"#e7ebf2\" : \"white\" }}\r\n            value={props.fontSize}\r\n            type=\"text\"\r\n            className={classes.Dropdown}\r\n            onClick={() => {\r\n              showFonts(false);\r\n              showFontSize(!FontSize);\r\n              showFontStyle(false);\r\n            }}\r\n            onChange={(e) => props.getFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/* Font Style and case arrengeent */}\r\n        <div className={classes.Font_Style}>\r\n          {FontStyle && (\r\n            <div className={classes.DropDown_Content}>\r\n              <h1\r\n                style={{ backgroundColor: props.isBold ? \"#12B0EE\" : null }}\r\n                onClick={() => {\r\n                  props.handleBold(!props.isBold);\r\n                }}\r\n              >\r\n                <b>B</b>\r\n              </h1>\r\n\r\n              <h1\r\n                style={{ backgroundColor: props.isItalic ? \"#12B0EE\" : null }}\r\n                onClick={() => {\r\n                  props.handleItalic(!props.isItalic);\r\n                }}\r\n              >\r\n                <i>i</i>\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor: props.isUnderline ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={() => props.handleUnderline(!props.isUnderline)}\r\n              >\r\n                <u>U</u>\r\n              </h1>\r\n              <div className={classes.Saperator}></div>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"normal\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleNormalize}\r\n              >\r\n                -\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"capitalize\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleCapitalize}\r\n              >\r\n                Aa\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"uppercase\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleUppercase}\r\n              >\r\n                AA\r\n              </h1>\r\n              <h1\r\n                style={{\r\n                  backgroundColor:\r\n                    props.fontVariant === \"smallcase\" ? \"#12B0EE\" : null,\r\n                }}\r\n                onClick={props.handleSmallcase}\r\n              >\r\n                aa\r\n              </h1>\r\n            </div>\r\n          )}\r\n          <div\r\n            style={{ backgroundColor: FontStyle ? \"#e7ebf2\" : \"white\" }}\r\n            className={classes.DropDown}\r\n          >\r\n            <h3\r\n              onClick={() => {\r\n                showFonts(false);\r\n                showFontSize(false);\r\n                showFontStyle(!FontStyle);\r\n              }}\r\n            >\r\n              A<span>A</span>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Text alignment */}\r\n        <div className={classes.Font_Align} onClick={props.handleAlignment}>\r\n          <div className={classes.line1}></div>\r\n          <div\r\n            className={classes.line2}\r\n            style={\r\n              props.alignment === \"center\"\r\n                ? { margin: \"auto\" }\r\n                : props.alignment === \"right\"\r\n                ? { marginLeft: \"auto\" }\r\n                : null\r\n            }\r\n          ></div>\r\n          <div\r\n            className={classes.line3}\r\n            style={\r\n              props.alignment === \"center\"\r\n                ? { width: \"16px\" }\r\n                : { width: \"10px !important\" }\r\n            }\r\n          ></div>\r\n        </div>\r\n\r\n        {/* Text spacing */}\r\n        <div className={classes.Font_Spacing}>\r\n          <div className={classes.Parent}>\r\n            <div className={classes.Line}></div>\r\n            <div className={classes.Rect}></div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Text Color */}\r\n        <div className={classes.Font_Color}>\r\n          <div\r\n            className={classes.Color}\r\n            style={{ backgroundColor: props.fontColor }}\r\n          >\r\n            <input\r\n              type=\"color\"\r\n              onInput={(e) => props.getFontColor(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    fonts: state.font.fonts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(FontPanel);\r\n","import React, { useState } from \"react\";\r\nimport classes from \"./RectPanel.module.css\";\r\n\r\nconst RectPanel = (props) => {\r\n  let borderSize = [];\r\n\r\n  for (let i = 1; i <= 16; i++) {\r\n    borderSize.push({ size: i });\r\n  }\r\n\r\n  const [stroke_Dropdown, showStroke_Dropdown] = useState(false);\r\n\r\n  return (\r\n    <div className={classes.Container}>\r\n      <div className={classes.RectPanel}>\r\n        <div className={classes.Fill}>\r\n          <div\r\n            className={classes.Color}\r\n            style={{ backgroundColor: props.fill }}\r\n          >\r\n            <input\r\n              type=\"color\"\r\n              onChange={(e) => props.handleFill(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={classes.StrokeWidth}\r\n          style={\r\n            stroke_Dropdown ? { backgroundColor: \"rgb(231, 235, 242)\" } : null\r\n          }\r\n        >\r\n          {stroke_Dropdown && (\r\n            <div className={classes.DropDown_Content}>\r\n              {borderSize.map((e) => (\r\n                <p\r\n                  key={e.size}\r\n                  style={{\r\n                    color: props.strokeWidth === e.size ? \"#12B0EE\" : \"black\",\r\n                  }}\r\n                  onClick={() => props.handleStrokeWidth(e.size)}\r\n                >\r\n                  {e.size}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classes.Parent}\r\n            onClick={() => showStroke_Dropdown(!stroke_Dropdown)}\r\n          >\r\n            <div className={classes.Line1}></div>\r\n            <div className={classes.Line2}></div>\r\n            <div className={classes.Line3}></div>\r\n          </div>\r\n        </div>\r\n        <div className={classes.Stroke}>\r\n          <div\r\n            className={classes.Color}\r\n            style={{ backgroundColor: props.stroke }}\r\n          >\r\n            <input\r\n              type=\"color\"\r\n              onChange={(e) => props.handleStroke(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <div className={classes.Spacing}>\r\n          <div className={classes.Parent}>\r\n            <div className={classes.Line}></div>\r\n            <div className={classes.Rect}></div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RectPanel;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Stage, Layer } from \"react-konva\";\r\nimport * as actions from \"../../Store/actions/index\";\r\nimport ImageElement from \"../Elements/ImageElement\";\r\nimport TextElement from \"../Elements/TextElement\";\r\nimport Header from \"../../Components/Canvas/Header/Header\";\r\nimport FontPanel from \"../../Components/FontPanel/FontPanel\";\r\nimport TransformerComponent from \"../../Components/Canvas/TransformerComponent/TransformerComponent\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Button from \"../../Components/Canvas/Button/Button\";\r\nimport RectElement from \"../Elements/RectElement\";\r\nimport RectPanel from \"../../Components/Canvas/RectPanel/RectPanel\";\r\nimport PathElement from \"../Elements/PathElement\";\r\nimport CircleElement from \"../Elements/CircleElement\";\r\n\r\nconst Canvas = (props) => {\r\n  // Refs\r\n  const stageRef = useRef();\r\n\r\n  const [canvas, setCanvas] = useState({\r\n    canvasWidth: null,\r\n    canvasHeight: null,\r\n    canvasScaleX: null,\r\n    canvasScaleY: null,\r\n  });\r\n\r\n  const { canvasWidth, canvasHeight } = canvas;\r\n\r\n  const [photo, setPhoto] = useState(null);\r\n\r\n  const [text, setText] = useState(null);\r\n\r\n  const [rect, setRect] = useState(null);\r\n\r\n  const [path, setPath] = useState(null);\r\n\r\n  const [circle, setCircle] = useState(null);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [selected, selectShape] = useState(null);\r\n\r\n  const [shapeId, selectedShapeId] = useState(\" \");\r\n\r\n  const handleStageMouseDown = (e) => {\r\n    // clicked on stage - cler selection\r\n    if (e.target === e.target.getStage()) {\r\n      selectedShapeId(\" \");\r\n      return;\r\n    }\r\n    // clicked on transformer - do nothing\r\n    const clickedOnTransformer =\r\n      e.target.getParent().className === \"Transformer\";\r\n    if (clickedOnTransformer) {\r\n      return;\r\n    }\r\n\r\n    // find clicked rect by its name\r\n    const id = e.target.id();\r\n    // const rect = this.state.rectangles.find(r => r.name === name);\r\n    if (id) {\r\n      selectedShapeId(id);\r\n    } else {\r\n      selectedShapeId(\" \");\r\n    }\r\n  };\r\n\r\n  const [textData, setSelectedTextData] = useState({\r\n    displayValue: null,\r\n    textFont: \"Arial\",\r\n    fontSize: 30,\r\n    fontColor: \"white\",\r\n    fontVariant: \"normal\",\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    alignment: \"left\",\r\n    rotation: 0,\r\n  });\r\n\r\n  const {\r\n    textFont,\r\n    fontSize,\r\n    fontColor,\r\n    displayValue,\r\n    fontVariant,\r\n    bold,\r\n    italic,\r\n    underline,\r\n    alignment,\r\n  } = textData;\r\n\r\n  const [rectData, setSelectedRectData] = useState({\r\n    fill: null,\r\n    stroke: null,\r\n    strokeWidth: null,\r\n  });\r\n\r\n  const { fill, stroke, strokeWidth } = rectData;\r\n\r\n  const [cropDetail, setCropDetail] = useState({\r\n    cropScaleX: null,\r\n    cropScaleY: null,\r\n    cropX: null,\r\n    cropY: null,\r\n    cropStart: false,\r\n  });\r\n\r\n  const { cropStart } = cropDetail;\r\n\r\n  const getSelectedTextData = (e) => {\r\n    if (e.target.className === \"Text\") {\r\n      text.filter((data) => {\r\n        if (data.id === e.target.id()) {\r\n          return setSelectedTextData({\r\n            ...textData,\r\n            displayValue: e.target.text(),\r\n            textFont: e.target.fontFamily(),\r\n            fontSize: e.target.fontSize(),\r\n            fontColor: e.target.fill(),\r\n            bold: data.bold,\r\n            italic: data.italic,\r\n            underline: data.underline,\r\n            fontVariant: data.fontVariant,\r\n            alignment: data.alignment,\r\n          });\r\n        }\r\n\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSelectedRectData = (e) => {\r\n    if (e.target.className === \"Rect\") {\r\n      rect.filter((data) => {\r\n        if (data.id === e.target.id()) {\r\n          return setSelectedRectData({\r\n            ...rectData,\r\n            fill: e.target.fill(),\r\n            stroke: e.target.stroke(),\r\n            strokeWidth: e.target.strokeWidth(),\r\n          });\r\n        }\r\n\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n  const getFont = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.font = value;\r\n        setSelectedTextData({ ...textData, textFont: e.font });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const getFontSize = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.fontSize = value;\r\n        setSelectedTextData({ ...textData, fontSize: e.fontSize });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const getFontColor = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.color = value;\r\n        setSelectedTextData({ ...textData, fontColor: e.color });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleUppercase = () => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.toUpperCase();\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"uppercase\",\r\n        });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleSmallcase = () => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.toLowerCase();\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"smallcase\",\r\n        });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleCapitalize = () => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.displayValue.replace(\r\n          /(?:^|\\s|[\"'([{])+\\S/g,\r\n          (match) => match.toUpperCase()\r\n        );\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"capitalize\",\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleNormalize = () => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = e.value;\r\n        setSelectedTextData({\r\n          ...textData,\r\n          displayValue: e.displayValue,\r\n          fontVariant: \"normal\",\r\n        });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleBold = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.bold = value;\r\n        return setSelectedTextData({ ...textData, bold: e.bold });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleUnderline = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.underline = value;\r\n        return setSelectedTextData({ ...textData, underline: e.underline });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleItalic = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.italic = value;\r\n        return setSelectedTextData({ ...textData, italic: e.italic });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  let textAlignment = [\"left\", \"center\", \"right\"];\r\n\r\n  const handleAlignment = () => {\r\n    return setCount(count + 1);\r\n  };\r\n\r\n  const handleText = (value) => {\r\n    text.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.displayValue = value;\r\n        e.value = value;\r\n        return setSelectedTextData({ ...textData, displayValue: value });\r\n      }\r\n\r\n      return e;\r\n    });\r\n  };\r\n\r\n  const handleCopyElement = () => {\r\n    const stage = stageRef.current.findOne((node) => node.id() === shapeId);\r\n\r\n    if (stage.className === \"Text\") {\r\n      setText((prevState) => {\r\n        return [\r\n          ...prevState,\r\n          {\r\n            alignment: alignment,\r\n            bold: bold,\r\n            color: stage.fill(),\r\n            displayValue: stage.text(),\r\n            font: stage.fontFamily(),\r\n            fontSize: stage.fontSize(),\r\n            fontVariant: fontVariant,\r\n            id: Date.now(),\r\n            italic: italic,\r\n            name: `element${Date.now()}`,\r\n            rotation: stage.rotation(),\r\n            scaleX: stage.scaleX(),\r\n            scaleY: stage.scaleY(),\r\n            type: \"Text\",\r\n            underline: underline,\r\n            value: stage.text(),\r\n            width: stage.width(),\r\n            x: stage.x(),\r\n            y: stage.y(),\r\n          },\r\n        ];\r\n      });\r\n    } else if (stage.className === \"Image\") {\r\n      setPhoto((prevState) => {\r\n        return [\r\n          ...prevState,\r\n          {\r\n            height: stage.height(),\r\n            id: Date.now(),\r\n            name: `element${Date.now()}`,\r\n            scaleX: stage.scaleX(),\r\n            scaleY: stage.scaleY(),\r\n            src: stage.attrs.image.src,\r\n            type: \"Image\",\r\n            width: stage.width(),\r\n            x: stage.x(),\r\n            y: stage.y(),\r\n            rotation: stage.rotation(),\r\n          },\r\n        ];\r\n      });\r\n      props.addPhoto({\r\n        height: stage.height(),\r\n        id: Date.now(),\r\n        name: `element${Date.now()}`,\r\n        scaleX: stage.scaleX(),\r\n        scaleY: stage.scaleY(),\r\n        src: stage.attrs.image.src,\r\n        type: \"Image\",\r\n        width: stage.width(),\r\n        x: stage.x(),\r\n        y: stage.y(),\r\n        rotation: stage.rotation(),\r\n      });\r\n    } else if (stage.className === \"Rect\") {\r\n      setRect((prevState) => {\r\n        return [\r\n          ...prevState,\r\n          {\r\n            height: stage.height(),\r\n            width: stage.width(),\r\n            fill: stage.fill(),\r\n            stroke: stage.stroke(),\r\n            strokeWidth: stage.strokeWidth(),\r\n            x: stage.x(),\r\n            y: stage.y(),\r\n            scaleX: stage.scaleX(),\r\n            scaleY: stage.scaleY(),\r\n            id: Date.now(),\r\n            type: \"Rect\",\r\n            rotation: stage.rotation(),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteElement = () => {\r\n    const stage = stageRef.current.findOne((node) => node.id() === shapeId);\r\n\r\n    if (stage.className === \"Image\") {\r\n      const photos = photo.filter((result) => result.id !== shapeId);\r\n      setPhoto(photos);\r\n      props.deletePhoto(shapeId);\r\n    }\r\n\r\n    if (stage.className === \"Text\") {\r\n      const texts = text.filter((result) => result.id !== shapeId);\r\n      setText(texts);\r\n    }\r\n\r\n    if (stage.className === \"Rect\") {\r\n      const rects = rect.filter((result) => result.id !== shapeId);\r\n      setRect(rects);\r\n    }\r\n  };\r\n\r\n  // Handeling Rectangle\r\n  const handleFill = (value) => {\r\n    rect.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.fill = value;\r\n        return setSelectedRectData({ ...rectData, fill: e.fill });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleStroke = (value) => {\r\n    rect.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.stroke = value;\r\n        return setSelectedRectData({ ...rectData, stroke: e.stroke });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleStrokeWidth = (value) => {\r\n    rect.filter((e) => {\r\n      if (e.id === shapeId) {\r\n        e.strokeWidth = value;\r\n        return setSelectedRectData({ ...rectData, strokeWidth: e.strokeWidth });\r\n      }\r\n    });\r\n  };\r\n\r\n  const [transformerObject, getObject] = useState(null);\r\n  const getActiveAnchor = (value) => {\r\n    return getObject(value);\r\n  };\r\n\r\n  const handleCropStart = () => {\r\n    return setCropDetail({ ...cropDetail, cropStart: !cropStart });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (count === 3) {\r\n      return setCount(0);\r\n    }\r\n    if (text) {\r\n      text.filter((e) => {\r\n        if (e.id === shapeId) {\r\n          e.alignment = textAlignment[count];\r\n          setSelectedTextData({ ...textData, alignment: e.alignment });\r\n        }\r\n      });\r\n    }\r\n  }, [count]);\r\n\r\n  useEffect(() => {\r\n    props.fetchData(props.match.params.templateId);\r\n    props.fetchFonts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let photos = [];\r\n    let texts = [];\r\n    let rects = [];\r\n    let path = [];\r\n    let circle = [];\r\n\r\n    if (props.canvas) {\r\n      setCanvas({\r\n        ...canvas,\r\n        canvasWidth: props.canvas.property.canvasWidth,\r\n        canvasHeight: props.canvas.property.canvasHeight,\r\n      });\r\n\r\n      props.canvas.elements.filter((e, i) => {\r\n        if (e.type === \"Text\") {\r\n          texts.push(e);\r\n        }\r\n        if (e.type === \"Path\") {\r\n          path.push(e);\r\n        }\r\n        if (e.type === \"Image\") {\r\n          photos.push(e);\r\n        }\r\n        if (e.type === \"Rect\") {\r\n          rects.push(e);\r\n        }\r\n        if (e.type === \"Circle\") {\r\n          circle.push(e);\r\n        }\r\n      });\r\n    }\r\n    setPhoto(photos);\r\n    setText(texts);\r\n    setRect(rects);\r\n    setPath(path);\r\n    setCircle(circle);\r\n    // props.getPhotos(photos);\r\n  }, [props.canvas]);\r\n\r\n  const containerRef = useRef();\r\n\r\n  let containerWidth = null;\r\n\r\n  let scale = null;\r\n\r\n  if (containerRef.current) {\r\n    containerWidth = containerRef.current.offsetWidth;\r\n    scale = containerWidth / canvasWidth;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet>\r\n        <title>Edit Post</title>\r\n      </Helmet>\r\n      <Header\r\n      // saveToDataBase={saveToDatabase}\r\n      // deselect={deselect}\r\n      // shape={selectShape}\r\n      />\r\n      <div ref={containerRef}>\r\n        <Stage\r\n          ref={stageRef}\r\n          width={canvasWidth * scale}\r\n          height={canvasHeight * scale}\r\n          style={{ backgroundColor: \"white\" }}\r\n          scaleX={scale}\r\n          scaleY={scale}\r\n          onTap={(e) => {\r\n            selectShape(e.target.className);\r\n            console.log(e.target);\r\n            getSelectedTextData(e);\r\n            getSelectedRectData(e);\r\n            // if (cropStart) {\r\n            //   handleCropStart();\r\n            // }\r\n          }}\r\n          onClick={(e) => {\r\n            selectShape(e.target.className);\r\n          }}\r\n          onMouseDown={(e) => handleStageMouseDown(e)}\r\n          onTouchStart={(e) => handleStageMouseDown(e)}\r\n        >\r\n          <Layer>\r\n            {rect &&\r\n              rect.map((e) => {\r\n                return (\r\n                  <RectElement\r\n                    key={e.id}\r\n                    id={e.id}\r\n                    x={e.x}\r\n                    y={e.y}\r\n                    width={e.width}\r\n                    height={e.height}\r\n                    fill={e.fill !== \"none\" ? e.fill : \"transparent\"}\r\n                    stroke={e.stroke}\r\n                    strokeWidth={e.strokeWidth}\r\n                    scaleX={e.scaleX}\r\n                    rotation={e.rotation}\r\n                    scaleY={e.scaleY}\r\n                  />\r\n                );\r\n              })}\r\n\r\n            {photo &&\r\n              photo.map((e) => (\r\n                <ImageElement\r\n                  key={e.id}\r\n                  x={e.x}\r\n                  y={e.y}\r\n                  width={e.width}\r\n                  height={e.height}\r\n                  img={e.src}\r\n                  id={e.id}\r\n                  name={e.name}\r\n                  scaleX={e.scaleX}\r\n                  scaleY={e.scaleY}\r\n                  // stageRef={stageRef.current}\r\n                  // cropStart={cropStart}\r\n                  rotation={e.rotation}\r\n                />\r\n              ))}\r\n            {circle &&\r\n              circle.map((e) => (\r\n                <CircleElement\r\n                  x={e.cx}\r\n                  y={e.cy}\r\n                  radius={e.r}\r\n                  scaleX={e.scaleX}\r\n                  scaleY={e.scaleY}\r\n                  id={e.id}\r\n                  name={e.name}\r\n                  rotation={e.rotation}\r\n                  transformer={transformerObject}\r\n                  fill={e.fill}\r\n                />\r\n              ))}\r\n            {path &&\r\n              path.map((e) => (\r\n                <PathElement\r\n                  x={e.x}\r\n                  y={e.y}\r\n                  // width=\"300\"\r\n                  // height=\"300\"\r\n                  fill={e.fill}\r\n                  scaleX={e.scaleX}\r\n                  scaleY={e.scaleY}\r\n                  d={e.d}\r\n                  id={e.id}\r\n                  name={e.name}\r\n                  rotation={e.rotation}\r\n                  transformer={transformerObject}\r\n                />\r\n              ))}\r\n\r\n            {text &&\r\n              text.map((e) => (\r\n                <TextElement\r\n                  key={e.id}\r\n                  x={e.x}\r\n                  y={e.y}\r\n                  width={e.width}\r\n                  scaleX={e.scaleX}\r\n                  scaleY={e.scaleY}\r\n                  // height={e.height}\r\n                  text={e.displayValue}\r\n                  id={e.id}\r\n                  font={e.font}\r\n                  fontSize={e.fontSize}\r\n                  color={e.color}\r\n                  alignment={e.alignment}\r\n                  bold={e.bold}\r\n                  italic={e.italic}\r\n                  underline={e.underline}\r\n                  rotation={e.rotation}\r\n                  name={e.name}\r\n                  textAlignment={e.alignment}\r\n                  getFontSize={getFontSize}\r\n                  transformer={transformerObject}\r\n                />\r\n              ))}\r\n\r\n            <TransformerComponent\r\n              selectedShapeName={shapeId}\r\n              anchorName={getActiveAnchor}\r\n            />\r\n          </Layer>\r\n        </Stage>\r\n\r\n        <Button\r\n          handleCopyElement={handleCopyElement}\r\n          handleDeleteElement={handleDeleteElement}\r\n          handleCropStart={handleCropStart}\r\n        />\r\n        {selected === \"Text\" && (\r\n          <FontPanel\r\n            getFont={getFont}\r\n            fontFamily={textFont}\r\n            getFontSize={getFontSize}\r\n            fontSize={fontSize}\r\n            getFontColor={getFontColor}\r\n            fontColor={fontColor}\r\n            handleUppercase={handleUppercase}\r\n            handleSmallcase={handleSmallcase}\r\n            handleCapitalize={handleCapitalize}\r\n            handleNormalize={handleNormalize}\r\n            fontVariant={fontVariant}\r\n            handleItalic={handleItalic}\r\n            handleBold={handleBold}\r\n            handleUnderline={handleUnderline}\r\n            isBold={bold}\r\n            isItalic={italic}\r\n            isUnderline={underline}\r\n            handleAlignment={handleAlignment}\r\n            alignment={alignment}\r\n            handleText={handleText}\r\n            displayValue={displayValue}\r\n          />\r\n        )}\r\n        {selected === \"Rect\" && (\r\n          <RectPanel\r\n            fill={fill}\r\n            stroke={stroke}\r\n            strokeWidth={strokeWidth}\r\n            handleFill={handleFill}\r\n            handleStroke={handleStroke}\r\n            handleStrokeWidth={handleStrokeWidth}\r\n          />\r\n        )}\r\n\r\n        {/* {selected === \"Image\" && <Tools isSelected={selected} />} */}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    canvas: state.canvas.data,\r\n    fonts: state.font.fonts,\r\n    photo: state.imageHandler.photo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchData: (params) => dispatch(actions.loadTemplate(params)),\r\n    fetchFonts: () => dispatch(actions.fetchFonts()),\r\n    getPhotos: (photos) => dispatch(actions.getPhotos(photos)),\r\n    addPhoto: (data) => dispatch(actions.addPhoto(data)),\r\n    deletePhoto: (id) => dispatch(actions.deletePhoto(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Canvas));\r\n"],"sourceRoot":""}