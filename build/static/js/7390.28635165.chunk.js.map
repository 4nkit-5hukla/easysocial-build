{"version":3,"file":"static/js/7390.28635165.chunk.js","mappings":"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","sources":["Assets/Icons/LeftArrow.tsx","Components/BusinessSettings/LeadDistributionRules/LDRItem.tsx","Components/BusinessSettings/LeadDistributionRules/LDRHeader.tsx","Components/BusinessSettings/LeadDistributionRules/LeadDistributionForm.tsx","Components/BusinessSettings/LeadDistributionRules.tsx","Pages/BusinessSettings/LeadDistributionRules.tsx","SharedComponents/FormComponents/FormTextField.tsx","Utils/index.ts"],"sourcesContent":["export const LeftArrow = () => {\r\n  return (\r\n    <svg\r\n      width=\"9\"\r\n      height=\"14\"\r\n      viewBox=\"0 0 9 14\"\r\n      fill=\"none\"\r\n      xmlns=\"//www.w3.org/2000/svg\"\r\n    >\r\n      <path d=\"M8 1L2 7L8 13\" stroke=\"#24272C\" strokeWidth={2} />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default LeftArrow;\r\n","import { Fragment, MouseEvent, useState } from \"react\";\r\nimport {\r\n  Chip,\r\n  Menu,\r\n  MenuItem,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Dialog,\r\n  Button,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { MoreVert } from \"@mui/icons-material\";\r\n\r\nimport { useSnacks } from \"Contexts/Snack\";\r\nimport BusinessApi from \"Apis/BusinessApi\";\r\n\r\nconst LDRItem = (props: any) => {\r\n  const { setErrorMessage, setSuccessMessage } = useSnacks();\r\n  const { title, description, ruleId } = props;\r\n  // 3dot menu state\r\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n\r\n  //dialog state for delete\r\n  const [openConfirmDialog, setOpenConfirmDialog] = useState(false);\r\n\r\n  //function for opening confirm box for delete\r\n  const handleClickOpen = () => {\r\n    setOpenConfirmDialog(true);\r\n  };\r\n  //function for closing confirm box for delete\r\n  const handleClickClose = () => {\r\n    setOpenConfirmDialog(false);\r\n  };\r\n  //function for opening 3 dot menu\r\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  //function for closing 3 dot menu\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const deleteLDF = async () => {\r\n    try {\r\n      const res = await BusinessApi.deleteLeadDistributionRule(ruleId);\r\n      if (!res.success) {\r\n        throw Error(res.message);\r\n      }\r\n      setSuccessMessage(res.message);\r\n      setTimeout(() => window.location.reload(), 1000);\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      handleClickClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ListItem component=\"div\" sx={{ px: { xs: 0, md: 2 } }}>\r\n        <ListItemText\r\n          primary={\r\n            <div className=\"primary-block\">\r\n              <h2 className={\"list-title\"}>{title}</h2>\r\n              <Chip\r\n                label={description}\r\n                size=\"small\"\r\n                sx={{\r\n                  backgroundColor: \"#12B0EE\",\r\n                  alignItems: \"center\",\r\n                  color: \"#ffffff\",\r\n                  borderRadius: 1,\r\n                  height: 20,\r\n\r\n                  \"& .MuiChip-label\": {\r\n                    px: 0.5,\r\n                    fontSize: 10,\r\n                    fontWeight: 900,\r\n                    lineHeight: \"12px\",\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n          }\r\n          sx={{\r\n            \"& .primary-block\": {\r\n              alignItems: \"center\",\r\n              display: \"flex\",\r\n              flexWrap: \"wrap\",\r\n              gap: 1.25,\r\n              marginBottom: 0.75,\r\n\r\n              \"& .list-title\": {\r\n                color: \"text.secondary\",\r\n                fontSize: 15,\r\n                fontWeight: 500,\r\n                lineHeight: \"18px\",\r\n              },\r\n            },\r\n          }}\r\n        />\r\n        <ListItemIcon>\r\n          <IconButton\r\n            // disabled\r\n            onClick={handleClick}\r\n          >\r\n            <MoreVert />\r\n          </IconButton>\r\n        </ListItemIcon>\r\n      </ListItem>\r\n      {Boolean(anchorEl) && (\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n          keepMounted\r\n          MenuListProps={{\r\n            \"aria-labelledby\": \"Options\",\r\n          }}\r\n          anchorOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          sx={{\r\n            \"& .MuiPaper-root\": { minWidth: 120 },\r\n          }}\r\n        >\r\n          <MenuItem\r\n            onClick={() => {\r\n              handleClickOpen();\r\n              handleClose();\r\n            }}\r\n          >\r\n            {\"Delete\"}\r\n          </MenuItem>\r\n        </Menu>\r\n      )}\r\n      <Dialog\r\n        open={openConfirmDialog}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">{\"Delete\"}</DialogTitle>\r\n        <DialogContent>{\"Are you sure you want to delete?\"}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              handleClickClose();\r\n            }}\r\n          >\r\n            {\"Cancel\"}\r\n          </Button>\r\n          <Button\r\n            onClick={async () => {\r\n              await deleteLDF();\r\n            }}\r\n            autoFocus\r\n          >\r\n            {\"Delete\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LDRItem;\r\n","import {\n  ActionButton,\n  TeamHead,\n  TeamHeadBottom,\n  TeamHeadBottomLeft,\n  TeamHeadTitle,\n  TeamHeadTop,\n} from \"Containers/BusinessSettings/LayoutComponents\";\nimport { useSettingsApi, useSettingsData } from \"Contexts/Business\";\n\nconst LDRHeader = () => {\n  const { totalLdRules } = useSettingsData();\n  const { setShowLdrForm } = useSettingsApi();\n\n  return (\n    <TeamHead>\n      <TeamHeadTop>\n        <ActionButton\n          disableIcon\n          type=\"button\"\n          onClick={() => setShowLdrForm(true)}\n          sx={{ py: 0, px: 0.625, height: 36, mt: 0 }}\n        >\n          {\"New Lead Distribution Rule\"}\n        </ActionButton>\n      </TeamHeadTop>\n      <TeamHeadBottom>\n        <TeamHeadBottomLeft>\n          <TeamHeadTitle>{`${totalLdRules} Lead Distribution Rules`}</TeamHeadTitle>\n        </TeamHeadBottomLeft>\n      </TeamHeadBottom>\n    </TeamHead>\n  );\n};\n\nexport default LDRHeader;\n","import {\r\n  Fragment,\r\n  ForwardedRef,\r\n  forwardRef,\r\n  HTMLAttributes,\r\n  SyntheticEvent,\r\n  useCallback,\r\n  useDeferredValue,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  Autocomplete,\r\n  CircularProgress,\r\n  Drawer,\r\n  IconButton,\r\n  MenuItem,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport {\r\n  ActionArea,\r\n  ActionButton,\r\n  ContentHeader,\r\n  DrawerForm,\r\n  DrawerWrapper,\r\n  Field,\r\n  FlexRow,\r\n  FormSelectFieldSX,\r\n  FormTextFieldSX,\r\n  GrowColumn,\r\n  HeaderTitle,\r\n} from \"Containers/BusinessSettings/LayoutComponents\";\r\nimport { useSettingsApi, useSettingsData } from \"Contexts/Business\";\r\nimport { useSnacks } from \"Contexts/Snack\";\r\nimport { isBackDropOrEscapeKey } from \"Utils\";\r\nimport { LeftArrow } from \"Assets/Icons\";\r\nimport FormTextField from \"SharedComponents/FormComponents/FormTextField\";\r\nimport BusinessApi from \"Apis/BusinessApi\";\r\n\r\ninterface ListBoxProps extends HTMLAttributes<HTMLUListElement> {}\r\n\r\ninterface LeadDataFormProps {\r\n  open: boolean;\r\n  closeDrawer: () => void;\r\n}\r\n\r\ntype NullableUlElement = HTMLUListElement | null;\r\n\r\nconst ListBox = forwardRef(\r\n  (props: ListBoxProps, ref: ForwardedRef<HTMLUListElement>) => {\r\n    const { children, ...rest } = props;\r\n\r\n    const innerRef = useRef<HTMLUListElement>(null);\r\n\r\n    useImperativeHandle<NullableUlElement, NullableUlElement>(\r\n      ref,\r\n      () => innerRef.current\r\n    );\r\n\r\n    return (\r\n      // eslint-disable-next-line jsx-a11y/aria-role\r\n      <ul {...rest} ref={innerRef} role=\"list-box\">\r\n        {children}\r\n      </ul>\r\n    );\r\n  }\r\n);\r\n\r\nconst LeadDistributionForm = ({ open, closeDrawer }: LeadDataFormProps) => {\r\n  const { setErrorMessage, setSuccessMessage } = useSnacks();\r\n  const { teamMembers, leadDataFields, teamMembersTotal } = useSettingsData();\r\n  const { setTeamMembers, setTeamMembersTotal } = useSettingsApi();\r\n  const [showTeamMembers, toggleTeamMembers] = useState<boolean>(false);\r\n  const [loadingTeamMembers, setLoadingTeamMembers] = useState<boolean>(true);\r\n  const [teamMemberSearch, setTeamMemberSearch] = useState<string>(\"\");\r\n  const deferredTMSearch = useDeferredValue(teamMemberSearch);\r\n  const [teamMembersIndex, setTeamMembersIndex] = useState<number>(1);\r\n  const { control, handleSubmit, watch, setValue } = useForm<any>({\r\n    defaultValues: {\r\n      param_name: \"\",\r\n      rule: {},\r\n      assign_to: \"\",\r\n      param_type: \"\",\r\n      logic: \"match\",\r\n    },\r\n  });\r\n  const { param_name } = watch();\r\n  const doLoadMore = async (teamMembersIndex: number) => {\r\n    try {\r\n      setTeamMembersIndex(teamMembersIndex);\r\n      const res = await BusinessApi.getTeamMembers(\r\n        deferredTMSearch,\r\n        teamMembersIndex\r\n      );\r\n      if (!res.success) {\r\n        throw Error(res.message);\r\n      }\r\n      setTeamMembers([...teamMembers, ...res.payload.data]);\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n  const fetchTeamMembers = useCallback(async () => {\r\n    try {\r\n      if (open) {\r\n        const startPage = 1;\r\n        setLoadingTeamMembers(true);\r\n        setTeamMembersIndex(startPage);\r\n        const res = await BusinessApi.getTeamMembers(\r\n          deferredTMSearch,\r\n          startPage\r\n        );\r\n        if (!res.success) {\r\n          throw Error(res.message);\r\n        }\r\n        setTeamMembers(res.payload.data);\r\n        setTeamMembersTotal(res.payload.meta.total);\r\n        setLoadingTeamMembers(false);\r\n      }\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open, deferredTMSearch]);\r\n  const onParamNameChange = useCallback(() => {\r\n    if (param_name !== \"\") {\r\n      const [selectedField] = leadDataFields.filter((lDF: any) => {\r\n        return lDF.field_name === param_name;\r\n      });\r\n      if (selectedField) {\r\n        setValue(\"param_type\", selectedField.field_type);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [param_name]);\r\n  const onSubmit = async (data: any) => {\r\n    try {\r\n      const res = await BusinessApi.createLeadDistributionRule(data);\r\n      if (!res.success) {\r\n        throw Error(res.message);\r\n      }\r\n      setSuccessMessage(res.message);\r\n      setTimeout(() => window.location.reload(), 1000);\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setTimeout(() => closeDrawer(), 1000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTeamMembers();\r\n  }, [fetchTeamMembers]);\r\n\r\n  useEffect(() => {\r\n    onParamNameChange();\r\n  }, [onParamNameChange]);\r\n\r\n  return (\r\n    <Drawer\r\n      anchor={\"right\"}\r\n      open={open}\r\n      onClose={(_, reason) => !isBackDropOrEscapeKey(reason) && closeDrawer()}\r\n      sx={{ zIndex: \"modal\" }}\r\n    >\r\n      <DrawerWrapper sx={{ width: { xs: \"100vw\", md: 360 } }}>\r\n        <ContentHeader>\r\n          <IconButton onClick={closeDrawer} sx={{ width: 32, height: 32 }}>\r\n            <LeftArrow />\r\n          </IconButton>\r\n          <HeaderTitle>{`Create New Rule`}</HeaderTitle>\r\n        </ContentHeader>\r\n        <DrawerForm onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\r\n          <Typography\r\n            component=\"p\"\r\n            color=\"#24272C\"\r\n            fontSize={18}\r\n            lineHeight=\"21px\"\r\n            marginBottom={3}\r\n          >\r\n            Assign enquiry to team member when lead data field matches value.\r\n          </Typography>\r\n          <FlexRow>\r\n            <GrowColumn>\r\n              <Field>\r\n                <FormTextField\r\n                  select\r\n                  control={control}\r\n                  label=\"Lead Data Field\"\r\n                  name=\"param_name\"\r\n                  sx={FormSelectFieldSX}\r\n                  required={true}\r\n                  defaultValue={param_name}\r\n                >\r\n                  {leadDataFields.length === 0 ? (\r\n                    <MenuItem value={\"\"} disabled>\r\n                      {\"No Lead Data Field Available\"}\r\n                    </MenuItem>\r\n                  ) : (\r\n                    <MenuItem value=\"\" disabled>\r\n                      {\"Select Lead Data Field\"}\r\n                    </MenuItem>\r\n                  )}\r\n                  {leadDataFields.map(({ id, display_name, field_name }) => (\r\n                    <MenuItem key={id} value={field_name}>\r\n                      {display_name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </FormTextField>\r\n              </Field>\r\n              <Field>\r\n                <FormTextField\r\n                  control={control}\r\n                  name=\"rule.value\"\r\n                  label=\"Match Value\"\r\n                  placeholder=\"Match Value\"\r\n                  required={true}\r\n                  sx={FormTextFieldSX}\r\n                />\r\n              </Field>\r\n              <Field>\r\n                <Autocomplete\r\n                  open={showTeamMembers}\r\n                  onOpen={() => {\r\n                    toggleTeamMembers(true);\r\n                  }}\r\n                  onClose={() => {\r\n                    setTeamMemberSearch(\"\");\r\n                    toggleTeamMembers(false);\r\n                  }}\r\n                  noOptionsText={\"Team Member not found.\"}\r\n                  isOptionEqualToValue={(option, value) =>\r\n                    option.user.name === value.user.name\r\n                  }\r\n                  getOptionLabel={(option) => option.user.name}\r\n                  options={teamMembers}\r\n                  loading={loadingTeamMembers}\r\n                  onChange={(_event, newValue) => {\r\n                    newValue && setValue(\"assign_to\", newValue.user.id);\r\n                  }}\r\n                  onInputChange={(_event, newInputValue) => {\r\n                    setTeamMemberSearch(\r\n                      newInputValue.length > 2 ? newInputValue : \"\"\r\n                    );\r\n                  }}\r\n                  ListboxComponent={ListBox}\r\n                  ListboxProps={{\r\n                    onScroll: (event: SyntheticEvent) => {\r\n                      const listboxNode = event.currentTarget;\r\n                      if (\r\n                        listboxNode.scrollTop + listboxNode.clientHeight ===\r\n                        listboxNode.scrollHeight\r\n                      ) {\r\n                        if (teamMembersTotal) {\r\n                          if (teamMembersTotal > teamMembers.length) {\r\n                            doLoadMore(teamMembersIndex + 1);\r\n                          }\r\n                        }\r\n                      }\r\n                    },\r\n                  }}\r\n                  renderOption={(props, option) => {\r\n                    return (\r\n                      <MenuItem\r\n                        {...props}\r\n                        value={option.user.id}\r\n                        key={option.user_id}\r\n                      >\r\n                        {option.user.name}\r\n                      </MenuItem>\r\n                    );\r\n                  }}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Assign To\"\r\n                      required={true}\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                          <Fragment>\r\n                            {loadingTeamMembers ? (\r\n                              <CircularProgress color=\"inherit\" size={20} />\r\n                            ) : null}\r\n                            {params.InputProps.endAdornment}\r\n                          </Fragment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Field>\r\n            </GrowColumn>\r\n          </FlexRow>\r\n          <ActionArea>\r\n            <ActionButton type=\"submit\">Save</ActionButton>\r\n          </ActionArea>\r\n        </DrawerForm>\r\n      </DrawerWrapper>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default LeadDistributionForm;\r\n","import { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"react-router-dom\";\nimport { Card, CardContent, Divider, IconButton } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport BusinessApi from \"Apis/BusinessApi\";\nimport { useGlobal } from \"Contexts/App\";\nimport { useSnacks } from \"Contexts/Snack\";\nimport { useSettingsApi, useSettingsData } from \"Contexts/Business\";\nimport {\n  ActionButton,\n  CardSX,\n  CardContentSX,\n  Content,\n  ContentInner,\n  InnerWrapper,\n  ContentHeader,\n  HeaderTitle,\n  InnerBlock,\n  Cta,\n  CtaInfo,\n  CtaInfoText,\n  InnerWrapperSX,\n  ContentFooter,\n  ContentInnerSX,\n  ContentHeaderSX,\n  LoadMoreRow,\n} from \"Containers/BusinessSettings/LayoutComponents\";\nimport { LeftArrow } from \"Assets/Icons\";\nimport LDRItem from \"./LeadDistributionRules/LDRItem\";\nimport LDRHeader from \"./LeadDistributionRules/LDRHeader\";\nimport LeadDistributionForm from \"./LeadDistributionRules/LeadDistributionForm\";\n\nconst LeadDistributionRules = () => {\n  const { isMobile, isTablet } = useGlobal();\n  const { setErrorMessage } = useSnacks();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingMore, setLoadingMore] = useState<boolean>(false);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const { leadDistributionRules, showLdrForm, totalLdRules } =\n    useSettingsData();\n  const {\n    setLeadDataFields,\n    setLeadDistributionRules,\n    setShowLdrForm,\n    setTotalLdRules,\n  } = useSettingsApi();\n  const fetchLeadDistributionRules = useCallback(async () => {\n    try {\n      const res = await BusinessApi.getLeadDistributionRules(currentPage);\n      if (!res.success) {\n        throw Error(res.message);\n      }\n      setLeadDistributionRules((prevLDR) => prevLDR.concat(res.payload.data));\n      totalLdRules === 0 && setTotalLdRules(res.payload.meta.total);\n      setLoading(false);\n      setLoadingMore(false);\n    } catch (error: any) {\n      setErrorMessage(error.message);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n  const fetchLeadDataFields = useCallback(async () => {\n    try {\n      const res = await BusinessApi.getLeadDataFields();\n      if (!res.success) {\n        throw Error(res.message);\n      }\n      setLeadDataFields(res.payload);\n    } catch (error: any) {\n      setErrorMessage(error.message);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    fetchLeadDataFields();\n  }, [fetchLeadDataFields]);\n\n  useEffect(() => {\n    fetchLeadDistributionRules();\n  }, [fetchLeadDistributionRules]);\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>Lead Distribution Rules</title>\n      </Helmet>\n      <Content>\n        {isMobile && (\n          <ContentHeader sx={ContentHeaderSX}>\n            <IconButton\n              component={Link}\n              to=\"/business-settings\"\n              sx={{ width: 32, height: 32 }}\n            >\n              <LeftArrow />\n            </IconButton>\n            <HeaderTitle>Lead Distribution Rules</HeaderTitle>\n          </ContentHeader>\n        )}\n        <ContentInner sx={ContentInnerSX}>\n          <InnerWrapper sx={InnerWrapperSX}>\n            {!loading && (\n              <Card elevation={0} sx={CardSX}>\n                <CardContent sx={CardContentSX}>\n                  {leadDistributionRules.length === 0 ? (\n                    <InnerBlock>\n                      <Cta>\n                        <ActionButton\n                          disableIcon\n                          onClick={() => setShowLdrForm(true)}\n                          sx={{\n                            borderRadius: 2,\n                            boxShadow: \"0px 8px 8px rgba(50, 197, 255, 0.1)\",\n                            fontSize: 16,\n                            fontWeight: 700,\n                            height: 36,\n                            lineHeight: \"19px\",\n                            margin: \"auto\",\n                            textTransform: \"capitalize\",\n                          }}\n                        >\n                          {\"New Lead Distribution Rule\"}\n                        </ActionButton>\n                      </Cta>\n                      <CtaInfo>\n                        <CtaInfoText>\n                          {\n                            \"Create logical rules, based on which an enquiry is automatically assigned to a team member.\"\n                          }\n                        </CtaInfoText>\n                      </CtaInfo>\n                    </InnerBlock>\n                  ) : (\n                    <Fragment>\n                      {isTablet && <LDRHeader />}\n                      {isTablet && <Divider />}\n                      {leadDistributionRules.map(\n                        ({ rule, user, param_name, id }, i: number) => (\n                          <LDRItem\n                            key={i}\n                            title={user.name}\n                            description={rule.value}\n                            ruleId={id}\n                          />\n                        )\n                      )}\n                      {totalLdRules > leadDistributionRules.length && (\n                        <LoadMoreRow>\n                          <LoadingButton\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              setCurrentPage((currentPage) => currentPage + 1);\n                              setLoadingMore(true);\n                            }}\n                            loading={loadingMore}\n                          >\n                            Load More\n                          </LoadingButton>\n                        </LoadMoreRow>\n                      )}\n                    </Fragment>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </InnerWrapper>\n        </ContentInner>\n        {isMobile && leadDistributionRules.length > 0 && (\n          <ContentFooter>\n            <ActionButton\n              onClick={() => setShowLdrForm(true)}\n              variant=\"outlined\"\n              color=\"primary\"\n              disableIcon\n            >\n              New Lead Distribution Rule\n            </ActionButton>\n          </ContentFooter>\n        )}\n      </Content>\n      <LeadDistributionForm\n        open={showLdrForm}\n        closeDrawer={() => {\n          setShowLdrForm(false);\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default LeadDistributionRules;\n","import LeadDistributionRules from \"Components/BusinessSettings/LeadDistributionRules\";\r\n\r\nconst LeadDistributionRulesPage = () => <LeadDistributionRules />;\r\n\r\nexport default LeadDistributionRulesPage;\r\n","import { TextField, TextFieldProps } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { Control, Controller, UseControllerProps } from \"react-hook-form\";\r\n\r\ninterface FormTextFieldProps extends UseControllerProps {\r\n  control: Control<any, any>;\r\n}\r\n\r\nconst FormTextField: FC<TextFieldProps & FormTextFieldProps> = ({\r\n  control,\r\n  defaultValue,\r\n  rules,\r\n  name,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Controller\r\n      rules={rules}\r\n      control={control}\r\n      name={name}\r\n      render={({ field }) => {\r\n        return (\r\n          <TextField\r\n            {...props}\r\n            value={field.value ?? \"\"}\r\n            onChange={field.onChange}\r\n          >\r\n            {children}\r\n          </TextField>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormTextField;\r\n","import moment from \"moment\";\r\n\r\nexport function getRandomColor() {\r\n  var rgb = [];\r\n\r\n  for (var i = 0; i < 3; i++) {\r\n    rgb.push(Math.floor(Math.random() * 255));\r\n  }\r\n\r\n  return \"rgb(\" + rgb.join(\",\") + \", 0.5)\";\r\n}\r\n\r\nexport function secondsToHms(d: number) {\r\n  d = Number(d);\r\n  let h = Math.floor(d / 3600);\r\n  let m = Math.floor((d % 3600) / 60);\r\n  let s = Math.floor((d % 3600) % 60);\r\n\r\n  let hDisplay = h > 0 ? h + (h === 1 ? \" hour \" : \" hours \") : \"\";\r\n  let mDisplay = m > 0 ? m + (m === 1 ? \" minute \" : \" minutes \") : \"\";\r\n  let sDisplay = s > 0 ? s + (s === 1 ? \" second\" : \" seconds\") : \"\";\r\n  return hDisplay + mDisplay + sDisplay;\r\n}\r\n\r\nexport const isBackDropOrEscapeKey = (reason: string) =>\r\n  reason === \"backdropClick\" || reason === \"escapeKeyDown\";\r\n\r\nexport const monthFormat = (month: string) => moment(month).format(\"MMM YYYY\");\r\n\r\nexport const formatFB_IGAccountsArray = (accounts: string[]): string[] => {\r\n  let withChangedFBAccounts: string[] = [];\r\n\r\n  if (accounts.includes(\"facebook\")) {\r\n    withChangedFBAccounts = accounts.filter((acc) => acc !== \"facebook\");\r\n  }\r\n\r\n  if (accounts.includes(\"instagram\")) {\r\n    withChangedFBAccounts = withChangedFBAccounts.filter(\r\n      (acc) => acc !== \"instagram\"\r\n    );\r\n  }\r\n\r\n  if (accounts.includes(\"facebook\") || accounts.includes(\"instagram\")) {\r\n    withChangedFBAccounts.unshift(\"facebook and instagram\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"facebook and instagram\") &&\r\n    !withChangedFBAccounts.includes(\"facebook and instagram\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"facebook and instagram\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"twitter\") &&\r\n    !withChangedFBAccounts.includes(\"twitter\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"twitter\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"linkedin\") &&\r\n    !withChangedFBAccounts.includes(\"linkedin\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"linkedin\");\r\n  }\r\n\r\n  return withChangedFBAccounts;\r\n};\r\n\r\nexport const userInitials = (name: string) => {\r\n  return {\r\n    children: `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`,\r\n  };\r\n};\r\n"],"names":["LeftArrow","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","props","useSnacks","setErrorMessage","setSuccessMessage","title","description","ruleId","useState","anchorEl","setAnchorEl","openConfirmDialog","setOpenConfirmDialog","handleClickClose","handleClose","deleteLDF","BusinessApi","res","success","Error","message","setTimeout","window","location","reload","Fragment","ListItem","component","sx","px","xs","md","ListItemText","primary","className","Chip","label","size","backgroundColor","alignItems","color","borderRadius","fontSize","fontWeight","lineHeight","display","flexWrap","gap","marginBottom","ListItemIcon","IconButton","onClick","event","currentTarget","MoreVert","Boolean","Menu","open","onClose","keepMounted","MenuListProps","anchorOrigin","vertical","horizontal","transformOrigin","minWidth","MenuItem","Dialog","DialogTitle","id","DialogContent","DialogActions","Button","autoFocus","totalLdRules","useSettingsData","setShowLdrForm","useSettingsApi","disableIcon","type","py","mt","ListBox","forwardRef","ref","children","rest","innerRef","useRef","useImperativeHandle","current","role","closeDrawer","teamMembers","leadDataFields","teamMembersTotal","setTeamMembers","setTeamMembersTotal","showTeamMembers","toggleTeamMembers","loadingTeamMembers","setLoadingTeamMembers","teamMemberSearch","setTeamMemberSearch","deferredTMSearch","useDeferredValue","teamMembersIndex","setTeamMembersIndex","useForm","defaultValues","param_name","rule","assign_to","param_type","logic","control","handleSubmit","watch","setValue","doLoadMore","payload","data","fetchTeamMembers","useCallback","meta","total","onParamNameChange","filter","lDF","field_name","selectedField","field_type","onSubmit","useEffect","Drawer","anchor","_","reason","isBackDropOrEscapeKey","zIndex","autoComplete","Typography","FormTextField","select","name","FormSelectFieldSX","required","defaultValue","length","value","disabled","map","display_name","placeholder","FormTextFieldSX","Autocomplete","onOpen","noOptionsText","isOptionEqualToValue","option","user","getOptionLabel","options","loading","onChange","_event","newValue","onInputChange","newInputValue","ListboxComponent","ListboxProps","onScroll","listboxNode","scrollTop","clientHeight","scrollHeight","renderOption","key","user_id","renderInput","params","TextField","InputProps","endAdornment","CircularProgress","useGlobal","isMobile","isTablet","setLoading","loadingMore","setLoadingMore","currentPage","setCurrentPage","leadDistributionRules","showLdrForm","setLeadDataFields","setLeadDistributionRules","setTotalLdRules","fetchLeadDistributionRules","prevLDR","concat","fetchLeadDataFields","ContentHeaderSX","Link","to","ContentInnerSX","InnerWrapperSX","Card","elevation","CardSX","CardContent","CardContentSX","boxShadow","margin","textTransform","Divider","i","LoadingButton","variant","rules","render","field","getRandomColor","rgb","push","Math","floor","random","join","secondsToHms","Number","h","m","s","monthFormat","month","moment","format","formatFB_IGAccountsArray","accounts","withChangedFBAccounts","includes","acc","unshift","userInitials","split"],"sourceRoot":""}