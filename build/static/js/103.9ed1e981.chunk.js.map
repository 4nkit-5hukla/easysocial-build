{"version":3,"sources":["api/Category/index.js","Container/CreateTemplate/Components/TemplateSuccess/TemplateSuccess.module.css","Container/CreateTemplate/Components/TemplateSuccess/TemplateSuccess.js"],"names":["getAllCategories","a","fetch","API","method","headers","Accept","localStorage","getItem","res","json","console","log","createCategory","data","body","JSON","stringify","createSubCategory","getAllElementCategories","createElementCategory","createElementSubCategory","module","exports","TemplateSuccess","props","React","useState","element","setElement","category","setCategory","useEffect","getGroupElements","match","params","templateId","then","message","categoryData","catch","err","className","classes","map","el","i","Element_Container","onSubmit","e","preventDefault","Img_Container","style","margin","display","width","src","svg","alt","Input_Container","Element_Name","htmlFor","onChange","items","item","element_name","target","value","defaultValue","type","name","id","placeholder","forEach","categoryName","sub_category","subCategory","subCategoryName","subcategoryName","disabled","selected","category_Name","length","subcategory","subcategory_Name","Tags","tags","onClick","split","Btn_Container","alert","elements","filter","elLength","undefined","elementName","uuid","image","Image","crossOrigin","document","getElementById","onload","canvas","appendChild","ownerDocument","importNode","createElement","height","getContext","drawImage","toBlob","blob","storageRef","firebase","storage","ref","put","path","getDownloadURL","url","png","push","remove","storeElements","window","location","href"],"mappings":"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","file":"static/js/103.9ed1e981.chunk.js","sourcesContent":["import { API } from \"../../Backend\";\r\n\r\nexport const getAllCategories = async () => {\r\n  try {\r\n    const res = await fetch(`${API}/get/category`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const createCategory = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API}/create/category`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const createSubCategory = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API}/create/sub-category`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getAllElementCategories = async () => {\r\n  try {\r\n    const res = await fetch(`${API}/get/element-category`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const createElementCategory = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API}/create/element-category`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const createElementSubCategory = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API}/create/element-sub-category`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"X-Auth-Token\": localStorage.getItem(\"token\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await res.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TemplateSuccess\":\"TemplateSuccess_TemplateSuccess__305mK\",\"Input_Container\":\"TemplateSuccess_Input_Container__247S_\",\"Element_Container\":\"TemplateSuccess_Element_Container__g0Dwu\"};","/** @format */\r\n\r\nimport React from \"react\";\r\nimport {\r\n  createElementCategory,\r\n  createElementSubCategory,\r\n  getAllElementCategories,\r\n} from \"../../../../api/Category\";\r\nimport { getGroupElements, storeElements } from \"../../../../api/Template\";\r\nimport classes from \"./TemplateSuccess.module.css\";\r\nimport firebase from \"../../../../firebase\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst TemplateSuccess = (props) => {\r\n  const [element, setElement] = React.useState(null);\r\n  const [category, setCategory] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    getGroupElements(props.match.params.templateId).then((data) =>\r\n      setElement(data)\r\n    );\r\n    getAllElementCategories()\r\n      .then((data) => {\r\n        if (data.message) {\r\n          setCategory(data.categoryData);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.TemplateSuccess}>\r\n      <main>\r\n        {element &&\r\n          element.map((el, i) => {\r\n            return (\r\n              <div key={i} className={classes.Element_Container}>\r\n                <form\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                  }}\r\n                >\r\n                  <div className={classes.Img_Container}>\r\n                    <img\r\n                      style={{ margin: \"auto\", display: \"block\" }}\r\n                      width=\"40%\"\r\n                      src={el.src.svg}\r\n                      alt=\"img\"\r\n                    />\r\n                  </div>\r\n                  <div className={classes.Input_Container}>\r\n                    {/* Element Name */}\r\n                    <div className={classes.Element_Name}>\r\n                      <label htmlFor=\"element-name\">Element Name</label>\r\n                      <input\r\n                        onChange={(e) => {\r\n                          let items = [...element];\r\n                          // 2. Make a shallow copy of the item you want to mutate\r\n                          let item = { ...items[i] };\r\n\r\n                          item.element_name = e.target.value;\r\n                          // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                          items[i] = item;\r\n                          // 5. Set the state to our new copy\r\n                          setElement(items);\r\n                        }}\r\n                        defaultValue={el.element_name}\r\n                        type=\"text\"\r\n                        name=\"element-name\"\r\n                        id=\"element-name\"\r\n                        placeholder=\"Element Name\"\r\n                      />\r\n                    </div>\r\n\r\n                    {/* Element Category */}\r\n                    <div className={classes.Element_Name}>\r\n                      <label htmlFor=\"element-category\">\r\n                        Element Category:{\" \"}\r\n                      </label>\r\n                      <select\r\n                        onChange={(e) => {\r\n                          let items = [...element];\r\n                          // 2. Make a shallow copy of the item you want to mutate\r\n                          let item = { ...items[i] };\r\n\r\n                          if (e.target.value !== \"other\") {\r\n                            category.forEach((category) => {\r\n                              if (category.id === e.target.value) {\r\n                                if (\r\n                                  category.categoryName.sub_category !== null\r\n                                ) {\r\n                                  item.categoryName =\r\n                                    category.categoryName.name;\r\n                                  item.category = e.target.value;\r\n                                  item.subCategory =\r\n                                    category.categoryName.sub_category;\r\n                                  item.subCategoryName = null;\r\n                                  item.subcategoryName = null;\r\n                                  items[i] = item;\r\n                                  setElement(items);\r\n                                } else {\r\n                                  item.categoryName = null;\r\n                                  item.subCategory = null;\r\n                                  item.categoryName =\r\n                                    category.categoryName.name;\r\n                                  item.category = e.target.value;\r\n                                  items[i] = item;\r\n                                  setElement(items);\r\n                                }\r\n                              }\r\n                            });\r\n                          } else {\r\n                            item.subCategoryName = null;\r\n                            item.categoryName = null;\r\n                            item.category = e.target.value;\r\n                            item.subcategoryName = \"other\";\r\n                            item.subCategory = null;\r\n\r\n                            items[i] = item;\r\n                            setElement(items);\r\n                          }\r\n                        }}\r\n                        type=\"text\"\r\n                        name=\"element-category\"\r\n                        id=\"element-category\"\r\n                      >\r\n                        <option value=\"\" disabled selected>\r\n                          Select Category\r\n                        </option>\r\n                        {category &&\r\n                          category.map((category) => (\r\n                            <option value={category.id} key={category.id}>\r\n                              {category.categoryName.name}\r\n                            </option>\r\n                          ))}\r\n                        <option value=\"other\">other</option>\r\n                      </select>\r\n                    </div>\r\n\r\n                    {/* Element Category Name */}\r\n                    {element &&\r\n                      element[i].category &&\r\n                      element[i].category === \"other\" && (\r\n                        <div className={classes.category_Name}>\r\n                          <label htmlFor=\"element-category-name\">\r\n                            Element Category Name\r\n                          </label>\r\n                          <input\r\n                            onChange={(e) => {\r\n                              let items = [...element];\r\n                              // 2. Make a shallow copy of the item you want to mutate\r\n                              let item = { ...items[i] };\r\n\r\n                              item.categoryName = e.target.value;\r\n                              // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                              items[i] = item;\r\n                              // 5. Set the state to our new copy\r\n                              setElement(items);\r\n                            }}\r\n                            defaultValue=\"\"\r\n                            type=\"text\"\r\n                            name=\"element-category-name\"\r\n                            id=\"element-category-name\"\r\n                            placeholder=\"Category Name\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n\r\n                    {/* Element Sub Category */}\r\n                    {element && element[i].category && (\r\n                      <div className={classes.Element_Name}>\r\n                        <label htmlFor=\"element-subcategory\">\r\n                          Element sub-Category:{\" \"}\r\n                        </label>\r\n                        <select\r\n                          type=\"text\"\r\n                          name=\"element-subcategory\"\r\n                          id=\"element-subcategory\"\r\n                          onChange={(e) => {\r\n                            let items = [...element];\r\n                            // 2. Make a shallow copy of the item you want to mutate\r\n                            let item = { ...items[i] };\r\n\r\n                            if (e.target.value !== \"other\") {\r\n                              item.subCategoryName = e.target.value;\r\n                            } else {\r\n                              item.subcategoryName = e.target.value;\r\n                            }\r\n                            //------------------------------------------------------\r\n                            // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                            items[i] = item;\r\n                            // 5. Set the state to our new copy\r\n                            setElement(items);\r\n                          }}\r\n                        >\r\n                          <option value=\"\" disabled selected>\r\n                            Select Sub-Category\r\n                          </option>\r\n                          {element &&\r\n                            element[i].subCategory &&\r\n                            element[i].subCategory.length > 0 &&\r\n                            element[i].subCategory.map((subcategory) => (\r\n                              <option key={subcategory.name}>\r\n                                {subcategory.name}\r\n                              </option>\r\n                            ))}\r\n                          <option value=\"other\">other</option>\r\n                        </select>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Element Sub Category Name */}\r\n                    {element &&\r\n                      element[i].subcategoryName &&\r\n                      element[i].subcategoryName === \"other\" && (\r\n                        <div className={classes.subcategory_Name}>\r\n                          <label htmlFor=\"element-sub-category-name\">\r\n                            Element Sub Category Name\r\n                          </label>\r\n                          <input\r\n                            onChange={(e) => {\r\n                              let items = [...element];\r\n                              // 2. Make a shallow copy of the item you want to mutate\r\n                              let item = { ...items[i] };\r\n\r\n                              item.subCategoryName = e.target.value;\r\n                              // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                              items[i] = item;\r\n                              // 5. Set the state to our new copy\r\n                              setElement(items);\r\n                            }}\r\n                            defaultValue=\"\"\r\n                            type=\"text\"\r\n                            name=\"element-sub-category-name\"\r\n                            id=\"element-sub-category-name\"\r\n                            placeholder=\"Sub-category Name\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n\r\n                    {/* Enter tags */}\r\n                    {element && element[i].category && (\r\n                      <div className={classes.Tags}>\r\n                        <label htmlFor=\"tag\">Add Tags: </label>\r\n\r\n                        <input\r\n                          onChange={(e) => {\r\n                            let items = [...element];\r\n                            // 2. Make a shallow copy of the item you want to mutate\r\n                            let item = { ...items[i] };\r\n\r\n                            item.tags = e.target.value;\r\n                            // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                            items[i] = item;\r\n                            // 5. Set the state to our new copy\r\n                            setElement(items);\r\n                          }}\r\n                          defaultValue=\"\"\r\n                          type=\"text\"\r\n                          name=\"tag\"\r\n                          id=\"tag\"\r\n                          placeholder=\"Add Tags\"\r\n                        />\r\n                        <br />\r\n\r\n                        {element &&\r\n                          element[i].tags &&\r\n                          element[i].tags.length > 0 &&\r\n                          typeof element[i].tags != \"object\" && (\r\n                            <button\r\n                              onClick={() => {\r\n                                let items = [...element];\r\n                                // 2. Make a shallow copy of the item you want to mutate\r\n                                let item = { ...items[i] };\r\n\r\n                                item.tags = item.tags.split(\",\");\r\n                                // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\r\n                                items[i] = item;\r\n                                // 5. Set the state to our new copy\r\n                                setElement(items);\r\n                              }}\r\n                            >\r\n                              Add Tags\r\n                            </button>\r\n                          )}\r\n                      </div>\r\n                    )}\r\n\r\n                    {element &&\r\n                      element[i].category &&\r\n                      element[i].category === \"other\" &&\r\n                      element[i].categoryName !== null && (\r\n                        <div className={classes.Btn_Container}>\r\n                          <button\r\n                            onClick={(e) => {\r\n                              if (element[i].categoryName.length > 0) {\r\n                                createElementCategory({\r\n                                  category: element[i].categoryName,\r\n                                  sub_category:\r\n                                    element[i].subCategoryName || null,\r\n                                })\r\n                                  .then((data) => {\r\n                                    getAllElementCategories()\r\n                                      .then((data) => {\r\n                                        if (data.message) {\r\n                                          setCategory(data.categoryData);\r\n                                        }\r\n                                      })\r\n                                      .catch((err) => console.log(err));\r\n                                  })\r\n                                  .catch((err) => {\r\n                                    alert(\r\n                                      \"something went wrong, please try again\"\r\n                                    );\r\n                                  });\r\n                              } else if (\r\n                                element[i].categoryName.length < 1 &&\r\n                                element[i].subcategoryName.length > 0\r\n                              ) {\r\n                                createElementSubCategory({\r\n                                  id: element[i].category,\r\n                                  subcategory: element[i].subcategoryName,\r\n                                })\r\n                                  .then((data) => {\r\n                                    getAllElementCategories()\r\n                                      .then((data) => {\r\n                                        if (data.message) {\r\n                                          setCategory(data.categoryData);\r\n                                        }\r\n                                      })\r\n                                      .catch((err) => console.log(err));\r\n                                  })\r\n                                  .catch((err) => {\r\n                                    alert(\r\n                                      \"something went wrong, please try again\"\r\n                                    );\r\n                                  });\r\n                              }\r\n                            }}\r\n                          >\r\n                            Update Category\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            );\r\n          })}\r\n        <button\r\n          onClick={async () => {\r\n            let elements = [];\r\n            let el = await element.filter(\r\n              (e) => e.categoryName !== null && e.element_name !== null\r\n            );\r\n\r\n            if (el.length > 0) {\r\n              // Length of an elements array\r\n              const elLength = el.length;\r\n\r\n              // Looping over elements\r\n              await el.forEach(async (e, i) => {\r\n                e.subcategoryName = undefined;\r\n                e.subCategory = undefined;\r\n\r\n                // File name to be save in firebase storage\r\n                const elementName = `${uuid()}_${e.element_name}`;\r\n\r\n                // Creating an Image\r\n                let image = new Image();\r\n                image.src = e.src.svg;\r\n                image.crossOrigin = \"anonymous\";\r\n\r\n                var el = document.getElementById(\"canvas\");\r\n\r\n                // Loading an Image\r\n                image.onload = async function () {\r\n                  // Creating a canvas element\r\n                  var canvas = el.appendChild(\r\n                    el.ownerDocument.importNode(\r\n                      document.createElement(\"canvas\"),\r\n                      true\r\n                    )\r\n                  );\r\n                  canvas.width = e.width;\r\n                  canvas.height = e.height;\r\n\r\n                  var context = canvas.getContext(\"2d\");\r\n                  context.drawImage(image, 0, 0);\r\n\r\n                  // Converting canvas image to blob data type\r\n                  canvas.toBlob(\r\n                    async (blob) => {\r\n                      let bucketName = \"element-png\";\r\n                      let storageRef = firebase\r\n                        .storage()\r\n                        .ref(`${bucketName}/${elementName}.png`);\r\n\r\n                      await storageRef.put(blob).then(async (path) => {\r\n                        await storageRef.getDownloadURL().then(async (url) => {\r\n                          // setting the url of image to an array of elements\r\n                          e.src.png = url;\r\n                          // Pushing all elements to new array\r\n                          elements.push(e);\r\n                          // Removing canvas after getting URL from Firebase\r\n                          canvas.remove();\r\n                          if (elements.length === elLength) {\r\n                            // Storing all valid elements to database.\r\n                            storeElements(elements)\r\n                              .then(\r\n                                (data) =>\r\n                                  // Redirecting to new URL where the list of template and elements which user has uploaded ever since will be shown\r\n                                  (window.location.href =\r\n                                    \"/template/upload/finish\")\r\n                              )\r\n                              .catch((err) => alert(\"something went wrong\"));\r\n                          }\r\n                        });\r\n                      });\r\n                    },\r\n                    { type: \"image/png\" },\r\n                    1\r\n                  );\r\n                };\r\n              });\r\n            } else {\r\n              alert(\"you haven't saved any elements yet!\");\r\n            }\r\n          }}\r\n        >\r\n          save all elements\r\n        </button>\r\n      </main>\r\n\r\n      {/* Canvas where  all the images will be shown */}\r\n      <div id=\"canvas\"></div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TemplateSuccess;\r\n"],"sourceRoot":""}