{"version":3,"file":"static/js/7986.d871a629.chunk.js","mappings":"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","sources":["Apis/ChatFlowApi.ts","Contexts/ChatFlowDashboard/FlowDrawerProvider.tsx","Contexts/ChatFlowDashboard/FlowHistoryProvider.tsx","Hooks/ChatFlowDashboard/useHistory.ts","Contexts/ChatFlowDashboard/FlowDataProvider.tsx","Utils/UniqueEntityID.ts","Utils/Identifier.ts","Services/ChatFlowService/NodeCopyService.ts","Shared/Enums/FlowEdge.ts","Contexts/ChatFlowDashboard/FlowServicesProvider.tsx","webpack://easysocial/./src/Components/ChatFlowDashboard/Dialogs/FlowDialog.module.css?a865","Components/ChatFlowDashboard/Dialogs/FlowDialog.tsx","Contexts/ChatFlowDashboard/FlowDialogProvider.tsx","Services/ChatFlowService/NodeModelService.ts","Contexts/ChatFlowDashboard/FlowNodeServicesProvider.tsx","Shared/Enums/ChatFlowMsgEnum.ts","Shared/Enums/ChatFlowNodeEnum.ts","Shared/Enums/OptionType.ts","Utils/Axios.ts","Utils/index.ts"],"sourcesContent":["import { ChatFlowSettingInterface } from \"Shared/Interfaces/ChatFlowSettingInterface\";\r\nimport { AuthenticatedReq } from \"Utils/Axios\";\r\n\r\nexport default class ChatFlowApi {\r\n  public static getAllDataFields = async () => {\r\n    return await AuthenticatedReq(`/lead-data-fields`, \"GET\");\r\n  };\r\n\r\n  public static createLeadDataField = async (data: any) => {\r\n    return await AuthenticatedReq(`/lead-data-fields/`, \"POST\", { data });\r\n  };\r\n\r\n  public static getChatFlowData = async (chatflow_id: string) => {\r\n    return await AuthenticatedReq(`/chatflow/${chatflow_id}`, \"GET\");\r\n  };\r\n\r\n  public static putChatFlowSettings = async (\r\n    chatflow_id: string,\r\n    data: ChatFlowSettingInterface\r\n  ) => {\r\n    return await AuthenticatedReq(`/chatbots/${chatflow_id}`, \"PUT\", { data });\r\n  };\r\n\r\n  public static putChatFlowData = async (chatflow_id: string, data: any) => {\r\n    return await AuthenticatedReq(`/chatflow/save-data/${chatflow_id}`, \"PUT\", {\r\n      data,\r\n    });\r\n  };\r\n}\r\n","import { createContext, FC, useContext, useState } from \"react\";\r\nimport { FlowDrawerContextState } from \"./types\";\r\n\r\nexport const FlowDrawerContext = createContext<\r\n  FlowDrawerContextState | undefined\r\n>(undefined);\r\n\r\nexport const useFlowDrawer = () => {\r\n  let context = useContext(FlowDrawerContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of a Object, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nexport enum CurrentDrawerModes {\r\n  MENU = \"MENU\",\r\n  NODE = \"NODE\",\r\n  SETTING = \"SETTING\",\r\n}\r\n\r\nconst FlowDrawerProvider: FC<any> = ({ children }) => {\r\n  const [isDrawerOpen, setDrawerOpen] = useState(true);\r\n\r\n  const [currentDrawerMode, setCurrentDrawerMode] =\r\n    useState<CurrentDrawerModes>(CurrentDrawerModes.MENU);\r\n\r\n  return (\r\n    <FlowDrawerContext.Provider\r\n      value={{\r\n        isDrawerOpen,\r\n        setDrawerOpen,\r\n        currentDrawerMode,\r\n        setCurrentDrawerMode,\r\n      }}\r\n    >\r\n      {children}\r\n    </FlowDrawerContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FlowDrawerProvider;\r\n","import { useHistory } from \"Hooks/ChatFlowDashboard/useHistory\";\r\nimport React, { FC, useContext } from \"react\";\r\nimport { FlowHistoryContextType } from \"./types\";\r\n\r\nexport const FlowHistoryContext = React.createContext<\r\n  FlowHistoryContextType | undefined\r\n>(undefined);\r\n\r\nexport const useFlowHistory = () => {\r\n  let context = useContext(FlowHistoryContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of a Object, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nconst FlowHistoryProvider: FC<any> = ({ children }) => {\r\n  const {\r\n    history,\r\n    setHistory,\r\n    historyIndex,\r\n    setHistoryIndex,\r\n    resetHistory,\r\n    saveHistory,\r\n    canUndo,\r\n    undo,\r\n    canRedo,\r\n    redo,\r\n  } = useHistory();\r\n\r\n  return (\r\n    <FlowHistoryContext.Provider\r\n      value={{\r\n        history,\r\n        setHistory,\r\n        historyIndex,\r\n        setHistoryIndex,\r\n        resetHistory,\r\n        saveHistory,\r\n        canUndo,\r\n        undo,\r\n        canRedo,\r\n        redo,\r\n      }}\r\n    >\r\n      {children}\r\n    </FlowHistoryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FlowHistoryProvider;\r\n","import { useMemo, useState } from \"react\";\r\nimport { ChatFlowHistoryInterface } from \"Shared/Interfaces/ChatFlowHistoryInterface\";\r\n\r\nexport const useHistory = () => {\r\n  const [history, setHistory] = useState<ChatFlowHistoryInterface[]>([]);\r\n  const [historyIndex, setHistoryIndex] = useState<number>(-1);\r\n\r\n  const saveHistory = (state: ChatFlowHistoryInterface) => {\r\n    setHistory([...history.slice(0, historyIndex + 1), state]);\r\n    setHistoryIndex(historyIndex + 1);\r\n  };\r\n\r\n  const resetHistory = () => {\r\n    setHistory([]);\r\n    setHistoryIndex(-1);\r\n  };\r\n\r\n  const canUndo = useMemo(\r\n    () => history.length > 0 && historyIndex > 0,\r\n    [history, historyIndex]\r\n  );\r\n\r\n  const canRedo = useMemo(\r\n    () => history.length > 0 && historyIndex < history.length - 1,\r\n    [history, historyIndex]\r\n  );\r\n\r\n  const undo = () => {\r\n    if (!canUndo) return;\r\n    if (historyIndex === 0) return;\r\n    setHistoryIndex(historyIndex - 1);\r\n  };\r\n\r\n  const redo = () => {\r\n    if (!canRedo) return;\r\n    if (historyIndex === history.length - 1) return;\r\n    setHistoryIndex(historyIndex + 1);\r\n  };\r\n\r\n  return {\r\n    history,\r\n    setHistory,\r\n    historyIndex,\r\n    setHistoryIndex,\r\n    resetHistory,\r\n    saveHistory,\r\n    canUndo,\r\n    undo,\r\n    canRedo,\r\n    redo,\r\n  };\r\n};\r\n","import { createContext, FC, useContext, useEffect, useState } from \"react\";\r\nimport { Node, useEdgesState } from \"react-flow-renderer\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { ChatFlowSettingInterface } from \"Shared/Interfaces/ChatFlowSettingInterface\";\r\nimport { ChatFlowMsg } from \"Shared/Interfaces/ChatFlowMsgInterface\";\r\nimport { ChatFlowNode } from \"Shared/Interfaces/ChatFlowNodeInterface\";\r\nimport { FlowDataContextState } from \"./types\";\r\nimport { useSnacks } from \"Contexts/Snack\";\r\nimport { useFlowHistory } from \"Contexts/ChatFlowDashboard\";\r\nimport { IDataFields } from \"Shared/Interfaces/LeadDataFieldsInterface\";\r\nimport ChatFlowApi from \"Apis/ChatFlowApi\";\r\n\r\nexport const FlowDataContext = createContext<FlowDataContextState | undefined>(\r\n  undefined\r\n);\r\n\r\nexport const useFlowData = () => {\r\n  const context = useContext(FlowDataContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of FlowDataProvider, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nconst FlowDataProvider: FC<any> = ({ children }) => {\r\n  const { chatflow_id } = useParams();\r\n  const { setErrorMessage, setSuccessMessage } = useSnacks();\r\n  const { resetHistory, saveHistory } = useFlowHistory();\r\n  // const [chatbot_id, setChatbotId] = useState(1);\r\n  const [reloadDrawer, setReloadDrawer] = useState(0);\r\n  const [refreshNode, setRefreshNode] = useState(0);\r\n  const [dataFields, setDataFields] = useState<IDataFields[]>([]);\r\n  const [editingData, toggleEditingData] = useState<boolean>(false);\r\n  const [nodes, setNodes] = useState<Node<any>[]>([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [chatMsgs, setChatMsgs] = useState<ChatFlowMsg.ChatFlowMsgInterface[]>(\r\n    []\r\n  );\r\n  const [copiedNode, setCopiedNode] = useState<\r\n    ChatFlowNode.ChatFlowNodeInterface | undefined\r\n  >();\r\n  const [copiedChatMsgs, setCopiedChatMsgs] = useState<\r\n    ChatFlowMsg.ChatFlowMsgInterface | undefined\r\n  >();\r\n  const [flowSettingsLoaded, setFlowSettingLoaded] = useState<boolean>(false);\r\n  const [flowSettings, setFlowSettings] = useState<ChatFlowSettingInterface>({\r\n    auto_reminder: {\r\n      response: { default_message: \"\", languages: [] },\r\n      status: false,\r\n      trigger_time: 30,\r\n      send_last_message: false,\r\n    },\r\n    disable_reply: false,\r\n    reset_session_in: 12,\r\n  });\r\n  const [currentMsgIndex, setCurrentMsgIndex] = useState<number | undefined>(\r\n    undefined\r\n  );\r\n  const [currentNodeIndex, setCurrentNodeIndex] = useState<number | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const addChatMsg = (\r\n    msg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    newNodes: Node<any>[]\r\n  ) => {\r\n    const newChatMsgs: ChatFlowMsg.ChatFlowMsgInterface[] =\r\n      chatMsgs.concat(msg);\r\n    setChatMsgs(newChatMsgs);\r\n    setCurrentMsgIndex(chatMsgs.length);\r\n    saveHistory({ nodes: newNodes, edges, chatMsgs: newChatMsgs });\r\n  };\r\n\r\n  const clearSelectedMsg = () => {\r\n    setCurrentMsgIndex(undefined);\r\n  };\r\n\r\n  const onClickChatMsg = (id: string) => {\r\n    const current = chatMsgs.findIndex((msg) => msg.id === id);\r\n    if (current === -1) return;\r\n    setCurrentMsgIndex(current);\r\n  };\r\n\r\n  const OnChatMsgUpdate = (\r\n    current_msg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    index?: number\r\n  ) => {\r\n    const isIndex = typeof index === \"number\";\r\n    const currentIndex = typeof currentMsgIndex === \"number\";\r\n\r\n    if (isIndex) {\r\n      // setCurrentChatMsg(current_msg);\r\n      const newChatMsgs: ChatFlowMsg.ChatFlowMsgInterface[] = chatMsgs;\r\n      newChatMsgs[index] = current_msg;\r\n      setChatMsgs(newChatMsgs);\r\n      // saveHistory({ nodes, edges, chatMsgs: newChatMsgs });\r\n    } else if (currentIndex) {\r\n      const newChatMsgs: ChatFlowMsg.ChatFlowMsgInterface[] = chatMsgs;\r\n      newChatMsgs[currentMsgIndex] = current_msg;\r\n      setChatMsgs(newChatMsgs);\r\n      // saveHistory({ nodes, edges, chatMsgs: newChatMsgs });\r\n    }\r\n  };\r\n\r\n  const onChatMsgDelete = (index: number, newNodes: Node<any>[]) => {\r\n    const newChatMsgs: ChatFlowMsg.ChatFlowMsgInterface[] = chatMsgs;\r\n    newChatMsgs.splice(index, 1);\r\n    setChatMsgs(newChatMsgs);\r\n    saveHistory({ nodes: newNodes, edges, chatMsgs: newChatMsgs });\r\n    clearSelectedMsg();\r\n  };\r\n\r\n  const saveChatFlowData = async () => {\r\n    try {\r\n      if (chatflow_id) {\r\n        const res = await ChatFlowApi.putChatFlowData(chatflow_id, {\r\n          edges,\r\n          nodes,\r\n          msgs: chatMsgs,\r\n        });\r\n\r\n        if (!res.success) {\r\n          throw Error(res.message);\r\n        }\r\n        setSuccessMessage(res.message);\r\n      }\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  const fetchChatFlowData = async () => {\r\n    try {\r\n      if (chatflow_id) {\r\n        const res = await ChatFlowApi.getChatFlowData(chatflow_id);\r\n        if (!res.success) {\r\n          throw Error(res.message);\r\n        }\r\n        resetHistory();\r\n        nodes.length < 1 && setNodes(res.payload.nodes);\r\n        edges.length < 1 && setEdges(res.payload.edges);\r\n        chatMsgs.length < 1 && setChatMsgs(res.payload.msgs);\r\n        res.payload.setting && setFlowSettings(res.payload.setting);\r\n        setFlowSettingLoaded(true);\r\n        saveHistory({\r\n          nodes: res.payload.nodes,\r\n          edges: res.payload.edges,\r\n          chatMsgs: res.payload.msgs,\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllDataFields = async () => {\r\n    try {\r\n      const res = await ChatFlowApi.getAllDataFields();\r\n      if (!res.success) {\r\n        throw Error(res.message);\r\n      }\r\n      setDataFields(res.payload);\r\n    } catch (error: any) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveHistory({ nodes, edges, chatMsgs });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <FlowDataContext.Provider\r\n      value={{\r\n        chatMsgs,\r\n        addChatMsg,\r\n        clearSelectedMsg,\r\n        onClickChatMsg,\r\n        OnChatMsgUpdate,\r\n        currentMsgIndex,\r\n        currentChatMsg:\r\n          typeof currentMsgIndex === \"number\"\r\n            ? chatMsgs[currentMsgIndex]\r\n            : undefined,\r\n        flowSettings,\r\n        setFlowSettings,\r\n        flowSettingsLoaded,\r\n        reloadDrawer,\r\n        setReloadDrawer,\r\n        refreshNode,\r\n        setRefreshNode,\r\n        onChatMsgDelete,\r\n        setChatMsgs,\r\n        currentNode:\r\n          typeof currentNodeIndex === \"number\"\r\n            ? (nodes[currentNodeIndex] as ChatFlowNode.ChatFlowNodeInterface)\r\n            : undefined,\r\n        currentNodeIndex,\r\n        edges,\r\n        nodes,\r\n        dataFields,\r\n        onEdgesChange,\r\n        setCurrentNodeIndex,\r\n        setEdges,\r\n        setNodes,\r\n        setDataFields,\r\n        saveChatFlowData,\r\n        fetchChatFlowData,\r\n        fetchAllDataFields,\r\n        copiedNode,\r\n        copiedChatMsgs,\r\n        setCopiedNode,\r\n        setCopiedChatMsgs,\r\n        editingData,\r\n        toggleEditingData,\r\n      }}\r\n    >\r\n      {children}\r\n    </FlowDataContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FlowDataProvider;\r\n","import { v4 as uuid } from \"uuid\";\r\nimport { Identifier } from \"./Identifier\";\r\n\r\nexport class UniqueEntityID extends Identifier<string | number> {\r\n  equals(_id: UniqueEntityID): boolean {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  constructor(id?: string | number) {\r\n    const split = uuid().split(\"-\"); // [\"109156be\", \"c4fb\", \"41ea\", \"b1b4\", \"efe1671c5836\"]\r\n    const string = split.join(\"\"); // 109156bec4fb41eab1b4efe1671c5836\r\n    super(id ? id : string);\r\n  }\r\n}\r\n","export class Identifier<T> {\r\n  constructor(private value: T) {\r\n    this.value = value;\r\n  }\r\n\r\n  equals(id?: Identifier<T>): boolean {\r\n    if (id === null || id === undefined) {\r\n      return false;\r\n    }\r\n    if (!(id instanceof this.constructor)) {\r\n      return false;\r\n    }\r\n    return id.toValue() === this.value;\r\n  }\r\n\r\n  toString() {\r\n    return String(this.value);\r\n  }\r\n\r\n  /**\r\n   * Return raw value of identifier\r\n   */\r\n\r\n  toValue(): T {\r\n    return this.value;\r\n  }\r\n}\r\n","import { Node } from \"react-flow-renderer\";\r\nimport { HandleType } from \"Shared/Enums/ChatFlowNodeEnum\";\r\nimport { ChatFlowMsg } from \"Shared/Interfaces/ChatFlowMsgInterface\";\r\nimport { UniqueEntityID } from \"Utils/UniqueEntityID\";\r\n\r\nexport class NodeCopy {\r\n  private static commonNewNode = (\r\n    node: Node,\r\n    newId: string,\r\n    copySourceHandles: boolean = true\r\n  ): Node => ({\r\n    ...node,\r\n    id: newId,\r\n    data: {\r\n      ...node.data,\r\n      nodeDataLabel: undefined,\r\n      handles: copySourceHandles\r\n        ? node.data.handles.map((handle: any) => ({\r\n            ...handle,\r\n            id: new UniqueEntityID().toString(),\r\n          }))\r\n        : node.data.handles.filter(\r\n            (handle: any) => handle.type === HandleType.TARGET\r\n          ),\r\n    },\r\n  });\r\n\r\n  private static newSourceHandles = (node: Node) =>\r\n    node.data.handles.filter(\r\n      (handle: any) => handle.type === HandleType.SOURCE\r\n    );\r\n\r\n  public static CommonCopy = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => ({\r\n    newNode: this.commonNewNode(node, newId),\r\n    newChatMsg: {\r\n      ...chatMsg,\r\n      id: newId,\r\n      trigger_id: undefined,\r\n      msg_settings: {\r\n        ...chatMsg.msg_settings,\r\n        is_first_msg: false,\r\n        is_last_msg: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  public static Message100 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        trigger_id: undefined,\r\n        options: chatMsg.options?.map((option, i) => ({\r\n          ...option,\r\n          id: sourceHandles[i].id,\r\n        })),\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message101 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        options: chatMsg.options?.map((option, i) => ({\r\n          ...option,\r\n          id: sourceHandles[i].id,\r\n          trigger_id: undefined,\r\n        })),\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message108 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        ...(chatMsg.condition\r\n          ? {\r\n              condition: {\r\n                ...chatMsg.condition,\r\n                conditions: chatMsg.condition.conditions?.map(\r\n                  (condition, i) => ({\r\n                    ...condition,\r\n                    id: sourceHandles[i].id,\r\n                    trigger_id: undefined,\r\n                  })\r\n                ),\r\n              },\r\n            }\r\n          : {}),\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message109 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        ...(chatMsg.condition\r\n          ? {\r\n              condition: {\r\n                ...chatMsg.condition,\r\n                conditions: chatMsg.condition.conditions.map(\r\n                  (condition, i) => ({\r\n                    ...condition,\r\n                    id: sourceHandles[i].id,\r\n                    trigger_id: undefined,\r\n                  })\r\n                ),\r\n              },\r\n            }\r\n          : {}),\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message110 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        ...(chatMsg.action\r\n          ? {\r\n              action: {\r\n                buttons: chatMsg.action.buttons?.map((button, i) => ({\r\n                  ...button,\r\n                  button_id: sourceHandles[i].id,\r\n                  trigger_id: undefined,\r\n                })),\r\n              },\r\n            }\r\n          : {}),\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message111 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId, false);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        action: {\r\n          ...chatMsg.action,\r\n          sections: [],\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  public static Message112 = (\r\n    chatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    node: Node,\r\n    newId: string\r\n  ): {\r\n    newNode: Node;\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface;\r\n  } => {\r\n    const newNode = this.commonNewNode(node, newId);\r\n    const sourceHandles = this.newSourceHandles(newNode);\r\n    return {\r\n      newNode,\r\n      newChatMsg: {\r\n        ...chatMsg,\r\n        id: newId,\r\n        ...(chatMsg.condition\r\n          ? {\r\n              condition: {\r\n                ...chatMsg.condition,\r\n                conditions: chatMsg.condition.conditions.map(\r\n                  (condition, i) => ({\r\n                    ...condition,\r\n                    id: sourceHandles[i].id,\r\n                    trigger_id: undefined,\r\n                  })\r\n                ),\r\n              },\r\n            }\r\n          : {}),\r\n      },\r\n    };\r\n  };\r\n}\r\n","export enum FlowEdge {\r\n  BEZIER = \"bezier\",\r\n  STRAIGHT = \"straight\",\r\n  STEP = \"step\",\r\n  SMOOTHSTEP = \"smoothstep\",\r\n}\r\n","import { createContext, FC, memo, useContext, useEffect } from \"react\";\r\nimport { getRandomColor } from \"Utils\";\r\nimport { useFlowData } from \"./FlowDataProvider\";\r\nimport {\r\n  AddOptionProps,\r\n  FlowServicesContextState,\r\n  RemoveOptionProps,\r\n} from \"./types\";\r\nimport { HandlePosition, HandleType } from \"Shared/Enums/ChatFlowNodeEnum\";\r\nimport { ChatFlowNode } from \"Shared/Interfaces/ChatFlowNodeInterface\";\r\nimport { UniqueEntityID } from \"Utils/UniqueEntityID\";\r\nimport { OptionType } from \"Shared/Enums/OptionType\";\r\nimport { NodeCopy } from \"Services/ChatFlowService/NodeCopyService\";\r\nimport { ChatFlowMsg } from \"Shared/Interfaces/ChatFlowMsgInterface\";\r\nimport { Node } from \"react-flow-renderer\";\r\nimport { MessageType } from \"Shared/Enums/ChatFlowMsgEnum\";\r\nimport { useFlowHistory } from \"Contexts/ChatFlowDashboard\";\r\n\r\nexport const FlowServicesContext = createContext<\r\n  FlowServicesContextState | undefined\r\n>(undefined);\r\n\r\nexport const useFlowServices = () => {\r\n  let context = useContext(FlowServicesContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of a Object, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nconst FlowServicesProvider: FC<any> = ({ children }) => {\r\n  const { history, historyIndex, saveHistory } = useFlowHistory();\r\n  const {\r\n    currentMsgIndex,\r\n    chatMsgs,\r\n    setReloadDrawer,\r\n    setRefreshNode,\r\n    currentNodeIndex,\r\n    currentNode,\r\n    currentChatMsg,\r\n    edges,\r\n    nodes,\r\n    setEdges,\r\n    setNodes,\r\n    setChatMsgs,\r\n    copiedChatMsgs,\r\n    copiedNode,\r\n    setCopiedNode,\r\n    setCopiedChatMsgs,\r\n  } = useFlowData();\r\n\r\n  const addOption = ({ type, index, makeHandle = false }: AddOptionProps) => {\r\n    const currentChatMsg =\r\n      typeof currentMsgIndex === \"number\" && chatMsgs[currentMsgIndex];\r\n    const currentNode =\r\n      typeof currentNodeIndex === \"number\"\r\n        ? (nodes[currentNodeIndex] as ChatFlowNode.ChatFlowNodeInterface)\r\n        : undefined;\r\n\r\n    if (!currentNode || !currentChatMsg) return;\r\n\r\n    const random_color = getRandomColor();\r\n    const option_id = new UniqueEntityID().toString(); //Date.now().toString();\r\n    // const new_id = new UniqueEntityID().toString();\r\n    // const current_id = currentNode.id;\r\n\r\n    if (makeHandle) {\r\n      if (type === OptionType.CONDITION) {\r\n        currentNode.data.handles?.unshift({\r\n          type: HandleType.SOURCE,\r\n          id: option_id,\r\n          position: HandlePosition.BOTTOM,\r\n          style: { border: `1px solid ${random_color}` },\r\n        });\r\n      } else {\r\n        currentNode.data.handles?.push({\r\n          type: HandleType.SOURCE,\r\n          id: option_id,\r\n          position: HandlePosition.BOTTOM,\r\n          style: { border: `1px solid ${random_color}` },\r\n        });\r\n      }\r\n    }\r\n\r\n    switch (type) {\r\n      case OptionType.OPTION:\r\n        currentChatMsg.options?.push({\r\n          label: \"\",\r\n          id: option_id,\r\n          value: \"\",\r\n          style: { border: `2px solid ${random_color}` },\r\n        });\r\n        break;\r\n      case OptionType.BUTTON:\r\n        currentChatMsg.action &&\r\n          currentChatMsg.action.buttons?.push({\r\n            button_id: option_id,\r\n            title: \"\",\r\n            type: \"reply\",\r\n            style: { border: `2px solid ${random_color}` },\r\n          });\r\n        break;\r\n      case OptionType.LIST_SECTION:\r\n        currentChatMsg.action &&\r\n          currentChatMsg.action.sections?.push({\r\n            id: option_id,\r\n            title: \"\",\r\n            rows: [],\r\n          });\r\n        break;\r\n      case OptionType.LIST_SECTION_ITEM:\r\n        currentChatMsg.action &&\r\n          index !== undefined &&\r\n          currentChatMsg.action.sections &&\r\n          currentChatMsg.action.sections[index].rows.push({\r\n            id: option_id,\r\n            title: \"\",\r\n            description: \"\",\r\n            style: { borderLeft: `4px solid ${random_color}` },\r\n          });\r\n        break;\r\n      case OptionType.CONDITION:\r\n        currentChatMsg.condition &&\r\n          currentChatMsg.condition.conditions &&\r\n          currentChatMsg.condition.conditions.unshift({\r\n            id: option_id,\r\n            values: \"\",\r\n            removable: true,\r\n            style: { border: `2px solid ${random_color}` },\r\n          });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    setReloadDrawer((prev) => (prev += 1));\r\n    makeHandle && setRefreshNode((prev) => (prev += 1));\r\n  };\r\n\r\n  const removeOption = ({\r\n    type,\r\n    removeHandle = false,\r\n    id,\r\n    index,\r\n  }: RemoveOptionProps) => {\r\n    const currentChatMsg =\r\n      typeof currentMsgIndex === \"number\" && chatMsgs[currentMsgIndex];\r\n    const currentNode =\r\n      typeof currentNodeIndex === \"number\"\r\n        ? (nodes[currentNodeIndex] as ChatFlowNode.ChatFlowNodeInterface)\r\n        : undefined;\r\n\r\n    if (!currentNode || !currentChatMsg) return;\r\n\r\n    if (removeHandle) {\r\n      const optionIndex = currentNode.data.handles.findIndex(\r\n        (e) => e.id === id\r\n      );\r\n      optionIndex !== -1 && currentNode.data.handles.splice(optionIndex, 1);\r\n    }\r\n\r\n    if (type === OptionType.LIST_SECTION) {\r\n      currentChatMsg.action &&\r\n        index !== undefined &&\r\n        currentChatMsg.action.sections &&\r\n        currentChatMsg.action.sections[index].rows?.forEach((row) => {\r\n          const optionIndex = currentNode.data.handles.findIndex(\r\n            (e) => e.id === row.id\r\n          );\r\n          optionIndex !== -1 && currentNode.data.handles.splice(optionIndex, 1);\r\n        });\r\n    }\r\n\r\n    switch (type) {\r\n      case OptionType.OPTION:\r\n        const optionIndex = currentChatMsg.options?.findIndex(\r\n          (e) => e.id === id\r\n        );\r\n\r\n        typeof optionIndex === \"number\" &&\r\n          currentChatMsg.options?.splice(optionIndex, 1);\r\n        break;\r\n      case OptionType.BUTTON:\r\n        const buttonIndex =\r\n          currentChatMsg.action &&\r\n          currentChatMsg.action.buttons?.findIndex((e) => e.button_id === id);\r\n\r\n        typeof buttonIndex === \"number\" &&\r\n          currentChatMsg.action &&\r\n          currentChatMsg.action.buttons?.splice(buttonIndex, 1);\r\n        break;\r\n      case OptionType.LIST_SECTION:\r\n        const sectionIndex =\r\n          currentChatMsg.action &&\r\n          currentChatMsg.action.sections?.findIndex((e) => e.id === id);\r\n\r\n        typeof sectionIndex === \"number\" &&\r\n          currentChatMsg.action &&\r\n          currentChatMsg.action.sections?.splice(sectionIndex, 1);\r\n        break;\r\n      case OptionType.LIST_SECTION_ITEM:\r\n        const rowIndex =\r\n          currentChatMsg.action &&\r\n          index !== undefined &&\r\n          currentChatMsg.action.sections &&\r\n          currentChatMsg.action.sections[index].rows.findIndex(\r\n            (e) => e.id === id\r\n          );\r\n\r\n        typeof rowIndex === \"number\" &&\r\n          currentChatMsg.action &&\r\n          index !== undefined &&\r\n          currentChatMsg.action.sections &&\r\n          currentChatMsg.action.sections[index].rows?.splice(rowIndex, 1);\r\n        break;\r\n      case OptionType.CONDITION:\r\n        const conditionIndex =\r\n          currentChatMsg.condition &&\r\n          currentChatMsg.condition.conditions?.findIndex((e) => e.id === id);\r\n\r\n        typeof conditionIndex === \"number\" &&\r\n          currentChatMsg.condition &&\r\n          currentChatMsg.condition.conditions?.splice(conditionIndex, 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setReloadDrawer((prev) => (prev += 1));\r\n    removeHandle && setRefreshNode((prev) => (prev += 1));\r\n  };\r\n\r\n  const addCopiedNode = (\r\n    newNode: Node,\r\n    newChatMsg: ChatFlowMsg.ChatFlowMsgInterface\r\n  ) => {\r\n    if (!newNode || !newChatMsg) {\r\n      return;\r\n    }\r\n    const newChatMsgs: ChatFlowMsg.ChatFlowMsgInterface[] =\r\n      chatMsgs.concat(newChatMsg);\r\n    setChatMsgs(newChatMsgs);\r\n    const newNodes: Node<any>[] = nodes.concat({\r\n      ...newNode,\r\n      position: {\r\n        x: newNode.position.x + 50,\r\n        y: newNode.position.y + 50,\r\n      },\r\n    });\r\n    setNodes(newNodes);\r\n    saveHistory({ nodes: newNodes, edges, chatMsgs: newChatMsgs });\r\n  };\r\n\r\n  const getCopiedNode = (\r\n    messageType: MessageType,\r\n    newId: string,\r\n    currentChatMsg: ChatFlowMsg.ChatFlowMsgInterface,\r\n    currentNode: any\r\n  ): { newNode: Node; newChatMsg: ChatFlowMsg.ChatFlowMsgInterface } => {\r\n    switch (messageType) {\r\n      case MessageType.TYPE100:\r\n        return NodeCopy.Message100(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE101:\r\n        return NodeCopy.Message101(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE102:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE103:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE104:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE105:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE107:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE108:\r\n        return NodeCopy.Message108(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE109:\r\n        return NodeCopy.Message109(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE110:\r\n        return NodeCopy.Message110(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE111:\r\n        return NodeCopy.Message111(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE112:\r\n        return NodeCopy.Message112(currentChatMsg, currentNode, newId);\r\n      case MessageType.TYPE113:\r\n        return NodeCopy.CommonCopy(currentChatMsg, currentNode, newId);\r\n    }\r\n  };\r\n\r\n  const copyNode = () => {\r\n    if (currentChatMsg && currentNode) {\r\n      setCopiedNode(currentNode);\r\n      setCopiedChatMsgs(currentChatMsg);\r\n    }\r\n  };\r\n\r\n  const pasteNode = () => {\r\n    if (copiedChatMsgs && copiedNode) {\r\n      const messageType: MessageType = copiedChatMsgs.type;\r\n      const newId = new UniqueEntityID().toString();\r\n      const { newNode, newChatMsg } = getCopiedNode(\r\n        messageType,\r\n        newId,\r\n        copiedChatMsgs,\r\n        copiedNode\r\n      );\r\n      if (newNode && newChatMsg) {\r\n        addCopiedNode(newNode, newChatMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const duplicateNode = () => {\r\n    if (currentChatMsg && currentNode) {\r\n      const messageType: MessageType = currentChatMsg.type;\r\n      const newId = new UniqueEntityID().toString();\r\n      const { newNode, newChatMsg } = getCopiedNode(\r\n        messageType,\r\n        newId,\r\n        currentChatMsg,\r\n        currentNode\r\n      );\r\n      if (newNode && newChatMsg) {\r\n        addCopiedNode(newNode, newChatMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (history[historyIndex]) {\r\n      setNodes(history[historyIndex].nodes);\r\n      setEdges(history[historyIndex].edges);\r\n      setChatMsgs(history[historyIndex].chatMsgs);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [historyIndex]);\r\n\r\n  return (\r\n    <FlowServicesContext.Provider\r\n      value={{\r\n        addOption,\r\n        removeOption,\r\n        copyNode,\r\n        pasteNode,\r\n        duplicateNode,\r\n      }}\r\n    >\r\n      {children}\r\n    </FlowServicesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default memo(FlowServicesProvider);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"DialogContentTextRoot\":\"FlowDialog_DialogContentTextRoot__mktDI\",\"DialogActions\":\"FlowDialog_DialogActions__k5eNV\",\"Reset\":\"FlowDialog_Reset__SDkQw\",\"Save\":\"FlowDialog_Save__AxHhg\"};","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@mui/material\";\r\nimport React, { FC } from \"react\";\r\nimport classes from \"./FlowDialog.module.css\";\r\n\r\ninterface FlowDialogProps {\r\n  appearance?: \"alert\" | \"warning\";\r\n  header?: React.ReactElement | string;\r\n  message?: React.ReactElement | string;\r\n  show: boolean;\r\n  onClose: () => void;\r\n  onConfirm?: () => void;\r\n}\r\n\r\nconst FlowDialog: FC<FlowDialogProps> = ({\r\n  show,\r\n  appearance,\r\n  header,\r\n  message,\r\n  onClose,\r\n  onConfirm,\r\n}) => {\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"xs\"\r\n      open={show}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{header || \"No Header\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText\r\n          classes={{ root: classes.DialogContentTextRoot }}\r\n          id=\"alert-dialog-description\"\r\n        >\r\n          {message || \"\"}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions className={classes.DialogActions}>\r\n        {appearance !== \"alert\" && (\r\n          <Button\r\n            onClick={() => {\r\n              onClose();\r\n            }}\r\n            className={classes.Reset}\r\n          >\r\n            cancel\r\n          </Button>\r\n        )}\r\n        <Button\r\n          onClick={() => {\r\n            onConfirm && onConfirm();\r\n            onClose();\r\n          }}\r\n          className={classes.Save}\r\n        >\r\n          Continue\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default FlowDialog;\r\n","import React, { ReactElement, useContext, useState } from \"react\";\r\nimport FlowDialog from \"../../Components/ChatFlowDashboard/Dialogs/FlowDialog\";\r\nimport { FlowDialogContextType } from \"./types\";\r\n\r\nexport const FlowDialogContext = React.createContext<\r\n  FlowDialogContextType | undefined\r\n>(undefined);\r\n\r\nexport const useFlowDialog = () => {\r\n  let context = useContext(FlowDialogContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of a Object, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nconst DialogProvider: React.FC<any> = ({ children }) => {\r\n  const [dialogState, setDialogState] = useState<{\r\n    type?: \"warning\" | \"alert\";\r\n    header?: React.ReactElement | string;\r\n    message?: React.ReactElement | string;\r\n    onConfirm?: () => void;\r\n    show: boolean;\r\n  }>({\r\n    show: false,\r\n  });\r\n\r\n  const openWarningDialog = (\r\n    message: ReactElement | string,\r\n    header: string,\r\n    onConfirm?: () => void\r\n  ) => {\r\n    return setDialogState({\r\n      type: \"warning\",\r\n      header: header || \"Warning\",\r\n      message: message,\r\n      onConfirm,\r\n      show: true,\r\n    });\r\n  };\r\n\r\n  const openAlertDialog = (message: ReactElement | string, header?: string) => {\r\n    return setDialogState({\r\n      type: \"alert\",\r\n      header: header || \"Action not permitted\",\r\n      message: message,\r\n      show: true,\r\n    });\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogState({\r\n      ...dialogState,\r\n      show: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FlowDialogContext.Provider value={{ openAlertDialog, openWarningDialog }}>\r\n      <FlowDialog\r\n        onConfirm={dialogState.onConfirm}\r\n        onClose={closeDialog}\r\n        show={dialogState.show}\r\n        message={dialogState.message}\r\n        appearance={dialogState.type}\r\n        header={dialogState.header}\r\n      />\r\n      {children}\r\n    </FlowDialogContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DialogProvider;\r\n","import {\n  ConditionType,\n  HeaderType,\n  IF_ELSE_TYPES,\n  LocationType,\n  MediaProvider,\n  ValidationType,\n} from \"Shared/Enums/ChatFlowMsgEnum\";\nimport { HandlePosition, HandleType } from \"Shared/Enums/ChatFlowNodeEnum\";\nimport { ChatFlowMsg } from \"Shared/Interfaces/ChatFlowMsgInterface\";\nimport { ChatFlowNode } from \"Shared/Interfaces/ChatFlowNodeInterface\";\nimport { UniqueEntityID } from \"Utils/UniqueEntityID\";\n\nexport default class NodeModelService {\n  private error_msg: string;\n  constructor(\n    private id: string,\n    private type: number,\n    private position: { x: number; y: number },\n    private label: any,\n    private className?: string,\n    private title?: string\n  ) {\n    this.error_msg =\n      \"⚠️ Please enter valid input!\\n\\n🔁 Reply 0️⃣ to go back to main menu\\n\\n🔁 Reply #️⃣ to go back\";\n  }\n\n  protected get common_msg_settings() {\n    return {\n      assign_rules: false,\n      resend_on_error: true,\n      is_first_msg: false,\n      is_last_msg: false,\n      data_field: \"\",\n      disable_auto_reminder: false,\n      jump: false,\n      response_type: \"\",\n      save_input: false,\n      skip_on_back: false,\n    };\n  }\n  protected get common_chat_msg() {\n    return {\n      id: this.id,\n      type: this.type,\n      title: this.title || \"\",\n      msg_settings: this.common_msg_settings,\n    };\n  }\n\n  protected get common_node() {\n    return {\n      id: this.id,\n      type: \"customDefault\",\n      position: this.position,\n      className: this.className || \"parent\",\n    };\n  }\n\n  protected get Type100Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Interactive Text Response\",\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      options: [],\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type101Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Interactive Text Response - Branched\",\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      options: [],\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type102Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Basic Message\",\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      options: [],\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type103Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Geo Location\",\n      location_msg: {\n        type: LocationType.MAP,\n      },\n      error_msg: this.error_msg,\n      options: [],\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type104Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Document\",\n      header: {\n        media_provider: MediaProvider.UPLOAD,\n        type: HeaderType.FILE,\n        uploaded_files: [],\n        api_url: \"\",\n        filename: \"\",\n      },\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      options: [],\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type105Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"API Basic Message\",\n      api_url: \"\",\n      pre_msg: \"\",\n      post_msg: \"\",\n      error_msg: this.error_msg,\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type107Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"API Interactive Messages\",\n      api_url: \"\",\n      pre_msg: \"\",\n      post_msg: \"\",\n      error_msg: this.error_msg,\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type108Msg() {\n    const Handle1Id = new UniqueEntityID().toString();\n    const Handle2Id = new UniqueEntityID().toString();\n\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"True or False Condition\",\n      condition: {\n        type: ConditionType.TRUE_FALSE,\n        conditions: [\n          {\n            id: Handle1Id,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n            removable: true,\n            data_field: \"\",\n          },\n          {\n            id: Handle2Id,\n            style: {\n              border: \"1px solid #AC5BC8\",\n            },\n            removable: false,\n          },\n        ],\n      },\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: Handle1Id,\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n          },\n          {\n            type: HandleType.SOURCE,\n            id: Handle2Id,\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #AC5BC8\",\n            },\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type109Msg() {\n    const Handle1Id = new UniqueEntityID().toString();\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"If and Else Condition\",\n      condition: {\n        type: ConditionType.IF_ELSE,\n        if_else_param_type: IF_ELSE_TYPES.USER_RESPONSE,\n        evaluate_data_field: \"\",\n        conditions: [\n          {\n            id: Handle1Id,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n            removable: false,\n          },\n        ],\n      },\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: Handle1Id,\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type110Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Interactive Button Response\",\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      action: { buttons: [] },\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type111Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"Interactive List Response\",\n      primary_msg: \"\",\n      error_msg: this.error_msg,\n      action: { button: \"\", sections: [] },\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type112Msg() {\n    const Handle1Id = new UniqueEntityID().toString();\n    const Handle2Id = new UniqueEntityID().toString();\n\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"API True or False\",\n      api_url: \"\",\n      condition: {\n        type: ConditionType.TRUE_FALSE,\n        conditions: [\n          {\n            id: Handle1Id,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n            removable: false,\n            validation_type: ValidationType.SUCCESS,\n          },\n          {\n            id: Handle2Id,\n            style: {\n              border: \"1px solid #c85b5b\",\n            },\n            removable: false,\n            validation_type: ValidationType.FAILURE,\n          },\n        ],\n      },\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: Handle1Id,\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n          },\n          {\n            type: HandleType.SOURCE,\n            id: Handle2Id,\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #c85b5b\",\n            },\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  protected get Type113Msg() {\n    const flow_msg: ChatFlowMsg.ChatFlowMsgInterface = {\n      ...this.common_chat_msg,\n      title: \"API Interactive List Response\",\n      primary_msg: \"\",\n      api_url: \"\",\n      error_msg: this.error_msg,\n    };\n\n    const flow_node: ChatFlowNode.ChatFlowNodeInterface = {\n      ...this.common_node,\n      data: {\n        label: this.label,\n        type: this.type,\n        handles: [\n          {\n            type: HandleType.TARGET,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.TOP,\n          },\n          {\n            type: HandleType.SOURCE,\n            id: new UniqueEntityID().toString(),\n            position: HandlePosition.BOTTOM,\n            style: {\n              border: \"1px solid #00c02a\",\n            },\n          },\n        ],\n      },\n    };\n\n    return { flow_msg, flow_node };\n  }\n\n  public get_node_data() {\n    switch (this.type) {\n      case 100:\n        return this.Type100Msg;\n      case 101:\n        return this.Type101Msg;\n      case 102:\n        return this.Type102Msg;\n      case 103:\n        return this.Type103Msg;\n      case 104:\n        return this.Type104Msg;\n      case 105:\n        return this.Type105Msg;\n      case 107:\n        return this.Type107Msg;\n      case 108:\n        return this.Type108Msg;\n      case 109:\n        return this.Type109Msg;\n      case 110:\n        return this.Type110Msg;\n      case 111:\n        return this.Type111Msg;\n      case 112:\n        return this.Type112Msg;\n      case 113:\n        return this.Type113Msg;\n      default:\n        return this.Type100Msg;\n    }\n  }\n}\n","import {\r\n  createContext,\r\n  CSSProperties,\r\n  FC,\r\n  useCallback,\r\n  useContext,\r\n} from \"react\";\r\nimport {\r\n  addEdge,\r\n  Edge,\r\n  Node,\r\n  OnEdgesDelete,\r\n  OnEdgeUpdateFunc,\r\n  OnNodesDelete,\r\n  updateEdge,\r\n  useKeyPress,\r\n} from \"react-flow-renderer\";\r\nimport NodeModelService from \"Services/ChatFlowService/NodeModelService\";\r\nimport { FlowEdge } from \"Shared/Enums/FlowEdge\";\r\nimport { UniqueEntityID } from \"Utils/UniqueEntityID\";\r\nimport { CurrentDrawerModes, useFlowDrawer } from \"./FlowDrawerProvider\";\r\nimport { useFlowData } from \"./FlowDataProvider\";\r\nimport { FlowNodeServicesContextState } from \"./types\";\r\nimport { NodeDataLabel } from \"Shared/Enums/ChatFlowNodeEnum\";\r\nimport { useFlowHistory } from \"Contexts/ChatFlowDashboard\";\r\n\r\nexport const FlowNodeServicesContext = createContext<\r\n  FlowNodeServicesContextState | undefined\r\n>(undefined);\r\n\r\nexport const useFlowNodeServices = () => {\r\n  let context = useContext(FlowNodeServicesContext);\r\n\r\n  // If context is undefined, we know we used RadioGroupItem\r\n  // outside of our provider so we can throw a more helpful\r\n  // error!\r\n  if (context === undefined) {\r\n    throw Error(\r\n      \"Item must be used inside of a Object, otherwise it will not function correctly.\"\r\n    );\r\n  }\r\n\r\n  // Because of TypeScript's type narrowing, if we make it past\r\n  // the error the compiler knows that context is always defined\r\n  // at this point, so we don't need to do any conditional\r\n  // checking on its values when we use this hook!\r\n  return context;\r\n};\r\n\r\nconst FlowNodeServicesProvider: FC<any> = ({ children }) => {\r\n  const { saveHistory } = useFlowHistory();\r\n  const { setCurrentDrawerMode } = useFlowDrawer();\r\n  const {\r\n    addChatMsg,\r\n    onClickChatMsg,\r\n    clearSelectedMsg,\r\n    currentChatMsg,\r\n    chatMsgs,\r\n    setReloadDrawer,\r\n    onChatMsgDelete,\r\n    edges,\r\n    setEdges,\r\n    nodes,\r\n    setNodes,\r\n    setCurrentNodeIndex,\r\n    currentNodeIndex,\r\n    setRefreshNode,\r\n    currentNode,\r\n  } = useFlowData();\r\n\r\n  const spacePressed = useKeyPress(\"Space\");\r\n\r\n  const dragOverFlow = useCallback((event: any) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  }, []);\r\n\r\n  const onEdgeConnect = (params: Edge) => {\r\n    const type = FlowEdge.SMOOTHSTEP;\r\n    if (params.source === params.target) return;\r\n\r\n    const chatMsg = chatMsgs.find((msg) => msg.id === params.source);\r\n    if (!chatMsg) return;\r\n\r\n    const style: CSSProperties = { strokeWidth: 3 };\r\n\r\n    switch (chatMsg.type) {\r\n      case 101:\r\n        for (const option of chatMsg.options || []) {\r\n          if (option.id !== params.sourceHandle) continue;\r\n          option.trigger_id = params.target;\r\n          const newEdges: Edge<any>[] = addEdge(\r\n            { ...params, type, style },\r\n            edges\r\n          );\r\n          setEdges(newEdges);\r\n          saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n          break;\r\n        }\r\n        break;\r\n      case 108:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== params.sourceHandle) continue;\r\n          condition.trigger_id = params.target;\r\n          const newEdges: Edge<any>[] = addEdge(\r\n            { ...params, type, style },\r\n            edges\r\n          );\r\n          setEdges(newEdges);\r\n          saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n          break;\r\n        }\r\n        break;\r\n      case 109:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== params.sourceHandle) continue;\r\n          condition.trigger_id = params.target;\r\n          const newEdges: Edge<any>[] = addEdge(\r\n            { ...params, type, style },\r\n            edges\r\n          );\r\n          setEdges(newEdges);\r\n          saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n          break;\r\n        }\r\n        break;\r\n      case 110:\r\n        for (const button of chatMsg.action?.buttons || []) {\r\n          if (button.button_id !== params.sourceHandle) continue;\r\n          button.trigger_id = params.target;\r\n          const newEdges: Edge<any>[] = addEdge(\r\n            { ...params, type, style },\r\n            edges\r\n          );\r\n          setEdges(newEdges);\r\n          saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n          break;\r\n        }\r\n        break;\r\n      case 111:\r\n        for (const section of chatMsg.action?.sections || []) {\r\n          for (const row of section.rows) {\r\n            if (row.id !== params.sourceHandle) continue;\r\n            row.trigger_id = params.target;\r\n            const newEdges: Edge<any>[] = addEdge(\r\n              { ...params, type, style },\r\n              edges\r\n            );\r\n            setEdges(newEdges);\r\n            saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case 112:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== params.sourceHandle) continue;\r\n          condition.trigger_id = params.target;\r\n          const newEdges: Edge<any>[] = addEdge(\r\n            { ...params, type, style },\r\n            edges\r\n          );\r\n          setEdges(newEdges);\r\n          saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n          break;\r\n        }\r\n        break;\r\n      default:\r\n        chatMsg.trigger_id = params.target;\r\n        const newEdges: Edge<any>[] = addEdge(\r\n          { ...params, type, style },\r\n          edges\r\n        );\r\n        setEdges(newEdges);\r\n        saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate: OnEdgeUpdateFunc = (OldEdge, newConnection) => {\r\n    const chatMsg = chatMsgs.find((msg) => msg.id === newConnection.source);\r\n    if (!chatMsg || !newConnection.target) return;\r\n    switch (chatMsg.type) {\r\n      case 101:\r\n        for (const option of chatMsg.options || []) {\r\n          if (option.id !== OldEdge.sourceHandle) continue;\r\n          option.trigger_id = newConnection.target;\r\n          break;\r\n        }\r\n        break;\r\n      case 108:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== OldEdge.sourceHandle) continue;\r\n          condition.trigger_id = newConnection.target;\r\n          break;\r\n        }\r\n        break;\r\n      case 109:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== OldEdge.sourceHandle) continue;\r\n          condition.trigger_id = newConnection.target;\r\n          break;\r\n        }\r\n        break;\r\n      case 110:\r\n        if (chatMsg.action) {\r\n          for (const button of chatMsg.action.buttons || []) {\r\n            if (button.button_id !== OldEdge.sourceHandle) continue;\r\n            button.trigger_id = newConnection.target;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case 111:\r\n        for (const button of chatMsg.action?.sections || []) {\r\n          for (const row of button.rows) {\r\n            if (row.id !== OldEdge.sourceHandle) continue;\r\n            row.trigger_id = newConnection.target;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case 112:\r\n        for (const condition of chatMsg.condition?.conditions || []) {\r\n          if (condition.id !== OldEdge.sourceHandle) continue;\r\n          condition.trigger_id = newConnection.target;\r\n          break;\r\n        }\r\n        break;\r\n      default:\r\n        chatMsg.trigger_id = newConnection.target;\r\n        const newEdges: Edge<any>[] = updateEdge(OldEdge, newConnection, edges);\r\n        setEdges(newEdges);\r\n        saveHistory({ nodes, edges: newEdges, chatMsgs });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onEdgesDelete: OnEdgesDelete = (edges) => {\r\n    for (const edge of edges) {\r\n      const chatMsg = chatMsgs.find((msg) => msg.id === edge.source);\r\n      if (!chatMsg) return;\r\n\r\n      switch (chatMsg.type) {\r\n        case 101:\r\n          for (const option of chatMsg.options || []) {\r\n            if (option.id !== edge.sourceHandle) continue;\r\n            option.trigger_id = undefined;\r\n            break;\r\n          }\r\n          break;\r\n        case 108:\r\n          for (const condition of chatMsg.condition?.conditions || []) {\r\n            if (condition.id !== edge.sourceHandle) continue;\r\n            condition.trigger_id = undefined;\r\n            break;\r\n          }\r\n          break;\r\n        case 109:\r\n          for (const condition of chatMsg.condition?.conditions || []) {\r\n            if (condition.id !== edge.sourceHandle) continue;\r\n            condition.trigger_id = undefined;\r\n            break;\r\n          }\r\n          break;\r\n        case 110:\r\n          for (const button of chatMsg.action?.buttons || []) {\r\n            if (button.button_id !== edge.sourceHandle) continue;\r\n            button.trigger_id = undefined;\r\n            break;\r\n          }\r\n          break;\r\n        case 111:\r\n          for (const button of chatMsg.action?.sections || []) {\r\n            for (const row of button.rows) {\r\n              if (row.id !== edge.sourceHandle) continue;\r\n              row.trigger_id = undefined;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        case 112:\r\n          for (const condition of chatMsg.condition?.conditions || []) {\r\n            if (condition.id !== edge.sourceHandle) continue;\r\n            condition.trigger_id = undefined;\r\n            break;\r\n          }\r\n          break;\r\n        default:\r\n          chatMsg.trigger_id = undefined;\r\n          break;\r\n      }\r\n      saveHistory({ nodes, edges, chatMsgs });\r\n    }\r\n  };\r\n\r\n  const onNodesDelete: OnNodesDelete = (deleted_nodes) => {\r\n    for (const node of deleted_nodes) {\r\n      const chatMsgIndex = chatMsgs.findIndex((msg) => msg.id === node.id);\r\n      const nodeIndex = nodes.findIndex((msg) => msg.id === node.id);\r\n      if (chatMsgIndex === -1 || nodeIndex === -1) continue;\r\n      const newNodes = nodes;\r\n      newNodes.splice(nodeIndex, 1);\r\n      setNodes(newNodes);\r\n      onChatMsgDelete(chatMsgIndex, newNodes);\r\n    }\r\n  };\r\n\r\n  const addFlowNode = (type: number, label: string, position: any) => {\r\n    const id = new UniqueEntityID();\r\n\r\n    const nodeModelService = new NodeModelService(\r\n      id.toString(),\r\n      type,\r\n      position,\r\n      <p>{label}</p>\r\n    );\r\n    const node_data = nodeModelService.get_node_data();\r\n    const newNodes = nodes.concat([node_data.flow_node as any]);\r\n    setNodes(newNodes);\r\n    setCurrentNodeIndex(nodes.length);\r\n    addChatMsg(node_data.flow_msg, newNodes);\r\n  };\r\n\r\n  const onNodeDragEnd = (node: Node) => {\r\n    const draggedElement = nodes.findIndex(\r\n      ({ id }: { id: string }) => id === node.id\r\n    );\r\n\r\n    nodes[draggedElement] = {\r\n      ...nodes[draggedElement],\r\n      position: node.position,\r\n    };\r\n    saveHistory({ nodes, edges, chatMsgs });\r\n  };\r\n\r\n  // stress test code\r\n  // const addFlowNode = (type: number, label: string, position: any) => {\r\n  //   let nodes: any[] = [];\r\n\r\n  //   let xNodes = 10,\r\n  //     yNodes = 10;\r\n\r\n  //   for (let y = 0; y < yNodes; y++) {\r\n  //     for (let x = 0; x < xNodes; x++) {\r\n  //       const position = { x: x * 100, y: y * 50 };\r\n  //       const id = new UniqueEntityID();\r\n\r\n  //       const nodeModelService = new NodeModelService(\r\n  //         id.toString(),\r\n  //         type,\r\n  //         position,\r\n  //         <p>{label}</p>\r\n  //       );\r\n  //       const node_data = nodeModelService.get_node_data();\r\n\r\n  //       nodes.push(node_data.flow_node);\r\n  //       setCurrentNodeIndex(nodes.length);\r\n  //       addChatMsg(node_data.flow_msg, nodes);\r\n  //     }\r\n  //   }\r\n\r\n  //   setNodes((prevState) => prevState.concat(nodes));\r\n  // };\r\n\r\n  const onNodeClick = (\r\n    _event: React.MouseEvent<Element, MouseEvent>,\r\n    node: Node<any>\r\n  ) => {\r\n    setCurrentDrawerMode(CurrentDrawerModes.NODE);\r\n    if (node.id !== currentChatMsg?.id) {\r\n      const node_index = nodes.findIndex((f_node) => f_node.id === node.id);\r\n      if (node_index === -1) return;\r\n\r\n      setCurrentNodeIndex(node_index);\r\n      onClickChatMsg(node.id);\r\n      setReloadDrawer((prev) => (prev += 1));\r\n    }\r\n  };\r\n\r\n  const deselectNode = () => {\r\n    setCurrentNodeIndex(undefined);\r\n    setCurrentDrawerMode(CurrentDrawerModes.MENU);\r\n    clearSelectedMsg();\r\n  };\r\n\r\n  const updateNodeLabel = (label: NodeDataLabel | undefined) => {\r\n    if (typeof currentNodeIndex !== \"number\") return;\r\n\r\n    // setNodes((prevState) => {\r\n    //   prevState[currentNodeIndex] = {\r\n    //     ...prevState[currentNodeIndex],\r\n    //     data: {\r\n    //       ...prevState[currentNodeIndex].data,\r\n    //       nodeDataLabel: label,\r\n    //     },\r\n    //   };\r\n    //   return prevState;\r\n    if (currentNode) {\r\n      currentNode.data.nodeDataLabel = label;\r\n    }\r\n\r\n    setRefreshNode((prev) => (prev += 1));\r\n  };\r\n\r\n  return (\r\n    <FlowNodeServicesContext.Provider\r\n      value={{\r\n        dragOverFlow,\r\n        onConnect: onEdgeConnect,\r\n        spacePressed,\r\n        addFlowNode,\r\n        onNodeClick,\r\n        deselectNode,\r\n        updateNodeLabel,\r\n        onEdgeUpdate,\r\n        onEdgesDelete,\r\n        onNodesDelete,\r\n        onNodeDragEnd,\r\n      }}\r\n    >\r\n      {children}\r\n    </FlowNodeServicesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FlowNodeServicesProvider;\r\n","export enum MessageType {\r\n  TYPE100 = 100,\r\n  TYPE101 = 101,\r\n  TYPE102 = 102,\r\n  TYPE103 = 103,\r\n  TYPE104 = 104,\r\n  TYPE105 = 105,\r\n  TYPE107 = 107,\r\n  TYPE108 = 108,\r\n  TYPE109 = 109,\r\n  TYPE110 = 110,\r\n  TYPE111 = 111,\r\n  TYPE112 = 112,\r\n  TYPE113 = 113,\r\n}\r\n\r\nexport enum HeaderType {\r\n  TEXT = \"text\",\r\n  VIDEO = \"video\",\r\n  IMAGE = \"image\",\r\n  FILE = \"file\",\r\n}\r\n\r\nexport enum MediaProvider {\r\n  API = \"api\",\r\n  UPLOAD = \"upload\",\r\n}\r\n\r\nexport enum IF_ELSE_TYPES {\r\n  DATA_FIELD = \"lead_data_field\",\r\n  USER_RESPONSE = \"user_response\",\r\n}\r\n\r\nexport enum ConditionType {\r\n  IF_ELSE = \"if_else\",\r\n  TRUE_FALSE = \"true_false\",\r\n  API_VALIDATION = \"api_validation\",\r\n}\r\n\r\nexport enum ValidationType {\r\n  SUCCESS = \"success\",\r\n  FAILURE = \"failure\",\r\n}\r\n\r\nexport enum LocationType {\r\n  MAP = \"map\",\r\n  API = \"api\",\r\n  MANUAL = \"manual\",\r\n}\r\n","export enum HandlePosition {\r\n  TOP = \"top\",\r\n  BOTTOM = \"bottom\",\r\n}\r\n\r\nexport enum HandleType {\r\n  TARGET = \"target\",\r\n  SOURCE = \"source\",\r\n}\r\n\r\nexport enum Position {\r\n  Left = \"left\",\r\n  Top = \"top\",\r\n  Right = \"right\",\r\n  Bottom = \"bottom\",\r\n}\r\n\r\nexport enum NodeDataLabel {\r\n  First = \"FIRST\",\r\n  Last = \"LAST\",\r\n}\r\n","export enum OptionType {\r\n  OPTION = \"option\",\r\n  BUTTON = \"replyButton\",\r\n  CONDITION = \"condition\",\r\n  LIST_SECTION = \"listSection\",\r\n  LIST_SECTION_ITEM = \"listSectionItem\",\r\n}\r\n","import axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from \"axios\";\r\n\r\nconst Axios = axios.create({\r\n  baseURL: `${process.env.REACT_APP_API_URL}/${process.env.REACT_APP_API_VER}`,\r\n  timeout: 15000,\r\n  headers: {\r\n    Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n  },\r\n});\r\n\r\nconst OpenAxios = axios.create({\r\n  baseURL: `/static`,\r\n  timeout: 15000,\r\n});\r\n\r\nconst AddCommonHeaders = (Axios: AxiosInstance) => {\r\n  Axios.defaults.headers.common[\"x-businessId\"] =\r\n    localStorage.getItem(\"businessId\") || \"\";\r\n\r\n  Axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + localStorage.getItem(\"token\");\r\n};\r\n\r\nexport const AuthenticatedReq = async (\r\n  url: string,\r\n  method: string,\r\n  config?: AxiosRequestConfig<any>\r\n) => {\r\n  try {\r\n    AddCommonHeaders(Axios);\r\n    const res = await Axios({ url, method: method, ...config });\r\n    return res.data;\r\n  } catch (err: any) {\r\n    const reqError = err as AxiosError;\r\n    return reqError.response?.data ?? { success: false, message: err.message };\r\n  }\r\n};\r\n\r\nexport const OpenReq = async (\r\n  url: string,\r\n  method: string,\r\n  config?: AxiosRequestConfig<any>\r\n) => {\r\n  try {\r\n    const res = await OpenAxios({ url, method: method, ...config });\r\n    return res.data;\r\n  } catch (err: any) {\r\n    const reqError = err as AxiosError;\r\n    return reqError.response?.data ?? { success: false, message: err.message };\r\n  }\r\n};\r\n\r\nexport default Axios;\r\n","import moment from \"moment\";\r\n\r\nexport function getRandomColor() {\r\n  var rgb = [];\r\n\r\n  for (var i = 0; i < 3; i++) {\r\n    rgb.push(Math.floor(Math.random() * 255));\r\n  }\r\n\r\n  return \"rgb(\" + rgb.join(\",\") + \", 0.5)\";\r\n}\r\n\r\nexport function secondsToHms(d: number) {\r\n  d = Number(d);\r\n  let h = Math.floor(d / 3600);\r\n  let m = Math.floor((d % 3600) / 60);\r\n  let s = Math.floor((d % 3600) % 60);\r\n\r\n  let hDisplay = h > 0 ? h + (h === 1 ? \" hour \" : \" hours \") : \"\";\r\n  let mDisplay = m > 0 ? m + (m === 1 ? \" minute \" : \" minutes \") : \"\";\r\n  let sDisplay = s > 0 ? s + (s === 1 ? \" second\" : \" seconds\") : \"\";\r\n  return hDisplay + mDisplay + sDisplay;\r\n}\r\n\r\nexport const isBackDropOrEscapeKey = (reason: string) =>\r\n  reason === \"backdropClick\" || reason === \"escapeKeyDown\";\r\n\r\nexport const monthFormat = (month: string) => moment(month).format(\"MMM YYYY\");\r\n\r\nexport const formatFB_IGAccountsArray = (accounts: string[]): string[] => {\r\n  let withChangedFBAccounts: string[] = [];\r\n\r\n  if (accounts.includes(\"facebook\")) {\r\n    withChangedFBAccounts = accounts.filter((acc) => acc !== \"facebook\");\r\n  }\r\n\r\n  if (accounts.includes(\"instagram\")) {\r\n    withChangedFBAccounts = withChangedFBAccounts.filter(\r\n      (acc) => acc !== \"instagram\"\r\n    );\r\n  }\r\n\r\n  if (accounts.includes(\"facebook\") || accounts.includes(\"instagram\")) {\r\n    withChangedFBAccounts.unshift(\"facebook and instagram\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"facebook and instagram\") &&\r\n    !withChangedFBAccounts.includes(\"facebook and instagram\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"facebook and instagram\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"twitter\") &&\r\n    !withChangedFBAccounts.includes(\"twitter\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"twitter\");\r\n  }\r\n\r\n  if (\r\n    accounts.includes(\"linkedin\") &&\r\n    !withChangedFBAccounts.includes(\"linkedin\")\r\n  ) {\r\n    withChangedFBAccounts.push(\"linkedin\");\r\n  }\r\n\r\n  return withChangedFBAccounts;\r\n};\r\n"],"names":["ChatFlowApi","getAllDataFields","AuthenticatedReq","createLeadDataField","data","getChatFlowData","chatflow_id","putChatFlowSettings","putChatFlowData","CurrentDrawerModes","FlowHistoryContext","React","undefined","useFlowHistory","context","useContext","Error","children","useState","history","setHistory","historyIndex","setHistoryIndex","canUndo","useMemo","length","canRedo","resetHistory","saveHistory","state","slice","undo","redo","useHistory","Provider","value","FlowDrawerContext","createContext","useFlowDrawer","isDrawerOpen","setDrawerOpen","MENU","currentDrawerMode","setCurrentDrawerMode","FlowDataContext","useFlowData","useParams","useSnacks","setErrorMessage","setSuccessMessage","reloadDrawer","setReloadDrawer","refreshNode","setRefreshNode","dataFields","setDataFields","editingData","toggleEditingData","nodes","setNodes","useEdgesState","edges","setEdges","onEdgesChange","chatMsgs","setChatMsgs","copiedNode","setCopiedNode","copiedChatMsgs","setCopiedChatMsgs","flowSettingsLoaded","setFlowSettingLoaded","auto_reminder","response","default_message","languages","status","trigger_time","send_last_message","disable_reply","reset_session_in","flowSettings","setFlowSettings","currentMsgIndex","setCurrentMsgIndex","currentNodeIndex","setCurrentNodeIndex","clearSelectedMsg","saveChatFlowData","msgs","res","success","message","fetchChatFlowData","payload","setting","fetchAllDataFields","console","error","useEffect","addChatMsg","msg","newNodes","newChatMsgs","concat","onClickChatMsg","id","current","findIndex","OnChatMsgUpdate","current_msg","index","currentIndex","currentChatMsg","onChatMsgDelete","splice","currentNode","UniqueEntityID","string","uuid","split","join","_id","this","constructor","toValue","String","NodeCopy","commonNewNode","node","newId","copySourceHandles","nodeDataLabel","handles","map","handle","toString","filter","type","HandleType","newSourceHandles","CommonCopy","chatMsg","newNode","newChatMsg","trigger_id","msg_settings","is_first_msg","is_last_msg","Message100","sourceHandles","options","option","i","Message101","Message108","condition","conditions","Message109","Message110","action","buttons","button","button_id","Message111","sections","Message112","FlowEdge","FlowServicesContext","useFlowServices","FlowServicesProvider","addCopiedNode","position","x","y","getCopiedNode","messageType","MessageType","addOption","makeHandle","random_color","getRandomColor","option_id","OptionType","unshift","HandlePosition","style","border","push","label","title","rows","description","borderLeft","values","removable","prev","removeOption","removeHandle","optionIndex","e","forEach","row","buttonIndex","sectionIndex","rowIndex","conditionIndex","copyNode","pasteNode","duplicateNode","memo","show","appearance","header","onClose","onConfirm","Dialog","maxWidth","open","DialogTitle","DialogContent","DialogContentText","classes","root","DialogActions","className","Button","onClick","FlowDialogContext","useFlowDialog","dialogState","setDialogState","openAlertDialog","openWarningDialog","NodeModelService","error_msg","assign_rules","resend_on_error","data_field","disable_auto_reminder","jump","response_type","save_input","skip_on_back","common_msg_settings","flow_msg","common_chat_msg","primary_msg","flow_node","common_node","location_msg","LocationType","media_provider","MediaProvider","HeaderType","uploaded_files","api_url","filename","pre_msg","post_msg","Handle1Id","Handle2Id","ConditionType","if_else_param_type","IF_ELSE_TYPES","evaluate_data_field","validation_type","ValidationType","Type100Msg","Type101Msg","Type102Msg","Type103Msg","Type104Msg","Type105Msg","Type107Msg","Type108Msg","Type109Msg","Type110Msg","Type111Msg","Type112Msg","Type113Msg","FlowNodeServicesContext","useFlowNodeServices","spacePressed","useKeyPress","dragOverFlow","useCallback","event","preventDefault","dataTransfer","dropEffect","onConnect","params","SMOOTHSTEP","source","target","find","strokeWidth","sourceHandle","newEdges","addEdge","section","addFlowNode","node_data","get_node_data","onNodeClick","_event","NODE","node_index","f_node","deselectNode","updateNodeLabel","onEdgeUpdate","OldEdge","newConnection","updateEdge","onEdgesDelete","edge","onNodesDelete","deleted_nodes","chatMsgIndex","nodeIndex","onNodeDragEnd","draggedElement","Position","NodeDataLabel","Axios","axios","baseURL","process","timeout","headers","Authorization","localStorage","getItem","OpenAxios","AddCommonHeaders","defaults","common","url","method","config","reqError","OpenReq","rgb","Math","floor","random","secondsToHms","d","Number","h","m","s","isBackDropOrEscapeKey","reason","monthFormat","month","moment","format","formatFB_IGAccountsArray","accounts","withChangedFBAccounts","includes","acc"],"sourceRoot":""}