let o;const l=new Uint8Array(16);function s(){if(!o&&(o=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!o))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(l)}const e=[];for(let t=0;t<256;++t)e.push((t+256).toString(16).slice(1));function d(t,n=0){return(e[t[n+0]]+e[t[n+1]]+e[t[n+2]]+e[t[n+3]]+"-"+e[t[n+4]]+e[t[n+5]]+"-"+e[t[n+6]]+e[t[n+7]]+"-"+e[t[n+8]]+e[t[n+9]]+"-"+e[t[n+10]]+e[t[n+11]]+e[t[n+12]]+e[t[n+13]]+e[t[n+14]]+e[t[n+15]]).toLowerCase()}const a=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),c={randomUUID:a};function p(t,n,i){if(c.randomUUID&&!n&&!t)return c.randomUUID();t=t||{};const u=t.random||(t.rng||s)();if(u[6]=u[6]&15|64,u[8]=u[8]&63|128,n){i=i||0;for(let r=0;r<16;++r)n[i+r]=u[r];return n}return d(u)}class y{constructor(n){this.value=n,this.value=n}equals(n){return n==null||!(n instanceof this.constructor)?!1:n.toValue()===this.value}toString(){return String(this.value)}toValue(){return this.value}}class g extends y{constructor(n){const u=p().split("-").join("");super(n||u)}}export{g as U};
